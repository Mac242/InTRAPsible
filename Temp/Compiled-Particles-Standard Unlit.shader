// Compiled shader for all platforms

//////////////////////////////////////////////////////////////////////////
// 
// NOTE: This is *not* a valid shader file, the contents are provided just
// for information and for debugging purposes only.
// 
//////////////////////////////////////////////////////////////////////////
// Skipping shader variants that would not be included into build of current scene.

Shader "Particles/Standard Unlit" {
Properties {
 
 _MainTex ("Albedo", 2D) = "white" { }
 _Color ("Color", Color) = (1.000000,1.000000,1.000000,1.000000)
 _Cutoff ("Alpha Cutoff", Range(0.000000,1.000000)) = 0.500000
 _BumpScale ("Scale", Float) = 1.000000
 _BumpMap ("Normal Map", 2D) = "bump" { }
 _EmissionColor ("Color", Color) = (0.000000,0.000000,0.000000,1.000000)
 _EmissionMap ("Emission", 2D) = "white" { }
 _DistortionStrength ("Strength", Float) = 1.000000
 _DistortionBlend ("Blend", Range(0.000000,1.000000)) = 0.500000
 _SoftParticlesNearFadeDistance ("Soft Particles Near Fade", Float) = 0.000000
 _SoftParticlesFarFadeDistance ("Soft Particles Far Fade", Float) = 1.000000
 _CameraNearFadeDistance ("Camera Near Fade", Float) = 1.000000
 _CameraFarFadeDistance ("Camera Far Fade", Float) = 2.000000
[HideInInspector]  _Mode ("__mode", Float) = 0.000000
[HideInInspector]  _ColorMode ("__colormode", Float) = 0.000000
[HideInInspector]  _FlipbookMode ("__flipbookmode", Float) = 0.000000
[HideInInspector]  _LightingEnabled ("__lightingenabled", Float) = 0.000000
[HideInInspector]  _DistortionEnabled ("__distortionenabled", Float) = 0.000000
[HideInInspector]  _EmissionEnabled ("__emissionenabled", Float) = 0.000000
[HideInInspector]  _BlendOp ("__blendop", Float) = 0.000000
[HideInInspector]  _SrcBlend ("__src", Float) = 1.000000
[HideInInspector]  _DstBlend ("__dst", Float) = 0.000000
[HideInInspector]  _ZWrite ("__zw", Float) = 1.000000
[HideInInspector]  _Cull ("__cull", Float) = 2.000000
[HideInInspector]  _SoftParticlesEnabled ("__softparticlesenabled", Float) = 0.000000
[HideInInspector]  _CameraFadingEnabled ("__camerafadingenabled", Float) = 0.000000
[HideInInspector]  _SoftParticleFadeParams ("__softparticlefadeparams", Vector) = (0.000000,0.000000,0.000000,0.000000)
[HideInInspector]  _CameraFadeParams ("__camerafadeparams", Vector) = (0.000000,0.000000,0.000000,0.000000)
[HideInInspector]  _ColorAddSubDiff ("__coloraddsubdiff", Vector) = (0.000000,0.000000,0.000000,0.000000)
[HideInInspector]  _DistortionStrengthScaled ("__distortionstrengthscaled", Float) = 0.000000
}
SubShader { 
 Tags { "IGNOREPROJECTOR"="true" "RenderType"="Opaque" "PreviewType"="Plane" "PerformanceChecks"="False" }
 GrabPass {
  "_GrabTexture"
  Tags { "LIGHTMODE"="ALWAYS" }
 }


 // Stats for Vertex shader:
 //        d3d11: 38 avg math (27..52)
 // Stats for Fragment shader:
 //        d3d11: 3 avg math (2..5), 1 avg texture (1..2)
 Pass {
  Name "ShadowCaster"
  Tags { "LIGHTMODE"="SHADOWCASTER" "IGNOREPROJECTOR"="true" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PreviewType"="Plane" "PerformanceChecks"="False" }
  Cull Off
  ColorMask RGB
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
Global Keywords: SHADOWS_DEPTH 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 31 math, 3 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"

Constant Buffer "UnityLighting" (768 bytes) on slot 0 {
  Vector4 _WorldSpaceLightPos0 at 0
}
Constant Buffer "UnityShadows" (416 bytes) on slot 1 {
  Vector4 unity_LightShadowBias at 80
}
Constant Buffer "UnityPerDraw" (176 bytes) on slot 2 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 3 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// COLOR                    0   xyzw        2     NONE   float       
// TEXCOORD                 0   xy          3     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
//
      vs_4_0
      dcl_constantbuffer CB0[1], immediateIndexed
      dcl_constantbuffer CB1[6], immediateIndexed
      dcl_constantbuffer CB2[7], immediateIndexed
      dcl_constantbuffer CB3[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v1.xyz
      dcl_output_siv o0.xyzw, position
      dcl_temps 3
   0: dp3 r0.x, v1.xyzx, cb2[4].xyzx
   1: dp3 r0.y, v1.xyzx, cb2[5].xyzx
   2: dp3 r0.z, v1.xyzx, cb2[6].xyzx
   3: dp3 r0.w, r0.xyzx, r0.xyzx
   4: rsq r0.w, r0.w
   5: mul r0.xyz, r0.wwww, r0.xyzx
   6: mul r1.xyzw, v0.yyyy, cb2[1].xyzw
   7: mad r1.xyzw, cb2[0].xyzw, v0.xxxx, r1.xyzw
   8: mad r1.xyzw, cb2[2].xyzw, v0.zzzz, r1.xyzw
   9: mad r1.xyzw, cb2[3].xyzw, v0.wwww, r1.xyzw
  10: mad r2.xyz, -r1.xyzx, cb0[0].wwww, cb0[0].xyzx
  11: dp3 r0.w, r2.xyzx, r2.xyzx
  12: rsq r0.w, r0.w
  13: mul r2.xyz, r0.wwww, r2.xyzx
  14: dp3 r0.w, r0.xyzx, r2.xyzx
  15: mad r0.w, -r0.w, r0.w, l(1.000000)
  16: sqrt r0.w, r0.w
  17: mul r0.w, r0.w, cb1[5].z
  18: mad r0.xyz, -r0.xyzx, r0.wwww, r1.xyzx
  19: ne r0.w, cb1[5].z, l(0.000000)
  20: movc r0.xyz, r0.wwww, r0.xyzx, r1.xyzx
  21: mul r2.xyzw, r0.yyyy, cb3[18].xyzw
  22: mad r2.xyzw, cb3[17].xyzw, r0.xxxx, r2.xyzw
  23: mad r0.xyzw, cb3[19].xyzw, r0.zzzz, r2.xyzw
  24: mad r0.xyzw, cb3[20].xyzw, r1.wwww, r0.xyzw
  25: div r1.x, cb1[5].x, r0.w
  26: min r1.x, r1.x, l(0.000000)
  27: max r1.x, r1.x, l(-1.000000)
  28: add r0.z, r0.z, r1.x
  29: min r1.x, r0.w, r0.z
  30: mov o0.xyw, r0.xyxw
  31: add r0.x, -r0.z, r1.x
  32: mad o0.z, cb1[5].y, r0.x, r0.z
  33: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_output o0.xyzw
   0: mov o0.xyzw, l(0,0,0,0)
   1: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: SHADOWS_DEPTH 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles":
Shader Disassembly:
#ifdef VERTEX
#version 100

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat6;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
    u_xlatb9 = unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat6 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = max((-u_xlat0.w), u_xlat6);
    gl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
#define SV_Target0 gl_FragData[0]
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: SHADOWS_DEPTH 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Constant Buffer "$Globals" (224 bytes) {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
}

Shader Disassembly:
#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat6;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(unity_LightShadowBias.z!=0.0);
#else
    u_xlatb9 = unity_LightShadowBias.z!=0.0;
#endif
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = max((-u_xlat0.w), u_xlat6);
    gl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: SHADOWS_DEPTH 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"

Constant Buffer "VGlobals" (224 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_LightShadowBias;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat6;
    float u_xlat9;
    bool u_xlatb9;
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat1);
    u_xlat2.xyz = fma((-u_xlat1.xyz), VGlobals._WorldSpaceLightPos0.www, VGlobals._WorldSpaceLightPos0.xyz);
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat2.xyz = float3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = fma((-u_xlat9), u_xlat9, 1.0);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * VGlobals.unity_LightShadowBias.z;
    u_xlat0.xyz = fma((-u_xlat0.xyz), float3(u_xlat9), u_xlat1.xyz);
    u_xlatb9 = VGlobals.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat2);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat2);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    u_xlat1.x = VGlobals.unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = min(u_xlat1.x, 0.0);
    u_xlat1.x = max(u_xlat1.x, -1.0);
    u_xlat6 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = min(u_xlat0.w, u_xlat6);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
    output.mtl_Position.z = fma(VGlobals.unity_LightShadowBias.y, u_xlat0.x, u_xlat6);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_Target0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: SHADOWS_DEPTH 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Constant Buffer "$Globals" (224 bytes) {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
}

Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat6;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
    u_xlatb9 = unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat6 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = max((-u_xlat0.w), u_xlat6);
    gl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

layout(location = 0) out vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: SHADOWS_DEPTH 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Normal"
Uses vertex data channel "Vertex"

Constant Buffer "VGlobals2044298275" (224 bytes) on set: 1, binding: 0, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 160
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 254

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 12 66 227
                              Decorate 12 Location 1
                              Decorate 16 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 Offset 16
                              MemberDecorate 19 2 Offset 32
                              MemberDecorate 19 3 Offset 96
                              MemberDecorate 19 4 Offset 160
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 0
                              Decorate 66 Location 0
                              MemberDecorate 225 0 BuiltIn Position
                              MemberDecorate 225 1 BuiltIn PointSize
                              MemberDecorate 225 2 BuiltIn ClipDistance
                              Decorate 225 Block
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypeVector 6(float) 3
              11:             TypePointer Input 10(fvec3)
              12:     11(ptr) Variable Input
              14:             TypeInt 32 0
              15:     14(int) Constant 4
              16:             TypeArray 7(fvec4) 15
              17:             TypeArray 7(fvec4) 15
              18:             TypeArray 7(fvec4) 15
              19:             TypeStruct 7(fvec4) 7(fvec4) 16 17 18
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 3
              24:     22(int) Constant 0
              25:             TypePointer Uniform 7(fvec4)
              30:     14(int) Constant 0
              31:             TypePointer Private 6(float)
              34:     22(int) Constant 1
              39:     14(int) Constant 1
              42:     22(int) Constant 2
              47:     14(int) Constant 2
              49:     31(ptr) Variable Private
              64:      8(ptr) Variable Private
              65:             TypePointer Input 7(fvec4)
              66:     65(ptr) Variable Input
              93:      8(ptr) Variable Private
             130:    6(float) Constant 1065353216
             135:             TypePointer Uniform 6(float)
             150:             TypeBool
             151:             TypePointer Private 150(bool)
             152:    151(ptr) Variable Private
             155:    6(float) Constant 0
             158:             TypePointer Function 10(fvec3)
             172:     22(int) Constant 4
             199:     14(int) Constant 3
             210:    6(float) Constant 3212836864
             213:     31(ptr) Variable Private
             224:             TypeArray 6(float) 39
             225:             TypeStruct 7(fvec4) 6(float) 224
             226:             TypePointer Output 225(struct)
             227:    226(ptr) Variable Output
             230:             TypePointer Output 7(fvec4)
             247:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
             159:    158(ptr) Variable Function
              13:   10(fvec3) Load 12
              26:     25(ptr) AccessChain 21 23 24
              27:    7(fvec4) Load 26
              28:   10(fvec3) VectorShuffle 27 27 0 1 2
              29:    6(float) Dot 13 28
              32:     31(ptr) AccessChain 9 30
                              Store 32 29
              33:   10(fvec3) Load 12
              35:     25(ptr) AccessChain 21 23 34
              36:    7(fvec4) Load 35
              37:   10(fvec3) VectorShuffle 36 36 0 1 2
              38:    6(float) Dot 33 37
              40:     31(ptr) AccessChain 9 39
                              Store 40 38
              41:   10(fvec3) Load 12
              43:     25(ptr) AccessChain 21 23 42
              44:    7(fvec4) Load 43
              45:   10(fvec3) VectorShuffle 44 44 0 1 2
              46:    6(float) Dot 41 45
              48:     31(ptr) AccessChain 9 47
                              Store 48 46
              50:    7(fvec4) Load 9
              51:   10(fvec3) VectorShuffle 50 50 0 1 2
              52:    7(fvec4) Load 9
              53:   10(fvec3) VectorShuffle 52 52 0 1 2
              54:    6(float) Dot 51 53
                              Store 49 54
              55:    6(float) Load 49
              56:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 55
                              Store 49 56
              57:    6(float) Load 49
              58:   10(fvec3) CompositeConstruct 57 57 57
              59:    7(fvec4) Load 9
              60:   10(fvec3) VectorShuffle 59 59 0 1 2
              61:   10(fvec3) FMul 58 60
              62:    7(fvec4) Load 9
              63:    7(fvec4) VectorShuffle 62 61 4 5 6 3
                              Store 9 63
              67:    7(fvec4) Load 66
              68:    7(fvec4) VectorShuffle 67 67 1 1 1 1
              69:     25(ptr) AccessChain 21 42 34
              70:    7(fvec4) Load 69
              71:    7(fvec4) FMul 68 70
                              Store 64 71
              72:     25(ptr) AccessChain 21 42 24
              73:    7(fvec4) Load 72
              74:    7(fvec4) Load 66
              75:    7(fvec4) VectorShuffle 74 74 0 0 0 0
              76:    7(fvec4) FMul 73 75
              77:    7(fvec4) Load 64
              78:    7(fvec4) FAdd 76 77
                              Store 64 78
              79:     25(ptr) AccessChain 21 42 42
              80:    7(fvec4) Load 79
              81:    7(fvec4) Load 66
              82:    7(fvec4) VectorShuffle 81 81 2 2 2 2
              83:    7(fvec4) FMul 80 82
              84:    7(fvec4) Load 64
              85:    7(fvec4) FAdd 83 84
                              Store 64 85
              86:     25(ptr) AccessChain 21 42 23
              87:    7(fvec4) Load 86
              88:    7(fvec4) Load 66
              89:    7(fvec4) VectorShuffle 88 88 3 3 3 3
              90:    7(fvec4) FMul 87 89
              91:    7(fvec4) Load 64
              92:    7(fvec4) FAdd 90 91
                              Store 64 92
              94:    7(fvec4) Load 64
              95:   10(fvec3) VectorShuffle 94 94 0 1 2
              96:   10(fvec3) FNegate 95
              97:     25(ptr) AccessChain 21 24
              98:    7(fvec4) Load 97
              99:   10(fvec3) VectorShuffle 98 98 3 3 3
             100:   10(fvec3) FMul 96 99
             101:     25(ptr) AccessChain 21 24
             102:    7(fvec4) Load 101
             103:   10(fvec3) VectorShuffle 102 102 0 1 2
             104:   10(fvec3) FAdd 100 103
             105:    7(fvec4) Load 93
             106:    7(fvec4) VectorShuffle 105 104 4 5 6 3
                              Store 93 106
             107:    7(fvec4) Load 93
             108:   10(fvec3) VectorShuffle 107 107 0 1 2
             109:    7(fvec4) Load 93
             110:   10(fvec3) VectorShuffle 109 109 0 1 2
             111:    6(float) Dot 108 110
                              Store 49 111
             112:    6(float) Load 49
             113:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 112
                              Store 49 113
             114:    6(float) Load 49
             115:   10(fvec3) CompositeConstruct 114 114 114
             116:    7(fvec4) Load 93
             117:   10(fvec3) VectorShuffle 116 116 0 1 2
             118:   10(fvec3) FMul 115 117
             119:    7(fvec4) Load 93
             120:    7(fvec4) VectorShuffle 119 118 4 5 6 3
                              Store 93 120
             121:    7(fvec4) Load 9
             122:   10(fvec3) VectorShuffle 121 121 0 1 2
             123:    7(fvec4) Load 93
             124:   10(fvec3) VectorShuffle 123 123 0 1 2
             125:    6(float) Dot 122 124
                              Store 49 125
             126:    6(float) Load 49
             127:    6(float) FNegate 126
             128:    6(float) Load 49
             129:    6(float) FMul 127 128
             131:    6(float) FAdd 129 130
                              Store 49 131
             132:    6(float) Load 49
             133:    6(float) ExtInst 1(GLSL.std.450) 31(Sqrt) 132
                              Store 49 133
             134:    6(float) Load 49
             136:    135(ptr) AccessChain 21 34 47
             137:    6(float) Load 136
             138:    6(float) FMul 134 137
                              Store 49 138
             139:    7(fvec4) Load 9
             140:   10(fvec3) VectorShuffle 139 139 0 1 2
             141:   10(fvec3) FNegate 140
             142:    6(float) Load 49
             143:   10(fvec3) CompositeConstruct 142 142 142
             144:   10(fvec3) FMul 141 143
             145:    7(fvec4) Load 64
             146:   10(fvec3) VectorShuffle 145 145 0 1 2
             147:   10(fvec3) FAdd 144 146
             148:    7(fvec4) Load 9
             149:    7(fvec4) VectorShuffle 148 147 4 5 6 3
                              Store 9 149
             153:    135(ptr) AccessChain 21 34 47
             154:    6(float) Load 153
             156:   150(bool) FOrdNotEqual 154 155
                              Store 152 156
             157:   150(bool) Load 152
                              SelectionMerge 161 None
                              BranchConditional 157 160 164
             160:               Label
             162:    7(fvec4)   Load 9
             163:   10(fvec3)   VectorShuffle 162 162 0 1 2
                                Store 159 163
                                Branch 161
             164:               Label
             165:    7(fvec4)   Load 64
             166:   10(fvec3)   VectorShuffle 165 165 0 1 2
                                Store 159 166
                                Branch 161
             161:             Label
             167:   10(fvec3) Load 159
             168:    7(fvec4) Load 9
             169:    7(fvec4) VectorShuffle 168 167 4 5 6 3
                              Store 9 169
             170:    7(fvec4) Load 9
             171:    7(fvec4) VectorShuffle 170 170 1 1 1 1
             173:     25(ptr) AccessChain 21 172 34
             174:    7(fvec4) Load 173
             175:    7(fvec4) FMul 171 174
                              Store 93 175
             176:     25(ptr) AccessChain 21 172 24
             177:    7(fvec4) Load 176
             178:    7(fvec4) Load 9
             179:    7(fvec4) VectorShuffle 178 178 0 0 0 0
             180:    7(fvec4) FMul 177 179
             181:    7(fvec4) Load 93
             182:    7(fvec4) FAdd 180 181
                              Store 93 182
             183:     25(ptr) AccessChain 21 172 42
             184:    7(fvec4) Load 183
             185:    7(fvec4) Load 9
             186:    7(fvec4) VectorShuffle 185 185 2 2 2 2
             187:    7(fvec4) FMul 184 186
             188:    7(fvec4) Load 93
             189:    7(fvec4) FAdd 187 188
                              Store 9 189
             190:     25(ptr) AccessChain 21 172 23
             191:    7(fvec4) Load 190
             192:    7(fvec4) Load 64
             193:    7(fvec4) VectorShuffle 192 192 3 3 3 3
             194:    7(fvec4) FMul 191 193
             195:    7(fvec4) Load 9
             196:    7(fvec4) FAdd 194 195
                              Store 9 196
             197:    135(ptr) AccessChain 21 34 30
             198:    6(float) Load 197
             200:     31(ptr) AccessChain 9 199
             201:    6(float) Load 200
             202:    6(float) FDiv 198 201
             203:     31(ptr) AccessChain 64 30
                              Store 203 202
             204:     31(ptr) AccessChain 64 30
             205:    6(float) Load 204
             206:    6(float) ExtInst 1(GLSL.std.450) 37(FMin) 205 155
             207:     31(ptr) AccessChain 64 30
                              Store 207 206
             208:     31(ptr) AccessChain 64 30
             209:    6(float) Load 208
             211:    6(float) ExtInst 1(GLSL.std.450) 40(FMax) 209 210
             212:     31(ptr) AccessChain 64 30
                              Store 212 211
             214:     31(ptr) AccessChain 9 47
             215:    6(float) Load 214
             216:     31(ptr) AccessChain 64 30
             217:    6(float) Load 216
             218:    6(float) FAdd 215 217
                              Store 213 218
             219:     31(ptr) AccessChain 9 199
             220:    6(float) Load 219
             221:    6(float) Load 213
             222:    6(float) ExtInst 1(GLSL.std.450) 37(FMin) 220 221
             223:     31(ptr) AccessChain 64 30
                              Store 223 222
             228:    7(fvec4) Load 9
             229:   10(fvec3) VectorShuffle 228 228 0 1 3
             231:    230(ptr) AccessChain 227 24
             232:    7(fvec4) Load 231
             233:    7(fvec4) VectorShuffle 232 229 4 5 2 6
                              Store 231 233
             234:    6(float) Load 213
             235:    6(float) FNegate 234
             236:     31(ptr) AccessChain 64 30
             237:    6(float) Load 236
             238:    6(float) FAdd 235 237
             239:     31(ptr) AccessChain 9 30
                              Store 239 238
             240:    135(ptr) AccessChain 21 34 39
             241:    6(float) Load 240
             242:     31(ptr) AccessChain 9 30
             243:    6(float) Load 242
             244:    6(float) FMul 241 243
             245:    6(float) Load 213
             246:    6(float) FAdd 244 245
             248:    247(ptr) AccessChain 227 24 47
                              Store 248 246
             249:    247(ptr) AccessChain 227 24 39
             250:    6(float) Load 249
             251:    6(float) FNegate 250
             252:    247(ptr) AccessChain 227 24 39
                              Store 252 251
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 13

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 9
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 9 RelaxedPrecision
                              Decorate 9 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Output 7(fvec4)
               9:      8(ptr) Variable Output
              10:    6(float) Constant 0
              11:    7(fvec4) ConstantComposite 10 10 10 10
               4:           2 Function None 3
               5:             Label
                              Store 9 11
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: SHADOWS_CUBE 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 28 math, 3 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "$Globals" (64 bytes) on slot 0 {
  Vector4 _MainTex_ST at 32
}
Constant Buffer "UnityLighting" (768 bytes) on slot 1 {
  Vector4 _WorldSpaceLightPos0 at 0
}
Constant Buffer "UnityShadows" (416 bytes) on slot 2 {
  Vector4 unity_LightShadowBias at 80
}
Constant Buffer "UnityPerDraw" (176 bytes) on slot 3 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 4 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 1   xy          0     NONE   float   xy  
// TEXCOORD                 3   xyzw        1     NONE   float   xyzw
// SV_POSITION              0   xyzw        2      POS   float   xyzw
//
      vs_4_0
      dcl_constantbuffer CB0[3], immediateIndexed
      dcl_constantbuffer CB1[1], immediateIndexed
      dcl_constantbuffer CB2[6], immediateIndexed
      dcl_constantbuffer CB3[7], immediateIndexed
      dcl_constantbuffer CB4[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v1.xyz
      dcl_input v2.xyzw
      dcl_input v3.xy
      dcl_output o0.xy
      dcl_output o1.xyzw
      dcl_output_siv o2.xyzw, position
      dcl_temps 3
   0: mad o0.xy, v3.xyxx, cb0[2].xyxx, cb0[2].zwzz
   1: mov o1.xyzw, v2.xyzw
   2: dp3 r0.x, v1.xyzx, cb3[4].xyzx
   3: dp3 r0.y, v1.xyzx, cb3[5].xyzx
   4: dp3 r0.z, v1.xyzx, cb3[6].xyzx
   5: dp3 r0.w, r0.xyzx, r0.xyzx
   6: rsq r0.w, r0.w
   7: mul r0.xyz, r0.wwww, r0.xyzx
   8: mul r1.xyzw, v0.yyyy, cb3[1].xyzw
   9: mad r1.xyzw, cb3[0].xyzw, v0.xxxx, r1.xyzw
  10: mad r1.xyzw, cb3[2].xyzw, v0.zzzz, r1.xyzw
  11: mad r1.xyzw, cb3[3].xyzw, v0.wwww, r1.xyzw
  12: mad r2.xyz, -r1.xyzx, cb1[0].wwww, cb1[0].xyzx
  13: dp3 r0.w, r2.xyzx, r2.xyzx
  14: rsq r0.w, r0.w
  15: mul r2.xyz, r0.wwww, r2.xyzx
  16: dp3 r0.w, r0.xyzx, r2.xyzx
  17: mad r0.w, -r0.w, r0.w, l(1.000000)
  18: sqrt r0.w, r0.w
  19: mul r0.w, r0.w, cb2[5].z
  20: mad r0.xyz, -r0.xyzx, r0.wwww, r1.xyzx
  21: ne r0.w, cb2[5].z, l(0.000000)
  22: movc r0.xyz, r0.wwww, r0.xyzx, r1.xyzx
  23: mul r2.xyzw, r0.yyyy, cb4[18].xyzw
  24: mad r2.xyzw, cb4[17].xyzw, r0.xxxx, r2.xyzw
  25: mad r0.xyzw, cb4[19].xyzw, r0.zzzz, r2.xyzw
  26: mad r0.xyzw, cb4[20].xyzw, r1.wwww, r0.xyzw
  27: min r1.x, r0.w, r0.z
  28: add r1.x, -r0.z, r1.x
  29: mad o2.z, cb2[5].y, r1.x, r0.z
  30: mov o2.xyw, r0.xyxw
  31: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 2 math, 1 temp registers, 1 textures
Set 2D Texture "_MainTex" to slot 0

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 1   xy          0     NONE   float   xy  
// TEXCOORD                 3   xyzw        1     NONE   float      w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v0.xy
      dcl_input_ps linear v1.w
      dcl_output o0.xyzw
      dcl_temps 1
   0: sample r0.xyzw, v0.xyxx, t0.xyzw, s0
   1: mad r0.x, r0.w, v1.w, l(-0.500000)
   2: lt r0.x, r0.x, l(0.000000)
   3: discard_nz r0.x
   4: mov o0.xyzw, l(0,0,0,0)
   5: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: SHADOWS_CUBE 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles":
Shader Disassembly:
#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying highp vec3 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD1;
varying mediump vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD0.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3 = in_COLOR0;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_LightShadowBias;
uniform lowp sampler2D _MainTex;
varying highp vec3 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD1;
varying mediump vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).w;
    u_xlat16_1 = u_xlat10_0 * vs_TEXCOORD3.w + -0.5;
    u_xlatb0 = u_xlat16_1<0.0;
    if(u_xlatb0){discard;}
    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + unity_LightShadowBias.x;
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = min(u_xlat0.x, 0.999000013);
    u_xlat0 = u_xlat0.xxxx * vec4(1.0, 255.0, 65025.0, 16581375.0);
    u_xlat0 = fract(u_xlat0);
    u_xlat0 = (-u_xlat0.yzww) * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0;
    SV_Target0 = u_xlat0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: SHADOWS_CUBE 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (240 bytes) {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  Vector4 _MainTex_ST at 224
}

Shader Disassembly:
#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3 = in_COLOR0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(unity_LightShadowBias.z!=0.0);
#else
    u_xlatb9 = unity_LightShadowBias.z!=0.0;
#endif
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.x = max((-u_xlat0.w), u_xlat0.z);
    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    u_xlat16_1 = u_xlat16_0 * vs_TEXCOORD3.w + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1<0.0);
#else
    u_xlatb0 = u_xlat16_1<0.0;
#endif
    if(u_xlatb0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: SHADOWS_CUBE 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  Vector4 _MainTex_ST at 224
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_LightShadowBias;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 mtl_Position [[ position ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat9;
    bool u_xlatb9;
    output.TEXCOORD1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD3 = input.COLOR0;
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat1);
    u_xlat2.xyz = fma((-u_xlat1.xyz), VGlobals._WorldSpaceLightPos0.www, VGlobals._WorldSpaceLightPos0.xyz);
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat2.xyz = float3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = fma((-u_xlat9), u_xlat9, 1.0);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * VGlobals.unity_LightShadowBias.z;
    u_xlat0.xyz = fma((-u_xlat0.xyz), float3(u_xlat9), u_xlat1.xyz);
    u_xlatb9 = VGlobals.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat2);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat2);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    u_xlat1.x = min(u_xlat0.w, u_xlat0.z);
    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
    output.mtl_Position.z = fma(VGlobals.unity_LightShadowBias.y, u_xlat1.x, u_xlat0.z);
    output.mtl_Position.xyw = u_xlat0.xyw;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float u_xlat0;
    bool u_xlatb0;
    u_xlat0 = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).w;
    u_xlat0 = fma(u_xlat0, input.TEXCOORD3.w, -0.5);
    u_xlatb0 = u_xlat0<0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    output.SV_Target0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: SHADOWS_CUBE 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (240 bytes) {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  Vector4 _MainTex_ST at 224
}

Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD1;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3 = in_COLOR0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
    u_xlatb9 = unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.x = max((-u_xlat0.w), u_xlat0.z);
    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat10_0;
bool u_xlatb0;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat0 = u_xlat10_0.w * vs_TEXCOORD3.w + -0.5;
    u_xlatb0 = u_xlat0<0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: SHADOWS_CUBE 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "TexCoord0"
Uses vertex data channel "Color"
Uses vertex data channel "Normal"
Uses vertex data channel "Vertex"

Set 2D Texture "_MainTex" to set: 0, binding: 1, used in: Fragment  using sampler in set: 0, binding: 0, used in: Fragment 

Constant Buffer "VGlobals83782289" (240 bytes) on set: 1, binding: 0, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 160
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Vector4 _MainTex_ST at 224
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 254

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 9 11 34 36 42 85 233
                              Name 9  "vs_TEXCOORD1"
                              Name 34  "vs_TEXCOORD3"
                              Decorate 9(vs_TEXCOORD1) Location 0
                              Decorate 11 Location 3
                              Decorate 16 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 Offset 16
                              MemberDecorate 19 2 Offset 32
                              MemberDecorate 19 3 Offset 96
                              MemberDecorate 19 4 Offset 160
                              MemberDecorate 19 5 Offset 224
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 0
                              Decorate 34(vs_TEXCOORD3) RelaxedPrecision
                              Decorate 34(vs_TEXCOORD3) Location 1
                              Decorate 36 RelaxedPrecision
                              Decorate 36 Location 2
                              Decorate 37 RelaxedPrecision
                              Decorate 42 Location 1
                              Decorate 85 Location 0
                              MemberDecorate 231 0 BuiltIn Position
                              MemberDecorate 231 1 BuiltIn PointSize
                              MemberDecorate 231 2 BuiltIn ClipDistance
                              Decorate 231 Block
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 2
               8:             TypePointer Output 7(fvec2)
 9(vs_TEXCOORD1):      8(ptr) Variable Output
              10:             TypePointer Input 7(fvec2)
              11:     10(ptr) Variable Input
              13:             TypeVector 6(float) 4
              14:             TypeInt 32 0
              15:     14(int) Constant 4
              16:             TypeArray 13(fvec4) 15
              17:             TypeArray 13(fvec4) 15
              18:             TypeArray 13(fvec4) 15
              19:             TypeStruct 13(fvec4) 13(fvec4) 16 17 18 13(fvec4)
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 5
              24:             TypePointer Uniform 13(fvec4)
              33:             TypePointer Output 13(fvec4)
34(vs_TEXCOORD3):     33(ptr) Variable Output
              35:             TypePointer Input 13(fvec4)
              36:     35(ptr) Variable Input
              38:             TypePointer Private 13(fvec4)
              39:     38(ptr) Variable Private
              40:             TypeVector 6(float) 3
              41:             TypePointer Input 40(fvec3)
              42:     41(ptr) Variable Input
              44:     22(int) Constant 3
              45:     22(int) Constant 0
              50:     14(int) Constant 0
              51:             TypePointer Private 6(float)
              54:     22(int) Constant 1
              59:     14(int) Constant 1
              62:     22(int) Constant 2
              67:     14(int) Constant 2
              69:     51(ptr) Variable Private
              84:     38(ptr) Variable Private
              85:     35(ptr) Variable Input
             112:     38(ptr) Variable Private
             149:    6(float) Constant 1065353216
             154:             TypePointer Uniform 6(float)
             169:             TypeBool
             170:             TypePointer Private 169(bool)
             171:    170(ptr) Variable Private
             174:    6(float) Constant 0
             177:             TypePointer Function 40(fvec3)
             191:     22(int) Constant 4
             216:     14(int) Constant 3
             230:             TypeArray 6(float) 59
             231:             TypeStruct 13(fvec4) 6(float) 230
             232:             TypePointer Output 231(struct)
             233:    232(ptr) Variable Output
             242:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
             178:    177(ptr) Variable Function
              12:    7(fvec2) Load 11
              25:     24(ptr) AccessChain 21 23
              26:   13(fvec4) Load 25
              27:    7(fvec2) VectorShuffle 26 26 0 1
              28:    7(fvec2) FMul 12 27
              29:     24(ptr) AccessChain 21 23
              30:   13(fvec4) Load 29
              31:    7(fvec2) VectorShuffle 30 30 2 3
              32:    7(fvec2) FAdd 28 31
                              Store 9(vs_TEXCOORD1) 32
              37:   13(fvec4) Load 36
                              Store 34(vs_TEXCOORD3) 37
              43:   40(fvec3) Load 42
              46:     24(ptr) AccessChain 21 44 45
              47:   13(fvec4) Load 46
              48:   40(fvec3) VectorShuffle 47 47 0 1 2
              49:    6(float) Dot 43 48
              52:     51(ptr) AccessChain 39 50
                              Store 52 49
              53:   40(fvec3) Load 42
              55:     24(ptr) AccessChain 21 44 54
              56:   13(fvec4) Load 55
              57:   40(fvec3) VectorShuffle 56 56 0 1 2
              58:    6(float) Dot 53 57
              60:     51(ptr) AccessChain 39 59
                              Store 60 58
              61:   40(fvec3) Load 42
              63:     24(ptr) AccessChain 21 44 62
              64:   13(fvec4) Load 63
              65:   40(fvec3) VectorShuffle 64 64 0 1 2
              66:    6(float) Dot 61 65
              68:     51(ptr) AccessChain 39 67
                              Store 68 66
              70:   13(fvec4) Load 39
              71:   40(fvec3) VectorShuffle 70 70 0 1 2
              72:   13(fvec4) Load 39
              73:   40(fvec3) VectorShuffle 72 72 0 1 2
              74:    6(float) Dot 71 73
                              Store 69 74
              75:    6(float) Load 69
              76:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 75
                              Store 69 76
              77:    6(float) Load 69
              78:   40(fvec3) CompositeConstruct 77 77 77
              79:   13(fvec4) Load 39
              80:   40(fvec3) VectorShuffle 79 79 0 1 2
              81:   40(fvec3) FMul 78 80
              82:   13(fvec4) Load 39
              83:   13(fvec4) VectorShuffle 82 81 4 5 6 3
                              Store 39 83
              86:   13(fvec4) Load 85
              87:   13(fvec4) VectorShuffle 86 86 1 1 1 1
              88:     24(ptr) AccessChain 21 62 54
              89:   13(fvec4) Load 88
              90:   13(fvec4) FMul 87 89
                              Store 84 90
              91:     24(ptr) AccessChain 21 62 45
              92:   13(fvec4) Load 91
              93:   13(fvec4) Load 85
              94:   13(fvec4) VectorShuffle 93 93 0 0 0 0
              95:   13(fvec4) FMul 92 94
              96:   13(fvec4) Load 84
              97:   13(fvec4) FAdd 95 96
                              Store 84 97
              98:     24(ptr) AccessChain 21 62 62
              99:   13(fvec4) Load 98
             100:   13(fvec4) Load 85
             101:   13(fvec4) VectorShuffle 100 100 2 2 2 2
             102:   13(fvec4) FMul 99 101
             103:   13(fvec4) Load 84
             104:   13(fvec4) FAdd 102 103
                              Store 84 104
             105:     24(ptr) AccessChain 21 62 44
             106:   13(fvec4) Load 105
             107:   13(fvec4) Load 85
             108:   13(fvec4) VectorShuffle 107 107 3 3 3 3
             109:   13(fvec4) FMul 106 108
             110:   13(fvec4) Load 84
             111:   13(fvec4) FAdd 109 110
                              Store 84 111
             113:   13(fvec4) Load 84
             114:   40(fvec3) VectorShuffle 113 113 0 1 2
             115:   40(fvec3) FNegate 114
             116:     24(ptr) AccessChain 21 45
             117:   13(fvec4) Load 116
             118:   40(fvec3) VectorShuffle 117 117 3 3 3
             119:   40(fvec3) FMul 115 118
             120:     24(ptr) AccessChain 21 45
             121:   13(fvec4) Load 120
             122:   40(fvec3) VectorShuffle 121 121 0 1 2
             123:   40(fvec3) FAdd 119 122
             124:   13(fvec4) Load 112
             125:   13(fvec4) VectorShuffle 124 123 4 5 6 3
                              Store 112 125
             126:   13(fvec4) Load 112
             127:   40(fvec3) VectorShuffle 126 126 0 1 2
             128:   13(fvec4) Load 112
             129:   40(fvec3) VectorShuffle 128 128 0 1 2
             130:    6(float) Dot 127 129
                              Store 69 130
             131:    6(float) Load 69
             132:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 131
                              Store 69 132
             133:    6(float) Load 69
             134:   40(fvec3) CompositeConstruct 133 133 133
             135:   13(fvec4) Load 112
             136:   40(fvec3) VectorShuffle 135 135 0 1 2
             137:   40(fvec3) FMul 134 136
             138:   13(fvec4) Load 112
             139:   13(fvec4) VectorShuffle 138 137 4 5 6 3
                              Store 112 139
             140:   13(fvec4) Load 39
             141:   40(fvec3) VectorShuffle 140 140 0 1 2
             142:   13(fvec4) Load 112
             143:   40(fvec3) VectorShuffle 142 142 0 1 2
             144:    6(float) Dot 141 143
                              Store 69 144
             145:    6(float) Load 69
             146:    6(float) FNegate 145
             147:    6(float) Load 69
             148:    6(float) FMul 146 147
             150:    6(float) FAdd 148 149
                              Store 69 150
             151:    6(float) Load 69
             152:    6(float) ExtInst 1(GLSL.std.450) 31(Sqrt) 151
                              Store 69 152
             153:    6(float) Load 69
             155:    154(ptr) AccessChain 21 54 67
             156:    6(float) Load 155
             157:    6(float) FMul 153 156
                              Store 69 157
             158:   13(fvec4) Load 39
             159:   40(fvec3) VectorShuffle 158 158 0 1 2
             160:   40(fvec3) FNegate 159
             161:    6(float) Load 69
             162:   40(fvec3) CompositeConstruct 161 161 161
             163:   40(fvec3) FMul 160 162
             164:   13(fvec4) Load 84
             165:   40(fvec3) VectorShuffle 164 164 0 1 2
             166:   40(fvec3) FAdd 163 165
             167:   13(fvec4) Load 39
             168:   13(fvec4) VectorShuffle 167 166 4 5 6 3
                              Store 39 168
             172:    154(ptr) AccessChain 21 54 67
             173:    6(float) Load 172
             175:   169(bool) FOrdNotEqual 173 174
                              Store 171 175
             176:   169(bool) Load 171
                              SelectionMerge 180 None
                              BranchConditional 176 179 183
             179:               Label
             181:   13(fvec4)   Load 39
             182:   40(fvec3)   VectorShuffle 181 181 0 1 2
                                Store 178 182
                                Branch 180
             183:               Label
             184:   13(fvec4)   Load 84
             185:   40(fvec3)   VectorShuffle 184 184 0 1 2
                                Store 178 185
                                Branch 180
             180:             Label
             186:   40(fvec3) Load 178
             187:   13(fvec4) Load 39
             188:   13(fvec4) VectorShuffle 187 186 4 5 6 3
                              Store 39 188
             189:   13(fvec4) Load 39
             190:   13(fvec4) VectorShuffle 189 189 1 1 1 1
             192:     24(ptr) AccessChain 21 191 54
             193:   13(fvec4) Load 192
             194:   13(fvec4) FMul 190 193
                              Store 112 194
             195:     24(ptr) AccessChain 21 191 45
             196:   13(fvec4) Load 195
             197:   13(fvec4) Load 39
             198:   13(fvec4) VectorShuffle 197 197 0 0 0 0
             199:   13(fvec4) FMul 196 198
             200:   13(fvec4) Load 112
             201:   13(fvec4) FAdd 199 200
                              Store 112 201
             202:     24(ptr) AccessChain 21 191 62
             203:   13(fvec4) Load 202
             204:   13(fvec4) Load 39
             205:   13(fvec4) VectorShuffle 204 204 2 2 2 2
             206:   13(fvec4) FMul 203 205
             207:   13(fvec4) Load 112
             208:   13(fvec4) FAdd 206 207
                              Store 39 208
             209:     24(ptr) AccessChain 21 191 44
             210:   13(fvec4) Load 209
             211:   13(fvec4) Load 84
             212:   13(fvec4) VectorShuffle 211 211 3 3 3 3
             213:   13(fvec4) FMul 210 212
             214:   13(fvec4) Load 39
             215:   13(fvec4) FAdd 213 214
                              Store 39 215
             217:     51(ptr) AccessChain 39 216
             218:    6(float) Load 217
             219:     51(ptr) AccessChain 39 67
             220:    6(float) Load 219
             221:    6(float) ExtInst 1(GLSL.std.450) 37(FMin) 218 220
             222:     51(ptr) AccessChain 84 50
                              Store 222 221
             223:     51(ptr) AccessChain 39 67
             224:    6(float) Load 223
             225:    6(float) FNegate 224
             226:     51(ptr) AccessChain 84 50
             227:    6(float) Load 226
             228:    6(float) FAdd 225 227
             229:     51(ptr) AccessChain 84 50
                              Store 229 228
             234:    154(ptr) AccessChain 21 54 59
             235:    6(float) Load 234
             236:     51(ptr) AccessChain 84 50
             237:    6(float) Load 236
             238:    6(float) FMul 235 237
             239:     51(ptr) AccessChain 39 67
             240:    6(float) Load 239
             241:    6(float) FAdd 238 240
             243:    242(ptr) AccessChain 233 45 67
                              Store 243 241
             244:   13(fvec4) Load 39
             245:   40(fvec3) VectorShuffle 244 244 0 1 3
             246:     33(ptr) AccessChain 233 45
             247:   13(fvec4) Load 246
             248:   13(fvec4) VectorShuffle 247 245 4 5 2 6
                              Store 246 248
             249:    242(ptr) AccessChain 233 45 59
             250:    6(float) Load 249
             251:    6(float) FNegate 250
             252:    242(ptr) AccessChain 233 45 59
                              Store 252 251
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 59

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 21 31 56
                              ExecutionMode 4 OriginUpperLeft
                              Name 21  "vs_TEXCOORD1"
                              Name 31  "vs_TEXCOORD3"
                              Decorate 8 RelaxedPrecision
                              Decorate 11 RelaxedPrecision
                              Decorate 11 DescriptorSet 0
                              Decorate 11 Binding 1
                              Decorate 12 RelaxedPrecision
                              Decorate 15 RelaxedPrecision
                              Decorate 15 DescriptorSet 0
                              Decorate 15 Binding 0
                              Decorate 16 RelaxedPrecision
                              Decorate 21(vs_TEXCOORD1) Location 0
                              Decorate 27 RelaxedPrecision
                              Decorate 28 RelaxedPrecision
                              Decorate 29 RelaxedPrecision
                              Decorate 31(vs_TEXCOORD3) RelaxedPrecision
                              Decorate 31(vs_TEXCOORD3) Location 1
                              Decorate 34 RelaxedPrecision
                              Decorate 35 RelaxedPrecision
                              Decorate 37 RelaxedPrecision
                              Decorate 41 RelaxedPrecision
                              Decorate 56 RelaxedPrecision
                              Decorate 56 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypePointer Private 6(float)
               8:      7(ptr) Variable Private
               9:             TypeImage 6(float) 2D sampled format:Unknown
              10:             TypePointer UniformConstant 9
              11:     10(ptr) Variable UniformConstant
              13:             TypeSampler
              14:             TypePointer UniformConstant 13
              15:     14(ptr) Variable UniformConstant
              17:             TypeSampledImage 9
              19:             TypeVector 6(float) 2
              20:             TypePointer Input 19(fvec2)
21(vs_TEXCOORD1):     20(ptr) Variable Input
              23:             TypeVector 6(float) 4
              25:             TypeInt 32 0
              26:     25(int) Constant 3
              28:      7(ptr) Variable Private
              30:             TypePointer Input 23(fvec4)
31(vs_TEXCOORD3):     30(ptr) Variable Input
              32:             TypePointer Input 6(float)
              36:    6(float) Constant 3204448256
              38:             TypeBool
              39:             TypePointer Private 38(bool)
              40:     39(ptr) Variable Private
              42:    6(float) Constant 0
              45:             TypeInt 32 1
              46:     45(int) Constant 0
              47:     45(int) Constant 1
              49:     45(int) Constant 4294967295
              55:             TypePointer Output 23(fvec4)
              56:     55(ptr) Variable Output
              57:   23(fvec4) ConstantComposite 42 42 42 42
               4:           2 Function None 3
               5:             Label
              12:           9 Load 11
              16:          13 Load 15
              18:          17 SampledImage 12 16
              22:   19(fvec2) Load 21(vs_TEXCOORD1)
              24:   23(fvec4) ImageSampleImplicitLod 18 22
              27:    6(float) CompositeExtract 24 3
                              Store 8 27
              29:    6(float) Load 8
              33:     32(ptr) AccessChain 31(vs_TEXCOORD3) 26
              34:    6(float) Load 33
              35:    6(float) FMul 29 34
              37:    6(float) FAdd 35 36
                              Store 28 37
              41:    6(float) Load 28
              43:    38(bool) FOrdLessThan 41 42
                              Store 40 43
              44:    38(bool) Load 40
              48:     45(int) Select 44 47 46
              50:     45(int) IMul 48 49
              51:    38(bool) INotEqual 50 46
                              SelectionMerge 53 None
                              BranchConditional 51 52 53
              52:               Label
                                Kill
              53:             Label
                              Store 56 57
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: SHADOWS_CUBE 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 28 math, 3 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "$Globals" (64 bytes) on slot 0 {
  Vector4 _MainTex_ST at 32
}
Constant Buffer "UnityLighting" (768 bytes) on slot 1 {
  Vector4 _WorldSpaceLightPos0 at 0
}
Constant Buffer "UnityShadows" (416 bytes) on slot 2 {
  Vector4 unity_LightShadowBias at 80
}
Constant Buffer "UnityPerDraw" (176 bytes) on slot 3 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 4 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 1   xy          0     NONE   float   xy  
// TEXCOORD                 3   xyzw        1     NONE   float   xyzw
// SV_POSITION              0   xyzw        2      POS   float   xyzw
//
      vs_4_0
      dcl_constantbuffer CB0[3], immediateIndexed
      dcl_constantbuffer CB1[1], immediateIndexed
      dcl_constantbuffer CB2[6], immediateIndexed
      dcl_constantbuffer CB3[7], immediateIndexed
      dcl_constantbuffer CB4[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v1.xyz
      dcl_input v2.xyzw
      dcl_input v3.xy
      dcl_output o0.xy
      dcl_output o1.xyzw
      dcl_output_siv o2.xyzw, position
      dcl_temps 3
   0: mad o0.xy, v3.xyxx, cb0[2].xyxx, cb0[2].zwzz
   1: mov o1.xyzw, v2.xyzw
   2: dp3 r0.x, v1.xyzx, cb3[4].xyzx
   3: dp3 r0.y, v1.xyzx, cb3[5].xyzx
   4: dp3 r0.z, v1.xyzx, cb3[6].xyzx
   5: dp3 r0.w, r0.xyzx, r0.xyzx
   6: rsq r0.w, r0.w
   7: mul r0.xyz, r0.wwww, r0.xyzx
   8: mul r1.xyzw, v0.yyyy, cb3[1].xyzw
   9: mad r1.xyzw, cb3[0].xyzw, v0.xxxx, r1.xyzw
  10: mad r1.xyzw, cb3[2].xyzw, v0.zzzz, r1.xyzw
  11: mad r1.xyzw, cb3[3].xyzw, v0.wwww, r1.xyzw
  12: mad r2.xyz, -r1.xyzx, cb1[0].wwww, cb1[0].xyzx
  13: dp3 r0.w, r2.xyzx, r2.xyzx
  14: rsq r0.w, r0.w
  15: mul r2.xyz, r0.wwww, r2.xyzx
  16: dp3 r0.w, r0.xyzx, r2.xyzx
  17: mad r0.w, -r0.w, r0.w, l(1.000000)
  18: sqrt r0.w, r0.w
  19: mul r0.w, r0.w, cb2[5].z
  20: mad r0.xyz, -r0.xyzx, r0.wwww, r1.xyzx
  21: ne r0.w, cb2[5].z, l(0.000000)
  22: movc r0.xyz, r0.wwww, r0.xyzx, r1.xyzx
  23: mul r2.xyzw, r0.yyyy, cb4[18].xyzw
  24: mad r2.xyzw, cb4[17].xyzw, r0.xxxx, r2.xyzw
  25: mad r0.xyzw, cb4[19].xyzw, r0.zzzz, r2.xyzw
  26: mad r0.xyzw, cb4[20].xyzw, r1.wwww, r0.xyzw
  27: min r1.x, r0.w, r0.z
  28: add r1.x, -r0.z, r1.x
  29: mad o2.z, cb2[5].y, r1.x, r0.z
  30: mov o2.xyw, r0.xyxw
  31: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 2 math, 1 temp registers, 1 textures
Set 2D Texture "_MainTex" to slot 0

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 1   xy          0     NONE   float   xy  
// TEXCOORD                 3   xyzw        1     NONE   float      w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v0.xy
      dcl_input_ps linear v1.w
      dcl_output o0.xyzw
      dcl_temps 1
   0: sample r0.xyzw, v0.xyxx, t0.xyzw, s0
   1: mad r0.x, r0.w, v1.w, l(-0.500000)
   2: lt r0.x, r0.x, l(0.000000)
   3: discard_nz r0.x
   4: mov o0.xyzw, l(0,0,0,0)
   5: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: SHADOWS_CUBE 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles":
Shader Disassembly:
#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying highp vec3 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD1;
varying mediump vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD0.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3 = in_COLOR0;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_LightShadowBias;
uniform lowp sampler2D _MainTex;
varying highp vec3 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD1;
varying mediump vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).w;
    u_xlat16_1 = u_xlat10_0 * vs_TEXCOORD3.w + -0.5;
    u_xlatb0 = u_xlat16_1<0.0;
    if(u_xlatb0){discard;}
    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + unity_LightShadowBias.x;
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = min(u_xlat0.x, 0.999000013);
    u_xlat0 = u_xlat0.xxxx * vec4(1.0, 255.0, 65025.0, 16581375.0);
    u_xlat0 = fract(u_xlat0);
    u_xlat0 = (-u_xlat0.yzww) * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0;
    SV_Target0 = u_xlat0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: SHADOWS_CUBE 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (240 bytes) {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  Vector4 _MainTex_ST at 224
}

Shader Disassembly:
#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3 = in_COLOR0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(unity_LightShadowBias.z!=0.0);
#else
    u_xlatb9 = unity_LightShadowBias.z!=0.0;
#endif
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.x = max((-u_xlat0.w), u_xlat0.z);
    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    u_xlat16_1 = u_xlat16_0 * vs_TEXCOORD3.w + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1<0.0);
#else
    u_xlatb0 = u_xlat16_1<0.0;
#endif
    if(u_xlatb0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: SHADOWS_CUBE 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  Vector4 _MainTex_ST at 224
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_LightShadowBias;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 mtl_Position [[ position ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat9;
    bool u_xlatb9;
    output.TEXCOORD1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD3 = input.COLOR0;
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat1);
    u_xlat2.xyz = fma((-u_xlat1.xyz), VGlobals._WorldSpaceLightPos0.www, VGlobals._WorldSpaceLightPos0.xyz);
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat2.xyz = float3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = fma((-u_xlat9), u_xlat9, 1.0);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * VGlobals.unity_LightShadowBias.z;
    u_xlat0.xyz = fma((-u_xlat0.xyz), float3(u_xlat9), u_xlat1.xyz);
    u_xlatb9 = VGlobals.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat2);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat2);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    u_xlat1.x = min(u_xlat0.w, u_xlat0.z);
    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
    output.mtl_Position.z = fma(VGlobals.unity_LightShadowBias.y, u_xlat1.x, u_xlat0.z);
    output.mtl_Position.xyw = u_xlat0.xyw;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float u_xlat0;
    bool u_xlatb0;
    u_xlat0 = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).w;
    u_xlat0 = fma(u_xlat0, input.TEXCOORD3.w, -0.5);
    u_xlatb0 = u_xlat0<0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    output.SV_Target0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: SHADOWS_CUBE 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (240 bytes) {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  Vector4 _MainTex_ST at 224
}

Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD1;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3 = in_COLOR0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
    u_xlatb9 = unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.x = max((-u_xlat0.w), u_xlat0.z);
    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat10_0;
bool u_xlatb0;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat0 = u_xlat10_0.w * vs_TEXCOORD3.w + -0.5;
    u_xlatb0 = u_xlat0<0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: SHADOWS_CUBE 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "TexCoord0"
Uses vertex data channel "Color"
Uses vertex data channel "Normal"
Uses vertex data channel "Vertex"

Set 2D Texture "_MainTex" to set: 0, binding: 1, used in: Fragment  using sampler in set: 0, binding: 0, used in: Fragment 

Constant Buffer "VGlobals83782289" (240 bytes) on set: 1, binding: 0, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 160
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Vector4 _MainTex_ST at 224
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 254

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 9 11 34 36 42 85 233
                              Name 9  "vs_TEXCOORD1"
                              Name 34  "vs_TEXCOORD3"
                              Decorate 9(vs_TEXCOORD1) Location 0
                              Decorate 11 Location 3
                              Decorate 16 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 Offset 16
                              MemberDecorate 19 2 Offset 32
                              MemberDecorate 19 3 Offset 96
                              MemberDecorate 19 4 Offset 160
                              MemberDecorate 19 5 Offset 224
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 0
                              Decorate 34(vs_TEXCOORD3) RelaxedPrecision
                              Decorate 34(vs_TEXCOORD3) Location 1
                              Decorate 36 RelaxedPrecision
                              Decorate 36 Location 2
                              Decorate 37 RelaxedPrecision
                              Decorate 42 Location 1
                              Decorate 85 Location 0
                              MemberDecorate 231 0 BuiltIn Position
                              MemberDecorate 231 1 BuiltIn PointSize
                              MemberDecorate 231 2 BuiltIn ClipDistance
                              Decorate 231 Block
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 2
               8:             TypePointer Output 7(fvec2)
 9(vs_TEXCOORD1):      8(ptr) Variable Output
              10:             TypePointer Input 7(fvec2)
              11:     10(ptr) Variable Input
              13:             TypeVector 6(float) 4
              14:             TypeInt 32 0
              15:     14(int) Constant 4
              16:             TypeArray 13(fvec4) 15
              17:             TypeArray 13(fvec4) 15
              18:             TypeArray 13(fvec4) 15
              19:             TypeStruct 13(fvec4) 13(fvec4) 16 17 18 13(fvec4)
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 5
              24:             TypePointer Uniform 13(fvec4)
              33:             TypePointer Output 13(fvec4)
34(vs_TEXCOORD3):     33(ptr) Variable Output
              35:             TypePointer Input 13(fvec4)
              36:     35(ptr) Variable Input
              38:             TypePointer Private 13(fvec4)
              39:     38(ptr) Variable Private
              40:             TypeVector 6(float) 3
              41:             TypePointer Input 40(fvec3)
              42:     41(ptr) Variable Input
              44:     22(int) Constant 3
              45:     22(int) Constant 0
              50:     14(int) Constant 0
              51:             TypePointer Private 6(float)
              54:     22(int) Constant 1
              59:     14(int) Constant 1
              62:     22(int) Constant 2
              67:     14(int) Constant 2
              69:     51(ptr) Variable Private
              84:     38(ptr) Variable Private
              85:     35(ptr) Variable Input
             112:     38(ptr) Variable Private
             149:    6(float) Constant 1065353216
             154:             TypePointer Uniform 6(float)
             169:             TypeBool
             170:             TypePointer Private 169(bool)
             171:    170(ptr) Variable Private
             174:    6(float) Constant 0
             177:             TypePointer Function 40(fvec3)
             191:     22(int) Constant 4
             216:     14(int) Constant 3
             230:             TypeArray 6(float) 59
             231:             TypeStruct 13(fvec4) 6(float) 230
             232:             TypePointer Output 231(struct)
             233:    232(ptr) Variable Output
             242:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
             178:    177(ptr) Variable Function
              12:    7(fvec2) Load 11
              25:     24(ptr) AccessChain 21 23
              26:   13(fvec4) Load 25
              27:    7(fvec2) VectorShuffle 26 26 0 1
              28:    7(fvec2) FMul 12 27
              29:     24(ptr) AccessChain 21 23
              30:   13(fvec4) Load 29
              31:    7(fvec2) VectorShuffle 30 30 2 3
              32:    7(fvec2) FAdd 28 31
                              Store 9(vs_TEXCOORD1) 32
              37:   13(fvec4) Load 36
                              Store 34(vs_TEXCOORD3) 37
              43:   40(fvec3) Load 42
              46:     24(ptr) AccessChain 21 44 45
              47:   13(fvec4) Load 46
              48:   40(fvec3) VectorShuffle 47 47 0 1 2
              49:    6(float) Dot 43 48
              52:     51(ptr) AccessChain 39 50
                              Store 52 49
              53:   40(fvec3) Load 42
              55:     24(ptr) AccessChain 21 44 54
              56:   13(fvec4) Load 55
              57:   40(fvec3) VectorShuffle 56 56 0 1 2
              58:    6(float) Dot 53 57
              60:     51(ptr) AccessChain 39 59
                              Store 60 58
              61:   40(fvec3) Load 42
              63:     24(ptr) AccessChain 21 44 62
              64:   13(fvec4) Load 63
              65:   40(fvec3) VectorShuffle 64 64 0 1 2
              66:    6(float) Dot 61 65
              68:     51(ptr) AccessChain 39 67
                              Store 68 66
              70:   13(fvec4) Load 39
              71:   40(fvec3) VectorShuffle 70 70 0 1 2
              72:   13(fvec4) Load 39
              73:   40(fvec3) VectorShuffle 72 72 0 1 2
              74:    6(float) Dot 71 73
                              Store 69 74
              75:    6(float) Load 69
              76:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 75
                              Store 69 76
              77:    6(float) Load 69
              78:   40(fvec3) CompositeConstruct 77 77 77
              79:   13(fvec4) Load 39
              80:   40(fvec3) VectorShuffle 79 79 0 1 2
              81:   40(fvec3) FMul 78 80
              82:   13(fvec4) Load 39
              83:   13(fvec4) VectorShuffle 82 81 4 5 6 3
                              Store 39 83
              86:   13(fvec4) Load 85
              87:   13(fvec4) VectorShuffle 86 86 1 1 1 1
              88:     24(ptr) AccessChain 21 62 54
              89:   13(fvec4) Load 88
              90:   13(fvec4) FMul 87 89
                              Store 84 90
              91:     24(ptr) AccessChain 21 62 45
              92:   13(fvec4) Load 91
              93:   13(fvec4) Load 85
              94:   13(fvec4) VectorShuffle 93 93 0 0 0 0
              95:   13(fvec4) FMul 92 94
              96:   13(fvec4) Load 84
              97:   13(fvec4) FAdd 95 96
                              Store 84 97
              98:     24(ptr) AccessChain 21 62 62
              99:   13(fvec4) Load 98
             100:   13(fvec4) Load 85
             101:   13(fvec4) VectorShuffle 100 100 2 2 2 2
             102:   13(fvec4) FMul 99 101
             103:   13(fvec4) Load 84
             104:   13(fvec4) FAdd 102 103
                              Store 84 104
             105:     24(ptr) AccessChain 21 62 44
             106:   13(fvec4) Load 105
             107:   13(fvec4) Load 85
             108:   13(fvec4) VectorShuffle 107 107 3 3 3 3
             109:   13(fvec4) FMul 106 108
             110:   13(fvec4) Load 84
             111:   13(fvec4) FAdd 109 110
                              Store 84 111
             113:   13(fvec4) Load 84
             114:   40(fvec3) VectorShuffle 113 113 0 1 2
             115:   40(fvec3) FNegate 114
             116:     24(ptr) AccessChain 21 45
             117:   13(fvec4) Load 116
             118:   40(fvec3) VectorShuffle 117 117 3 3 3
             119:   40(fvec3) FMul 115 118
             120:     24(ptr) AccessChain 21 45
             121:   13(fvec4) Load 120
             122:   40(fvec3) VectorShuffle 121 121 0 1 2
             123:   40(fvec3) FAdd 119 122
             124:   13(fvec4) Load 112
             125:   13(fvec4) VectorShuffle 124 123 4 5 6 3
                              Store 112 125
             126:   13(fvec4) Load 112
             127:   40(fvec3) VectorShuffle 126 126 0 1 2
             128:   13(fvec4) Load 112
             129:   40(fvec3) VectorShuffle 128 128 0 1 2
             130:    6(float) Dot 127 129
                              Store 69 130
             131:    6(float) Load 69
             132:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 131
                              Store 69 132
             133:    6(float) Load 69
             134:   40(fvec3) CompositeConstruct 133 133 133
             135:   13(fvec4) Load 112
             136:   40(fvec3) VectorShuffle 135 135 0 1 2
             137:   40(fvec3) FMul 134 136
             138:   13(fvec4) Load 112
             139:   13(fvec4) VectorShuffle 138 137 4 5 6 3
                              Store 112 139
             140:   13(fvec4) Load 39
             141:   40(fvec3) VectorShuffle 140 140 0 1 2
             142:   13(fvec4) Load 112
             143:   40(fvec3) VectorShuffle 142 142 0 1 2
             144:    6(float) Dot 141 143
                              Store 69 144
             145:    6(float) Load 69
             146:    6(float) FNegate 145
             147:    6(float) Load 69
             148:    6(float) FMul 146 147
             150:    6(float) FAdd 148 149
                              Store 69 150
             151:    6(float) Load 69
             152:    6(float) ExtInst 1(GLSL.std.450) 31(Sqrt) 151
                              Store 69 152
             153:    6(float) Load 69
             155:    154(ptr) AccessChain 21 54 67
             156:    6(float) Load 155
             157:    6(float) FMul 153 156
                              Store 69 157
             158:   13(fvec4) Load 39
             159:   40(fvec3) VectorShuffle 158 158 0 1 2
             160:   40(fvec3) FNegate 159
             161:    6(float) Load 69
             162:   40(fvec3) CompositeConstruct 161 161 161
             163:   40(fvec3) FMul 160 162
             164:   13(fvec4) Load 84
             165:   40(fvec3) VectorShuffle 164 164 0 1 2
             166:   40(fvec3) FAdd 163 165
             167:   13(fvec4) Load 39
             168:   13(fvec4) VectorShuffle 167 166 4 5 6 3
                              Store 39 168
             172:    154(ptr) AccessChain 21 54 67
             173:    6(float) Load 172
             175:   169(bool) FOrdNotEqual 173 174
                              Store 171 175
             176:   169(bool) Load 171
                              SelectionMerge 180 None
                              BranchConditional 176 179 183
             179:               Label
             181:   13(fvec4)   Load 39
             182:   40(fvec3)   VectorShuffle 181 181 0 1 2
                                Store 178 182
                                Branch 180
             183:               Label
             184:   13(fvec4)   Load 84
             185:   40(fvec3)   VectorShuffle 184 184 0 1 2
                                Store 178 185
                                Branch 180
             180:             Label
             186:   40(fvec3) Load 178
             187:   13(fvec4) Load 39
             188:   13(fvec4) VectorShuffle 187 186 4 5 6 3
                              Store 39 188
             189:   13(fvec4) Load 39
             190:   13(fvec4) VectorShuffle 189 189 1 1 1 1
             192:     24(ptr) AccessChain 21 191 54
             193:   13(fvec4) Load 192
             194:   13(fvec4) FMul 190 193
                              Store 112 194
             195:     24(ptr) AccessChain 21 191 45
             196:   13(fvec4) Load 195
             197:   13(fvec4) Load 39
             198:   13(fvec4) VectorShuffle 197 197 0 0 0 0
             199:   13(fvec4) FMul 196 198
             200:   13(fvec4) Load 112
             201:   13(fvec4) FAdd 199 200
                              Store 112 201
             202:     24(ptr) AccessChain 21 191 62
             203:   13(fvec4) Load 202
             204:   13(fvec4) Load 39
             205:   13(fvec4) VectorShuffle 204 204 2 2 2 2
             206:   13(fvec4) FMul 203 205
             207:   13(fvec4) Load 112
             208:   13(fvec4) FAdd 206 207
                              Store 39 208
             209:     24(ptr) AccessChain 21 191 44
             210:   13(fvec4) Load 209
             211:   13(fvec4) Load 84
             212:   13(fvec4) VectorShuffle 211 211 3 3 3 3
             213:   13(fvec4) FMul 210 212
             214:   13(fvec4) Load 39
             215:   13(fvec4) FAdd 213 214
                              Store 39 215
             217:     51(ptr) AccessChain 39 216
             218:    6(float) Load 217
             219:     51(ptr) AccessChain 39 67
             220:    6(float) Load 219
             221:    6(float) ExtInst 1(GLSL.std.450) 37(FMin) 218 220
             222:     51(ptr) AccessChain 84 50
                              Store 222 221
             223:     51(ptr) AccessChain 39 67
             224:    6(float) Load 223
             225:    6(float) FNegate 224
             226:     51(ptr) AccessChain 84 50
             227:    6(float) Load 226
             228:    6(float) FAdd 225 227
             229:     51(ptr) AccessChain 84 50
                              Store 229 228
             234:    154(ptr) AccessChain 21 54 59
             235:    6(float) Load 234
             236:     51(ptr) AccessChain 84 50
             237:    6(float) Load 236
             238:    6(float) FMul 235 237
             239:     51(ptr) AccessChain 39 67
             240:    6(float) Load 239
             241:    6(float) FAdd 238 240
             243:    242(ptr) AccessChain 233 45 67
                              Store 243 241
             244:   13(fvec4) Load 39
             245:   40(fvec3) VectorShuffle 244 244 0 1 3
             246:     33(ptr) AccessChain 233 45
             247:   13(fvec4) Load 246
             248:   13(fvec4) VectorShuffle 247 245 4 5 2 6
                              Store 246 248
             249:    242(ptr) AccessChain 233 45 59
             250:    6(float) Load 249
             251:    6(float) FNegate 250
             252:    242(ptr) AccessChain 233 45 59
                              Store 252 251
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 59

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 21 31 56
                              ExecutionMode 4 OriginUpperLeft
                              Name 21  "vs_TEXCOORD1"
                              Name 31  "vs_TEXCOORD3"
                              Decorate 8 RelaxedPrecision
                              Decorate 11 RelaxedPrecision
                              Decorate 11 DescriptorSet 0
                              Decorate 11 Binding 1
                              Decorate 12 RelaxedPrecision
                              Decorate 15 RelaxedPrecision
                              Decorate 15 DescriptorSet 0
                              Decorate 15 Binding 0
                              Decorate 16 RelaxedPrecision
                              Decorate 21(vs_TEXCOORD1) Location 0
                              Decorate 27 RelaxedPrecision
                              Decorate 28 RelaxedPrecision
                              Decorate 29 RelaxedPrecision
                              Decorate 31(vs_TEXCOORD3) RelaxedPrecision
                              Decorate 31(vs_TEXCOORD3) Location 1
                              Decorate 34 RelaxedPrecision
                              Decorate 35 RelaxedPrecision
                              Decorate 37 RelaxedPrecision
                              Decorate 41 RelaxedPrecision
                              Decorate 56 RelaxedPrecision
                              Decorate 56 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypePointer Private 6(float)
               8:      7(ptr) Variable Private
               9:             TypeImage 6(float) 2D sampled format:Unknown
              10:             TypePointer UniformConstant 9
              11:     10(ptr) Variable UniformConstant
              13:             TypeSampler
              14:             TypePointer UniformConstant 13
              15:     14(ptr) Variable UniformConstant
              17:             TypeSampledImage 9
              19:             TypeVector 6(float) 2
              20:             TypePointer Input 19(fvec2)
21(vs_TEXCOORD1):     20(ptr) Variable Input
              23:             TypeVector 6(float) 4
              25:             TypeInt 32 0
              26:     25(int) Constant 3
              28:      7(ptr) Variable Private
              30:             TypePointer Input 23(fvec4)
31(vs_TEXCOORD3):     30(ptr) Variable Input
              32:             TypePointer Input 6(float)
              36:    6(float) Constant 3204448256
              38:             TypeBool
              39:             TypePointer Private 38(bool)
              40:     39(ptr) Variable Private
              42:    6(float) Constant 0
              45:             TypeInt 32 1
              46:     45(int) Constant 0
              47:     45(int) Constant 1
              49:     45(int) Constant 4294967295
              55:             TypePointer Output 23(fvec4)
              56:     55(ptr) Variable Output
              57:   23(fvec4) ConstantComposite 42 42 42 42
               4:           2 Function None 3
               5:             Label
              12:           9 Load 11
              16:          13 Load 15
              18:          17 SampledImage 12 16
              22:   19(fvec2) Load 21(vs_TEXCOORD1)
              24:   23(fvec4) ImageSampleImplicitLod 18 22
              27:    6(float) CompositeExtract 24 3
                              Store 8 27
              29:    6(float) Load 8
              33:     32(ptr) AccessChain 31(vs_TEXCOORD3) 26
              34:    6(float) Load 33
              35:    6(float) FMul 29 34
              37:    6(float) FAdd 35 36
                              Store 28 37
              41:    6(float) Load 28
              43:    38(bool) FOrdLessThan 41 42
                              Store 40 43
              44:    38(bool) Load 40
              48:     45(int) Select 44 47 46
              50:     45(int) IMul 48 49
              51:    38(bool) INotEqual 50 46
                              SelectionMerge 53 None
                              BranchConditional 51 52 53
              52:               Label
                                Kill
              53:             Label
                              Store 56 57
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: SHADOWS_CUBE 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 27 math, 3 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"

Constant Buffer "UnityLighting" (768 bytes) on slot 0 {
  Vector4 _WorldSpaceLightPos0 at 0
}
Constant Buffer "UnityShadows" (416 bytes) on slot 1 {
  Vector4 unity_LightShadowBias at 80
}
Constant Buffer "UnityPerDraw" (176 bytes) on slot 2 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 3 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// COLOR                    0   xyzw        2     NONE   float       
// TEXCOORD                 0   xy          3     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
//
      vs_4_0
      dcl_constantbuffer CB0[1], immediateIndexed
      dcl_constantbuffer CB1[6], immediateIndexed
      dcl_constantbuffer CB2[7], immediateIndexed
      dcl_constantbuffer CB3[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v1.xyz
      dcl_output_siv o0.xyzw, position
      dcl_temps 3
   0: dp3 r0.x, v1.xyzx, cb2[4].xyzx
   1: dp3 r0.y, v1.xyzx, cb2[5].xyzx
   2: dp3 r0.z, v1.xyzx, cb2[6].xyzx
   3: dp3 r0.w, r0.xyzx, r0.xyzx
   4: rsq r0.w, r0.w
   5: mul r0.xyz, r0.wwww, r0.xyzx
   6: mul r1.xyzw, v0.yyyy, cb2[1].xyzw
   7: mad r1.xyzw, cb2[0].xyzw, v0.xxxx, r1.xyzw
   8: mad r1.xyzw, cb2[2].xyzw, v0.zzzz, r1.xyzw
   9: mad r1.xyzw, cb2[3].xyzw, v0.wwww, r1.xyzw
  10: mad r2.xyz, -r1.xyzx, cb0[0].wwww, cb0[0].xyzx
  11: dp3 r0.w, r2.xyzx, r2.xyzx
  12: rsq r0.w, r0.w
  13: mul r2.xyz, r0.wwww, r2.xyzx
  14: dp3 r0.w, r0.xyzx, r2.xyzx
  15: mad r0.w, -r0.w, r0.w, l(1.000000)
  16: sqrt r0.w, r0.w
  17: mul r0.w, r0.w, cb1[5].z
  18: mad r0.xyz, -r0.xyzx, r0.wwww, r1.xyzx
  19: ne r0.w, cb1[5].z, l(0.000000)
  20: movc r0.xyz, r0.wwww, r0.xyzx, r1.xyzx
  21: mul r2.xyzw, r0.yyyy, cb3[18].xyzw
  22: mad r2.xyzw, cb3[17].xyzw, r0.xxxx, r2.xyzw
  23: mad r0.xyzw, cb3[19].xyzw, r0.zzzz, r2.xyzw
  24: mad r0.xyzw, cb3[20].xyzw, r1.wwww, r0.xyzw
  25: min r1.x, r0.w, r0.z
  26: add r1.x, -r0.z, r1.x
  27: mad o0.z, cb1[5].y, r1.x, r0.z
  28: mov o0.xyw, r0.xyxw
  29: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_output o0.xyzw
   0: mov o0.xyzw, l(0,0,0,0)
   1: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: SHADOWS_CUBE 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles":
Shader Disassembly:
#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
varying highp vec3 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD0.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_LightShadowBias;
varying highp vec3 vs_TEXCOORD0;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + unity_LightShadowBias.x;
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = min(u_xlat0.x, 0.999000013);
    u_xlat0 = u_xlat0.xxxx * vec4(1.0, 255.0, 65025.0, 16581375.0);
    u_xlat0 = fract(u_xlat0);
    u_xlat0 = (-u_xlat0.yzww) * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0;
    SV_Target0 = u_xlat0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: SHADOWS_CUBE 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Constant Buffer "$Globals" (224 bytes) {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
}

Shader Disassembly:
#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(unity_LightShadowBias.z!=0.0);
#else
    u_xlatb9 = unity_LightShadowBias.z!=0.0;
#endif
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.x = max((-u_xlat0.w), u_xlat0.z);
    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: SHADOWS_CUBE 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"

Constant Buffer "VGlobals" (224 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_LightShadowBias;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat9;
    bool u_xlatb9;
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat1);
    u_xlat2.xyz = fma((-u_xlat1.xyz), VGlobals._WorldSpaceLightPos0.www, VGlobals._WorldSpaceLightPos0.xyz);
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat2.xyz = float3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = fma((-u_xlat9), u_xlat9, 1.0);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * VGlobals.unity_LightShadowBias.z;
    u_xlat0.xyz = fma((-u_xlat0.xyz), float3(u_xlat9), u_xlat1.xyz);
    u_xlatb9 = VGlobals.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat2);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat2);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    u_xlat1.x = min(u_xlat0.w, u_xlat0.z);
    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
    output.mtl_Position.z = fma(VGlobals.unity_LightShadowBias.y, u_xlat1.x, u_xlat0.z);
    output.mtl_Position.xyw = u_xlat0.xyw;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_Target0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: SHADOWS_CUBE 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Constant Buffer "$Globals" (224 bytes) {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
}

Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
    u_xlatb9 = unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.x = max((-u_xlat0.w), u_xlat0.z);
    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

layout(location = 0) out vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: SHADOWS_CUBE 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Normal"
Uses vertex data channel "Vertex"

Constant Buffer "VGlobals2354375036" (224 bytes) on set: 1, binding: 0, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 160
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 236

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 12 66 214
                              Decorate 12 Location 1
                              Decorate 16 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 Offset 16
                              MemberDecorate 19 2 Offset 32
                              MemberDecorate 19 3 Offset 96
                              MemberDecorate 19 4 Offset 160
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 0
                              Decorate 66 Location 0
                              MemberDecorate 212 0 BuiltIn Position
                              MemberDecorate 212 1 BuiltIn PointSize
                              MemberDecorate 212 2 BuiltIn ClipDistance
                              Decorate 212 Block
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypeVector 6(float) 3
              11:             TypePointer Input 10(fvec3)
              12:     11(ptr) Variable Input
              14:             TypeInt 32 0
              15:     14(int) Constant 4
              16:             TypeArray 7(fvec4) 15
              17:             TypeArray 7(fvec4) 15
              18:             TypeArray 7(fvec4) 15
              19:             TypeStruct 7(fvec4) 7(fvec4) 16 17 18
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 3
              24:     22(int) Constant 0
              25:             TypePointer Uniform 7(fvec4)
              30:     14(int) Constant 0
              31:             TypePointer Private 6(float)
              34:     22(int) Constant 1
              39:     14(int) Constant 1
              42:     22(int) Constant 2
              47:     14(int) Constant 2
              49:     31(ptr) Variable Private
              64:      8(ptr) Variable Private
              65:             TypePointer Input 7(fvec4)
              66:     65(ptr) Variable Input
              93:      8(ptr) Variable Private
             130:    6(float) Constant 1065353216
             135:             TypePointer Uniform 6(float)
             150:             TypeBool
             151:             TypePointer Private 150(bool)
             152:    151(ptr) Variable Private
             155:    6(float) Constant 0
             158:             TypePointer Function 10(fvec3)
             172:     22(int) Constant 4
             197:     14(int) Constant 3
             211:             TypeArray 6(float) 39
             212:             TypeStruct 7(fvec4) 6(float) 211
             213:             TypePointer Output 212(struct)
             214:    213(ptr) Variable Output
             223:             TypePointer Output 6(float)
             227:             TypePointer Output 7(fvec4)
               4:           2 Function None 3
               5:             Label
             159:    158(ptr) Variable Function
              13:   10(fvec3) Load 12
              26:     25(ptr) AccessChain 21 23 24
              27:    7(fvec4) Load 26
              28:   10(fvec3) VectorShuffle 27 27 0 1 2
              29:    6(float) Dot 13 28
              32:     31(ptr) AccessChain 9 30
                              Store 32 29
              33:   10(fvec3) Load 12
              35:     25(ptr) AccessChain 21 23 34
              36:    7(fvec4) Load 35
              37:   10(fvec3) VectorShuffle 36 36 0 1 2
              38:    6(float) Dot 33 37
              40:     31(ptr) AccessChain 9 39
                              Store 40 38
              41:   10(fvec3) Load 12
              43:     25(ptr) AccessChain 21 23 42
              44:    7(fvec4) Load 43
              45:   10(fvec3) VectorShuffle 44 44 0 1 2
              46:    6(float) Dot 41 45
              48:     31(ptr) AccessChain 9 47
                              Store 48 46
              50:    7(fvec4) Load 9
              51:   10(fvec3) VectorShuffle 50 50 0 1 2
              52:    7(fvec4) Load 9
              53:   10(fvec3) VectorShuffle 52 52 0 1 2
              54:    6(float) Dot 51 53
                              Store 49 54
              55:    6(float) Load 49
              56:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 55
                              Store 49 56
              57:    6(float) Load 49
              58:   10(fvec3) CompositeConstruct 57 57 57
              59:    7(fvec4) Load 9
              60:   10(fvec3) VectorShuffle 59 59 0 1 2
              61:   10(fvec3) FMul 58 60
              62:    7(fvec4) Load 9
              63:    7(fvec4) VectorShuffle 62 61 4 5 6 3
                              Store 9 63
              67:    7(fvec4) Load 66
              68:    7(fvec4) VectorShuffle 67 67 1 1 1 1
              69:     25(ptr) AccessChain 21 42 34
              70:    7(fvec4) Load 69
              71:    7(fvec4) FMul 68 70
                              Store 64 71
              72:     25(ptr) AccessChain 21 42 24
              73:    7(fvec4) Load 72
              74:    7(fvec4) Load 66
              75:    7(fvec4) VectorShuffle 74 74 0 0 0 0
              76:    7(fvec4) FMul 73 75
              77:    7(fvec4) Load 64
              78:    7(fvec4) FAdd 76 77
                              Store 64 78
              79:     25(ptr) AccessChain 21 42 42
              80:    7(fvec4) Load 79
              81:    7(fvec4) Load 66
              82:    7(fvec4) VectorShuffle 81 81 2 2 2 2
              83:    7(fvec4) FMul 80 82
              84:    7(fvec4) Load 64
              85:    7(fvec4) FAdd 83 84
                              Store 64 85
              86:     25(ptr) AccessChain 21 42 23
              87:    7(fvec4) Load 86
              88:    7(fvec4) Load 66
              89:    7(fvec4) VectorShuffle 88 88 3 3 3 3
              90:    7(fvec4) FMul 87 89
              91:    7(fvec4) Load 64
              92:    7(fvec4) FAdd 90 91
                              Store 64 92
              94:    7(fvec4) Load 64
              95:   10(fvec3) VectorShuffle 94 94 0 1 2
              96:   10(fvec3) FNegate 95
              97:     25(ptr) AccessChain 21 24
              98:    7(fvec4) Load 97
              99:   10(fvec3) VectorShuffle 98 98 3 3 3
             100:   10(fvec3) FMul 96 99
             101:     25(ptr) AccessChain 21 24
             102:    7(fvec4) Load 101
             103:   10(fvec3) VectorShuffle 102 102 0 1 2
             104:   10(fvec3) FAdd 100 103
             105:    7(fvec4) Load 93
             106:    7(fvec4) VectorShuffle 105 104 4 5 6 3
                              Store 93 106
             107:    7(fvec4) Load 93
             108:   10(fvec3) VectorShuffle 107 107 0 1 2
             109:    7(fvec4) Load 93
             110:   10(fvec3) VectorShuffle 109 109 0 1 2
             111:    6(float) Dot 108 110
                              Store 49 111
             112:    6(float) Load 49
             113:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 112
                              Store 49 113
             114:    6(float) Load 49
             115:   10(fvec3) CompositeConstruct 114 114 114
             116:    7(fvec4) Load 93
             117:   10(fvec3) VectorShuffle 116 116 0 1 2
             118:   10(fvec3) FMul 115 117
             119:    7(fvec4) Load 93
             120:    7(fvec4) VectorShuffle 119 118 4 5 6 3
                              Store 93 120
             121:    7(fvec4) Load 9
             122:   10(fvec3) VectorShuffle 121 121 0 1 2
             123:    7(fvec4) Load 93
             124:   10(fvec3) VectorShuffle 123 123 0 1 2
             125:    6(float) Dot 122 124
                              Store 49 125
             126:    6(float) Load 49
             127:    6(float) FNegate 126
             128:    6(float) Load 49
             129:    6(float) FMul 127 128
             131:    6(float) FAdd 129 130
                              Store 49 131
             132:    6(float) Load 49
             133:    6(float) ExtInst 1(GLSL.std.450) 31(Sqrt) 132
                              Store 49 133
             134:    6(float) Load 49
             136:    135(ptr) AccessChain 21 34 47
             137:    6(float) Load 136
             138:    6(float) FMul 134 137
                              Store 49 138
             139:    7(fvec4) Load 9
             140:   10(fvec3) VectorShuffle 139 139 0 1 2
             141:   10(fvec3) FNegate 140
             142:    6(float) Load 49
             143:   10(fvec3) CompositeConstruct 142 142 142
             144:   10(fvec3) FMul 141 143
             145:    7(fvec4) Load 64
             146:   10(fvec3) VectorShuffle 145 145 0 1 2
             147:   10(fvec3) FAdd 144 146
             148:    7(fvec4) Load 9
             149:    7(fvec4) VectorShuffle 148 147 4 5 6 3
                              Store 9 149
             153:    135(ptr) AccessChain 21 34 47
             154:    6(float) Load 153
             156:   150(bool) FOrdNotEqual 154 155
                              Store 152 156
             157:   150(bool) Load 152
                              SelectionMerge 161 None
                              BranchConditional 157 160 164
             160:               Label
             162:    7(fvec4)   Load 9
             163:   10(fvec3)   VectorShuffle 162 162 0 1 2
                                Store 159 163
                                Branch 161
             164:               Label
             165:    7(fvec4)   Load 64
             166:   10(fvec3)   VectorShuffle 165 165 0 1 2
                                Store 159 166
                                Branch 161
             161:             Label
             167:   10(fvec3) Load 159
             168:    7(fvec4) Load 9
             169:    7(fvec4) VectorShuffle 168 167 4 5 6 3
                              Store 9 169
             170:    7(fvec4) Load 9
             171:    7(fvec4) VectorShuffle 170 170 1 1 1 1
             173:     25(ptr) AccessChain 21 172 34
             174:    7(fvec4) Load 173
             175:    7(fvec4) FMul 171 174
                              Store 93 175
             176:     25(ptr) AccessChain 21 172 24
             177:    7(fvec4) Load 176
             178:    7(fvec4) Load 9
             179:    7(fvec4) VectorShuffle 178 178 0 0 0 0
             180:    7(fvec4) FMul 177 179
             181:    7(fvec4) Load 93
             182:    7(fvec4) FAdd 180 181
                              Store 93 182
             183:     25(ptr) AccessChain 21 172 42
             184:    7(fvec4) Load 183
             185:    7(fvec4) Load 9
             186:    7(fvec4) VectorShuffle 185 185 2 2 2 2
             187:    7(fvec4) FMul 184 186
             188:    7(fvec4) Load 93
             189:    7(fvec4) FAdd 187 188
                              Store 9 189
             190:     25(ptr) AccessChain 21 172 23
             191:    7(fvec4) Load 190
             192:    7(fvec4) Load 64
             193:    7(fvec4) VectorShuffle 192 192 3 3 3 3
             194:    7(fvec4) FMul 191 193
             195:    7(fvec4) Load 9
             196:    7(fvec4) FAdd 194 195
                              Store 9 196
             198:     31(ptr) AccessChain 9 197
             199:    6(float) Load 198
             200:     31(ptr) AccessChain 9 47
             201:    6(float) Load 200
             202:    6(float) ExtInst 1(GLSL.std.450) 37(FMin) 199 201
             203:     31(ptr) AccessChain 64 30
                              Store 203 202
             204:     31(ptr) AccessChain 9 47
             205:    6(float) Load 204
             206:    6(float) FNegate 205
             207:     31(ptr) AccessChain 64 30
             208:    6(float) Load 207
             209:    6(float) FAdd 206 208
             210:     31(ptr) AccessChain 64 30
                              Store 210 209
             215:    135(ptr) AccessChain 21 34 39
             216:    6(float) Load 215
             217:     31(ptr) AccessChain 64 30
             218:    6(float) Load 217
             219:    6(float) FMul 216 218
             220:     31(ptr) AccessChain 9 47
             221:    6(float) Load 220
             222:    6(float) FAdd 219 221
             224:    223(ptr) AccessChain 214 24 47
                              Store 224 222
             225:    7(fvec4) Load 9
             226:   10(fvec3) VectorShuffle 225 225 0 1 3
             228:    227(ptr) AccessChain 214 24
             229:    7(fvec4) Load 228
             230:    7(fvec4) VectorShuffle 229 226 4 5 2 6
                              Store 228 230
             231:    223(ptr) AccessChain 214 24 39
             232:    6(float) Load 231
             233:    6(float) FNegate 232
             234:    223(ptr) AccessChain 214 24 39
                              Store 234 233
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 13

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 9
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 9 RelaxedPrecision
                              Decorate 9 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Output 7(fvec4)
               9:      8(ptr) Variable Output
              10:    6(float) Constant 0
              11:    7(fvec4) ConstantComposite 10 10 10 10
               4:           2 Function None 3
               5:             Label
                              Store 9 11
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: SHADOWS_DEPTH 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 32 math, 3 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "$Globals" (64 bytes) on slot 0 {
  Vector4 _MainTex_ST at 32
}
Constant Buffer "UnityLighting" (768 bytes) on slot 1 {
  Vector4 _WorldSpaceLightPos0 at 0
}
Constant Buffer "UnityShadows" (416 bytes) on slot 2 {
  Vector4 unity_LightShadowBias at 80
}
Constant Buffer "UnityPerDraw" (176 bytes) on slot 3 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 4 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 1   xy          0     NONE   float   xy  
// TEXCOORD                 3   xyzw        1     NONE   float   xyzw
// SV_POSITION              0   xyzw        2      POS   float   xyzw
//
      vs_4_0
      dcl_constantbuffer CB0[3], immediateIndexed
      dcl_constantbuffer CB1[1], immediateIndexed
      dcl_constantbuffer CB2[6], immediateIndexed
      dcl_constantbuffer CB3[7], immediateIndexed
      dcl_constantbuffer CB4[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v1.xyz
      dcl_input v2.xyzw
      dcl_input v3.xy
      dcl_output o0.xy
      dcl_output o1.xyzw
      dcl_output_siv o2.xyzw, position
      dcl_temps 3
   0: mad o0.xy, v3.xyxx, cb0[2].xyxx, cb0[2].zwzz
   1: mov o1.xyzw, v2.xyzw
   2: dp3 r0.x, v1.xyzx, cb3[4].xyzx
   3: dp3 r0.y, v1.xyzx, cb3[5].xyzx
   4: dp3 r0.z, v1.xyzx, cb3[6].xyzx
   5: dp3 r0.w, r0.xyzx, r0.xyzx
   6: rsq r0.w, r0.w
   7: mul r0.xyz, r0.wwww, r0.xyzx
   8: mul r1.xyzw, v0.yyyy, cb3[1].xyzw
   9: mad r1.xyzw, cb3[0].xyzw, v0.xxxx, r1.xyzw
  10: mad r1.xyzw, cb3[2].xyzw, v0.zzzz, r1.xyzw
  11: mad r1.xyzw, cb3[3].xyzw, v0.wwww, r1.xyzw
  12: mad r2.xyz, -r1.xyzx, cb1[0].wwww, cb1[0].xyzx
  13: dp3 r0.w, r2.xyzx, r2.xyzx
  14: rsq r0.w, r0.w
  15: mul r2.xyz, r0.wwww, r2.xyzx
  16: dp3 r0.w, r0.xyzx, r2.xyzx
  17: mad r0.w, -r0.w, r0.w, l(1.000000)
  18: sqrt r0.w, r0.w
  19: mul r0.w, r0.w, cb2[5].z
  20: mad r0.xyz, -r0.xyzx, r0.wwww, r1.xyzx
  21: ne r0.w, cb2[5].z, l(0.000000)
  22: movc r0.xyz, r0.wwww, r0.xyzx, r1.xyzx
  23: mul r2.xyzw, r0.yyyy, cb4[18].xyzw
  24: mad r2.xyzw, cb4[17].xyzw, r0.xxxx, r2.xyzw
  25: mad r0.xyzw, cb4[19].xyzw, r0.zzzz, r2.xyzw
  26: mad r0.xyzw, cb4[20].xyzw, r1.wwww, r0.xyzw
  27: div r1.x, cb2[5].x, r0.w
  28: min r1.x, r1.x, l(0.000000)
  29: max r1.x, r1.x, l(-1.000000)
  30: add r0.z, r0.z, r1.x
  31: min r1.x, r0.w, r0.z
  32: mov o2.xyw, r0.xyxw
  33: add r0.x, -r0.z, r1.x
  34: mad o2.z, cb2[5].y, r0.x, r0.z
  35: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 2 math, 1 temp registers, 1 textures
Set 2D Texture "_MainTex" to slot 0

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 1   xy          0     NONE   float   xy  
// TEXCOORD                 3   xyzw        1     NONE   float      w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v0.xy
      dcl_input_ps linear v1.w
      dcl_output o0.xyzw
      dcl_temps 1
   0: sample r0.xyzw, v0.xyxx, t0.xyzw, s0
   1: mad r0.x, r0.w, v1.w, l(-0.500000)
   2: lt r0.x, r0.x, l(0.000000)
   3: discard_nz r0.x
   4: mov o0.xyzw, l(0,0,0,0)
   5: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: SHADOWS_DEPTH 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles":
Shader Disassembly:
#ifdef VERTEX
#version 100

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying highp vec2 vs_TEXCOORD1;
varying mediump vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat6;
float u_xlat9;
bool u_xlatb9;
void main()
{
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3 = in_COLOR0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
    u_xlatb9 = unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat6 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = max((-u_xlat0.w), u_xlat6);
    gl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD1;
varying mediump vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
lowp float u_xlat10_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).w;
    u_xlat16_1 = u_xlat10_0 * vs_TEXCOORD3.w + -0.5;
    u_xlatb0 = u_xlat16_1<0.0;
    if(u_xlatb0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: SHADOWS_DEPTH 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (240 bytes) {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  Vector4 _MainTex_ST at 224
}

Shader Disassembly:
#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat6;
float u_xlat9;
bool u_xlatb9;
void main()
{
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3 = in_COLOR0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(unity_LightShadowBias.z!=0.0);
#else
    u_xlatb9 = unity_LightShadowBias.z!=0.0;
#endif
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = max((-u_xlat0.w), u_xlat6);
    gl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    u_xlat16_1 = u_xlat16_0 * vs_TEXCOORD3.w + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1<0.0);
#else
    u_xlatb0 = u_xlat16_1<0.0;
#endif
    if(u_xlatb0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: SHADOWS_DEPTH 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  Vector4 _MainTex_ST at 224
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_LightShadowBias;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 mtl_Position [[ position ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat6;
    float u_xlat9;
    bool u_xlatb9;
    output.TEXCOORD1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD3 = input.COLOR0;
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat1);
    u_xlat2.xyz = fma((-u_xlat1.xyz), VGlobals._WorldSpaceLightPos0.www, VGlobals._WorldSpaceLightPos0.xyz);
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat2.xyz = float3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = fma((-u_xlat9), u_xlat9, 1.0);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * VGlobals.unity_LightShadowBias.z;
    u_xlat0.xyz = fma((-u_xlat0.xyz), float3(u_xlat9), u_xlat1.xyz);
    u_xlatb9 = VGlobals.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat2);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat2);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    u_xlat1.x = VGlobals.unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = min(u_xlat1.x, 0.0);
    u_xlat1.x = max(u_xlat1.x, -1.0);
    u_xlat6 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = min(u_xlat0.w, u_xlat6);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
    output.mtl_Position.z = fma(VGlobals.unity_LightShadowBias.y, u_xlat0.x, u_xlat6);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float u_xlat0;
    bool u_xlatb0;
    u_xlat0 = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).w;
    u_xlat0 = fma(u_xlat0, input.TEXCOORD3.w, -0.5);
    u_xlatb0 = u_xlat0<0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    output.SV_Target0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: SHADOWS_DEPTH 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (240 bytes) {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  Vector4 _MainTex_ST at 224
}

Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD1;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat6;
float u_xlat9;
bool u_xlatb9;
void main()
{
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3 = in_COLOR0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
    u_xlatb9 = unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat6 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = max((-u_xlat0.w), u_xlat6);
    gl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat10_0;
bool u_xlatb0;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat0 = u_xlat10_0.w * vs_TEXCOORD3.w + -0.5;
    u_xlatb0 = u_xlat0<0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: SHADOWS_DEPTH 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "TexCoord0"
Uses vertex data channel "Color"
Uses vertex data channel "Normal"
Uses vertex data channel "Vertex"

Set 2D Texture "_MainTex" to set: 0, binding: 1, used in: Fragment  using sampler in set: 0, binding: 0, used in: Fragment 

Constant Buffer "VGlobals3886833753" (240 bytes) on set: 1, binding: 0, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 160
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Vector4 _MainTex_ST at 224
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 272

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 9 11 34 36 42 85 246
                              Name 9  "vs_TEXCOORD1"
                              Name 34  "vs_TEXCOORD3"
                              Decorate 9(vs_TEXCOORD1) Location 0
                              Decorate 11 Location 3
                              Decorate 16 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 Offset 16
                              MemberDecorate 19 2 Offset 32
                              MemberDecorate 19 3 Offset 96
                              MemberDecorate 19 4 Offset 160
                              MemberDecorate 19 5 Offset 224
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 0
                              Decorate 34(vs_TEXCOORD3) RelaxedPrecision
                              Decorate 34(vs_TEXCOORD3) Location 1
                              Decorate 36 RelaxedPrecision
                              Decorate 36 Location 2
                              Decorate 37 RelaxedPrecision
                              Decorate 42 Location 1
                              Decorate 85 Location 0
                              MemberDecorate 244 0 BuiltIn Position
                              MemberDecorate 244 1 BuiltIn PointSize
                              MemberDecorate 244 2 BuiltIn ClipDistance
                              Decorate 244 Block
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 2
               8:             TypePointer Output 7(fvec2)
 9(vs_TEXCOORD1):      8(ptr) Variable Output
              10:             TypePointer Input 7(fvec2)
              11:     10(ptr) Variable Input
              13:             TypeVector 6(float) 4
              14:             TypeInt 32 0
              15:     14(int) Constant 4
              16:             TypeArray 13(fvec4) 15
              17:             TypeArray 13(fvec4) 15
              18:             TypeArray 13(fvec4) 15
              19:             TypeStruct 13(fvec4) 13(fvec4) 16 17 18 13(fvec4)
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 5
              24:             TypePointer Uniform 13(fvec4)
              33:             TypePointer Output 13(fvec4)
34(vs_TEXCOORD3):     33(ptr) Variable Output
              35:             TypePointer Input 13(fvec4)
              36:     35(ptr) Variable Input
              38:             TypePointer Private 13(fvec4)
              39:     38(ptr) Variable Private
              40:             TypeVector 6(float) 3
              41:             TypePointer Input 40(fvec3)
              42:     41(ptr) Variable Input
              44:     22(int) Constant 3
              45:     22(int) Constant 0
              50:     14(int) Constant 0
              51:             TypePointer Private 6(float)
              54:     22(int) Constant 1
              59:     14(int) Constant 1
              62:     22(int) Constant 2
              67:     14(int) Constant 2
              69:     51(ptr) Variable Private
              84:     38(ptr) Variable Private
              85:     35(ptr) Variable Input
             112:     38(ptr) Variable Private
             149:    6(float) Constant 1065353216
             154:             TypePointer Uniform 6(float)
             169:             TypeBool
             170:             TypePointer Private 169(bool)
             171:    170(ptr) Variable Private
             174:    6(float) Constant 0
             177:             TypePointer Function 40(fvec3)
             191:     22(int) Constant 4
             218:     14(int) Constant 3
             229:    6(float) Constant 3212836864
             232:     51(ptr) Variable Private
             243:             TypeArray 6(float) 59
             244:             TypeStruct 13(fvec4) 6(float) 243
             245:             TypePointer Output 244(struct)
             246:    245(ptr) Variable Output
             265:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
             178:    177(ptr) Variable Function
              12:    7(fvec2) Load 11
              25:     24(ptr) AccessChain 21 23
              26:   13(fvec4) Load 25
              27:    7(fvec2) VectorShuffle 26 26 0 1
              28:    7(fvec2) FMul 12 27
              29:     24(ptr) AccessChain 21 23
              30:   13(fvec4) Load 29
              31:    7(fvec2) VectorShuffle 30 30 2 3
              32:    7(fvec2) FAdd 28 31
                              Store 9(vs_TEXCOORD1) 32
              37:   13(fvec4) Load 36
                              Store 34(vs_TEXCOORD3) 37
              43:   40(fvec3) Load 42
              46:     24(ptr) AccessChain 21 44 45
              47:   13(fvec4) Load 46
              48:   40(fvec3) VectorShuffle 47 47 0 1 2
              49:    6(float) Dot 43 48
              52:     51(ptr) AccessChain 39 50
                              Store 52 49
              53:   40(fvec3) Load 42
              55:     24(ptr) AccessChain 21 44 54
              56:   13(fvec4) Load 55
              57:   40(fvec3) VectorShuffle 56 56 0 1 2
              58:    6(float) Dot 53 57
              60:     51(ptr) AccessChain 39 59
                              Store 60 58
              61:   40(fvec3) Load 42
              63:     24(ptr) AccessChain 21 44 62
              64:   13(fvec4) Load 63
              65:   40(fvec3) VectorShuffle 64 64 0 1 2
              66:    6(float) Dot 61 65
              68:     51(ptr) AccessChain 39 67
                              Store 68 66
              70:   13(fvec4) Load 39
              71:   40(fvec3) VectorShuffle 70 70 0 1 2
              72:   13(fvec4) Load 39
              73:   40(fvec3) VectorShuffle 72 72 0 1 2
              74:    6(float) Dot 71 73
                              Store 69 74
              75:    6(float) Load 69
              76:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 75
                              Store 69 76
              77:    6(float) Load 69
              78:   40(fvec3) CompositeConstruct 77 77 77
              79:   13(fvec4) Load 39
              80:   40(fvec3) VectorShuffle 79 79 0 1 2
              81:   40(fvec3) FMul 78 80
              82:   13(fvec4) Load 39
              83:   13(fvec4) VectorShuffle 82 81 4 5 6 3
                              Store 39 83
              86:   13(fvec4) Load 85
              87:   13(fvec4) VectorShuffle 86 86 1 1 1 1
              88:     24(ptr) AccessChain 21 62 54
              89:   13(fvec4) Load 88
              90:   13(fvec4) FMul 87 89
                              Store 84 90
              91:     24(ptr) AccessChain 21 62 45
              92:   13(fvec4) Load 91
              93:   13(fvec4) Load 85
              94:   13(fvec4) VectorShuffle 93 93 0 0 0 0
              95:   13(fvec4) FMul 92 94
              96:   13(fvec4) Load 84
              97:   13(fvec4) FAdd 95 96
                              Store 84 97
              98:     24(ptr) AccessChain 21 62 62
              99:   13(fvec4) Load 98
             100:   13(fvec4) Load 85
             101:   13(fvec4) VectorShuffle 100 100 2 2 2 2
             102:   13(fvec4) FMul 99 101
             103:   13(fvec4) Load 84
             104:   13(fvec4) FAdd 102 103
                              Store 84 104
             105:     24(ptr) AccessChain 21 62 44
             106:   13(fvec4) Load 105
             107:   13(fvec4) Load 85
             108:   13(fvec4) VectorShuffle 107 107 3 3 3 3
             109:   13(fvec4) FMul 106 108
             110:   13(fvec4) Load 84
             111:   13(fvec4) FAdd 109 110
                              Store 84 111
             113:   13(fvec4) Load 84
             114:   40(fvec3) VectorShuffle 113 113 0 1 2
             115:   40(fvec3) FNegate 114
             116:     24(ptr) AccessChain 21 45
             117:   13(fvec4) Load 116
             118:   40(fvec3) VectorShuffle 117 117 3 3 3
             119:   40(fvec3) FMul 115 118
             120:     24(ptr) AccessChain 21 45
             121:   13(fvec4) Load 120
             122:   40(fvec3) VectorShuffle 121 121 0 1 2
             123:   40(fvec3) FAdd 119 122
             124:   13(fvec4) Load 112
             125:   13(fvec4) VectorShuffle 124 123 4 5 6 3
                              Store 112 125
             126:   13(fvec4) Load 112
             127:   40(fvec3) VectorShuffle 126 126 0 1 2
             128:   13(fvec4) Load 112
             129:   40(fvec3) VectorShuffle 128 128 0 1 2
             130:    6(float) Dot 127 129
                              Store 69 130
             131:    6(float) Load 69
             132:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 131
                              Store 69 132
             133:    6(float) Load 69
             134:   40(fvec3) CompositeConstruct 133 133 133
             135:   13(fvec4) Load 112
             136:   40(fvec3) VectorShuffle 135 135 0 1 2
             137:   40(fvec3) FMul 134 136
             138:   13(fvec4) Load 112
             139:   13(fvec4) VectorShuffle 138 137 4 5 6 3
                              Store 112 139
             140:   13(fvec4) Load 39
             141:   40(fvec3) VectorShuffle 140 140 0 1 2
             142:   13(fvec4) Load 112
             143:   40(fvec3) VectorShuffle 142 142 0 1 2
             144:    6(float) Dot 141 143
                              Store 69 144
             145:    6(float) Load 69
             146:    6(float) FNegate 145
             147:    6(float) Load 69
             148:    6(float) FMul 146 147
             150:    6(float) FAdd 148 149
                              Store 69 150
             151:    6(float) Load 69
             152:    6(float) ExtInst 1(GLSL.std.450) 31(Sqrt) 151
                              Store 69 152
             153:    6(float) Load 69
             155:    154(ptr) AccessChain 21 54 67
             156:    6(float) Load 155
             157:    6(float) FMul 153 156
                              Store 69 157
             158:   13(fvec4) Load 39
             159:   40(fvec3) VectorShuffle 158 158 0 1 2
             160:   40(fvec3) FNegate 159
             161:    6(float) Load 69
             162:   40(fvec3) CompositeConstruct 161 161 161
             163:   40(fvec3) FMul 160 162
             164:   13(fvec4) Load 84
             165:   40(fvec3) VectorShuffle 164 164 0 1 2
             166:   40(fvec3) FAdd 163 165
             167:   13(fvec4) Load 39
             168:   13(fvec4) VectorShuffle 167 166 4 5 6 3
                              Store 39 168
             172:    154(ptr) AccessChain 21 54 67
             173:    6(float) Load 172
             175:   169(bool) FOrdNotEqual 173 174
                              Store 171 175
             176:   169(bool) Load 171
                              SelectionMerge 180 None
                              BranchConditional 176 179 183
             179:               Label
             181:   13(fvec4)   Load 39
             182:   40(fvec3)   VectorShuffle 181 181 0 1 2
                                Store 178 182
                                Branch 180
             183:               Label
             184:   13(fvec4)   Load 84
             185:   40(fvec3)   VectorShuffle 184 184 0 1 2
                                Store 178 185
                                Branch 180
             180:             Label
             186:   40(fvec3) Load 178
             187:   13(fvec4) Load 39
             188:   13(fvec4) VectorShuffle 187 186 4 5 6 3
                              Store 39 188
             189:   13(fvec4) Load 39
             190:   13(fvec4) VectorShuffle 189 189 1 1 1 1
             192:     24(ptr) AccessChain 21 191 54
             193:   13(fvec4) Load 192
             194:   13(fvec4) FMul 190 193
                              Store 112 194
             195:     24(ptr) AccessChain 21 191 45
             196:   13(fvec4) Load 195
             197:   13(fvec4) Load 39
             198:   13(fvec4) VectorShuffle 197 197 0 0 0 0
             199:   13(fvec4) FMul 196 198
             200:   13(fvec4) Load 112
             201:   13(fvec4) FAdd 199 200
                              Store 112 201
             202:     24(ptr) AccessChain 21 191 62
             203:   13(fvec4) Load 202
             204:   13(fvec4) Load 39
             205:   13(fvec4) VectorShuffle 204 204 2 2 2 2
             206:   13(fvec4) FMul 203 205
             207:   13(fvec4) Load 112
             208:   13(fvec4) FAdd 206 207
                              Store 39 208
             209:     24(ptr) AccessChain 21 191 44
             210:   13(fvec4) Load 209
             211:   13(fvec4) Load 84
             212:   13(fvec4) VectorShuffle 211 211 3 3 3 3
             213:   13(fvec4) FMul 210 212
             214:   13(fvec4) Load 39
             215:   13(fvec4) FAdd 213 214
                              Store 39 215
             216:    154(ptr) AccessChain 21 54 50
             217:    6(float) Load 216
             219:     51(ptr) AccessChain 39 218
             220:    6(float) Load 219
             221:    6(float) FDiv 217 220
             222:     51(ptr) AccessChain 84 50
                              Store 222 221
             223:     51(ptr) AccessChain 84 50
             224:    6(float) Load 223
             225:    6(float) ExtInst 1(GLSL.std.450) 37(FMin) 224 174
             226:     51(ptr) AccessChain 84 50
                              Store 226 225
             227:     51(ptr) AccessChain 84 50
             228:    6(float) Load 227
             230:    6(float) ExtInst 1(GLSL.std.450) 40(FMax) 228 229
             231:     51(ptr) AccessChain 84 50
                              Store 231 230
             233:     51(ptr) AccessChain 39 67
             234:    6(float) Load 233
             235:     51(ptr) AccessChain 84 50
             236:    6(float) Load 235
             237:    6(float) FAdd 234 236
                              Store 232 237
             238:     51(ptr) AccessChain 39 218
             239:    6(float) Load 238
             240:    6(float) Load 232
             241:    6(float) ExtInst 1(GLSL.std.450) 37(FMin) 239 240
             242:     51(ptr) AccessChain 84 50
                              Store 242 241
             247:   13(fvec4) Load 39
             248:   40(fvec3) VectorShuffle 247 247 0 1 3
             249:     33(ptr) AccessChain 246 45
             250:   13(fvec4) Load 249
             251:   13(fvec4) VectorShuffle 250 248 4 5 2 6
                              Store 249 251
             252:    6(float) Load 232
             253:    6(float) FNegate 252
             254:     51(ptr) AccessChain 84 50
             255:    6(float) Load 254
             256:    6(float) FAdd 253 255
             257:     51(ptr) AccessChain 39 50
                              Store 257 256
             258:    154(ptr) AccessChain 21 54 59
             259:    6(float) Load 258
             260:     51(ptr) AccessChain 39 50
             261:    6(float) Load 260
             262:    6(float) FMul 259 261
             263:    6(float) Load 232
             264:    6(float) FAdd 262 263
             266:    265(ptr) AccessChain 246 45 67
                              Store 266 264
             267:    265(ptr) AccessChain 246 45 59
             268:    6(float) Load 267
             269:    6(float) FNegate 268
             270:    265(ptr) AccessChain 246 45 59
                              Store 270 269
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 59

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 21 31 56
                              ExecutionMode 4 OriginUpperLeft
                              Name 21  "vs_TEXCOORD1"
                              Name 31  "vs_TEXCOORD3"
                              Decorate 8 RelaxedPrecision
                              Decorate 11 RelaxedPrecision
                              Decorate 11 DescriptorSet 0
                              Decorate 11 Binding 1
                              Decorate 12 RelaxedPrecision
                              Decorate 15 RelaxedPrecision
                              Decorate 15 DescriptorSet 0
                              Decorate 15 Binding 0
                              Decorate 16 RelaxedPrecision
                              Decorate 21(vs_TEXCOORD1) Location 0
                              Decorate 27 RelaxedPrecision
                              Decorate 28 RelaxedPrecision
                              Decorate 29 RelaxedPrecision
                              Decorate 31(vs_TEXCOORD3) RelaxedPrecision
                              Decorate 31(vs_TEXCOORD3) Location 1
                              Decorate 34 RelaxedPrecision
                              Decorate 35 RelaxedPrecision
                              Decorate 37 RelaxedPrecision
                              Decorate 41 RelaxedPrecision
                              Decorate 56 RelaxedPrecision
                              Decorate 56 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypePointer Private 6(float)
               8:      7(ptr) Variable Private
               9:             TypeImage 6(float) 2D sampled format:Unknown
              10:             TypePointer UniformConstant 9
              11:     10(ptr) Variable UniformConstant
              13:             TypeSampler
              14:             TypePointer UniformConstant 13
              15:     14(ptr) Variable UniformConstant
              17:             TypeSampledImage 9
              19:             TypeVector 6(float) 2
              20:             TypePointer Input 19(fvec2)
21(vs_TEXCOORD1):     20(ptr) Variable Input
              23:             TypeVector 6(float) 4
              25:             TypeInt 32 0
              26:     25(int) Constant 3
              28:      7(ptr) Variable Private
              30:             TypePointer Input 23(fvec4)
31(vs_TEXCOORD3):     30(ptr) Variable Input
              32:             TypePointer Input 6(float)
              36:    6(float) Constant 3204448256
              38:             TypeBool
              39:             TypePointer Private 38(bool)
              40:     39(ptr) Variable Private
              42:    6(float) Constant 0
              45:             TypeInt 32 1
              46:     45(int) Constant 0
              47:     45(int) Constant 1
              49:     45(int) Constant 4294967295
              55:             TypePointer Output 23(fvec4)
              56:     55(ptr) Variable Output
              57:   23(fvec4) ConstantComposite 42 42 42 42
               4:           2 Function None 3
               5:             Label
              12:           9 Load 11
              16:          13 Load 15
              18:          17 SampledImage 12 16
              22:   19(fvec2) Load 21(vs_TEXCOORD1)
              24:   23(fvec4) ImageSampleImplicitLod 18 22
              27:    6(float) CompositeExtract 24 3
                              Store 8 27
              29:    6(float) Load 8
              33:     32(ptr) AccessChain 31(vs_TEXCOORD3) 26
              34:    6(float) Load 33
              35:    6(float) FMul 29 34
              37:    6(float) FAdd 35 36
                              Store 28 37
              41:    6(float) Load 28
              43:    38(bool) FOrdLessThan 41 42
                              Store 40 43
              44:    38(bool) Load 40
              48:     45(int) Select 44 47 46
              50:     45(int) IMul 48 49
              51:    38(bool) INotEqual 50 46
                              SelectionMerge 53 None
                              BranchConditional 51 52 53
              52:               Label
                                Kill
              53:             Label
                              Store 56 57
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: SHADOWS_DEPTH 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 32 math, 3 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "$Globals" (64 bytes) on slot 0 {
  Vector4 _MainTex_ST at 32
}
Constant Buffer "UnityLighting" (768 bytes) on slot 1 {
  Vector4 _WorldSpaceLightPos0 at 0
}
Constant Buffer "UnityShadows" (416 bytes) on slot 2 {
  Vector4 unity_LightShadowBias at 80
}
Constant Buffer "UnityPerDraw" (176 bytes) on slot 3 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 4 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 1   xy          0     NONE   float   xy  
// TEXCOORD                 3   xyzw        1     NONE   float   xyzw
// SV_POSITION              0   xyzw        2      POS   float   xyzw
//
      vs_4_0
      dcl_constantbuffer CB0[3], immediateIndexed
      dcl_constantbuffer CB1[1], immediateIndexed
      dcl_constantbuffer CB2[6], immediateIndexed
      dcl_constantbuffer CB3[7], immediateIndexed
      dcl_constantbuffer CB4[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v1.xyz
      dcl_input v2.xyzw
      dcl_input v3.xy
      dcl_output o0.xy
      dcl_output o1.xyzw
      dcl_output_siv o2.xyzw, position
      dcl_temps 3
   0: mad o0.xy, v3.xyxx, cb0[2].xyxx, cb0[2].zwzz
   1: mov o1.xyzw, v2.xyzw
   2: dp3 r0.x, v1.xyzx, cb3[4].xyzx
   3: dp3 r0.y, v1.xyzx, cb3[5].xyzx
   4: dp3 r0.z, v1.xyzx, cb3[6].xyzx
   5: dp3 r0.w, r0.xyzx, r0.xyzx
   6: rsq r0.w, r0.w
   7: mul r0.xyz, r0.wwww, r0.xyzx
   8: mul r1.xyzw, v0.yyyy, cb3[1].xyzw
   9: mad r1.xyzw, cb3[0].xyzw, v0.xxxx, r1.xyzw
  10: mad r1.xyzw, cb3[2].xyzw, v0.zzzz, r1.xyzw
  11: mad r1.xyzw, cb3[3].xyzw, v0.wwww, r1.xyzw
  12: mad r2.xyz, -r1.xyzx, cb1[0].wwww, cb1[0].xyzx
  13: dp3 r0.w, r2.xyzx, r2.xyzx
  14: rsq r0.w, r0.w
  15: mul r2.xyz, r0.wwww, r2.xyzx
  16: dp3 r0.w, r0.xyzx, r2.xyzx
  17: mad r0.w, -r0.w, r0.w, l(1.000000)
  18: sqrt r0.w, r0.w
  19: mul r0.w, r0.w, cb2[5].z
  20: mad r0.xyz, -r0.xyzx, r0.wwww, r1.xyzx
  21: ne r0.w, cb2[5].z, l(0.000000)
  22: movc r0.xyz, r0.wwww, r0.xyzx, r1.xyzx
  23: mul r2.xyzw, r0.yyyy, cb4[18].xyzw
  24: mad r2.xyzw, cb4[17].xyzw, r0.xxxx, r2.xyzw
  25: mad r0.xyzw, cb4[19].xyzw, r0.zzzz, r2.xyzw
  26: mad r0.xyzw, cb4[20].xyzw, r1.wwww, r0.xyzw
  27: div r1.x, cb2[5].x, r0.w
  28: min r1.x, r1.x, l(0.000000)
  29: max r1.x, r1.x, l(-1.000000)
  30: add r0.z, r0.z, r1.x
  31: min r1.x, r0.w, r0.z
  32: mov o2.xyw, r0.xyxw
  33: add r0.x, -r0.z, r1.x
  34: mad o2.z, cb2[5].y, r0.x, r0.z
  35: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 2 math, 1 temp registers, 1 textures
Set 2D Texture "_MainTex" to slot 0

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 1   xy          0     NONE   float   xy  
// TEXCOORD                 3   xyzw        1     NONE   float      w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v0.xy
      dcl_input_ps linear v1.w
      dcl_output o0.xyzw
      dcl_temps 1
   0: sample r0.xyzw, v0.xyxx, t0.xyzw, s0
   1: mad r0.x, r0.w, v1.w, l(-0.500000)
   2: lt r0.x, r0.x, l(0.000000)
   3: discard_nz r0.x
   4: mov o0.xyzw, l(0,0,0,0)
   5: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: SHADOWS_DEPTH 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles":
Shader Disassembly:
#ifdef VERTEX
#version 100

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying highp vec2 vs_TEXCOORD1;
varying mediump vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat6;
float u_xlat9;
bool u_xlatb9;
void main()
{
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3 = in_COLOR0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
    u_xlatb9 = unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat6 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = max((-u_xlat0.w), u_xlat6);
    gl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD1;
varying mediump vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
lowp float u_xlat10_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).w;
    u_xlat16_1 = u_xlat10_0 * vs_TEXCOORD3.w + -0.5;
    u_xlatb0 = u_xlat16_1<0.0;
    if(u_xlatb0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: SHADOWS_DEPTH 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (240 bytes) {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  Vector4 _MainTex_ST at 224
}

Shader Disassembly:
#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat6;
float u_xlat9;
bool u_xlatb9;
void main()
{
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3 = in_COLOR0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(unity_LightShadowBias.z!=0.0);
#else
    u_xlatb9 = unity_LightShadowBias.z!=0.0;
#endif
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = max((-u_xlat0.w), u_xlat6);
    gl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    u_xlat16_1 = u_xlat16_0 * vs_TEXCOORD3.w + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1<0.0);
#else
    u_xlatb0 = u_xlat16_1<0.0;
#endif
    if(u_xlatb0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: SHADOWS_DEPTH 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  Vector4 _MainTex_ST at 224
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_LightShadowBias;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 mtl_Position [[ position ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat6;
    float u_xlat9;
    bool u_xlatb9;
    output.TEXCOORD1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD3 = input.COLOR0;
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat1);
    u_xlat2.xyz = fma((-u_xlat1.xyz), VGlobals._WorldSpaceLightPos0.www, VGlobals._WorldSpaceLightPos0.xyz);
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat2.xyz = float3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = fma((-u_xlat9), u_xlat9, 1.0);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * VGlobals.unity_LightShadowBias.z;
    u_xlat0.xyz = fma((-u_xlat0.xyz), float3(u_xlat9), u_xlat1.xyz);
    u_xlatb9 = VGlobals.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat2);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat2);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    u_xlat1.x = VGlobals.unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = min(u_xlat1.x, 0.0);
    u_xlat1.x = max(u_xlat1.x, -1.0);
    u_xlat6 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = min(u_xlat0.w, u_xlat6);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
    output.mtl_Position.z = fma(VGlobals.unity_LightShadowBias.y, u_xlat0.x, u_xlat6);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float u_xlat0;
    bool u_xlatb0;
    u_xlat0 = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).w;
    u_xlat0 = fma(u_xlat0, input.TEXCOORD3.w, -0.5);
    u_xlatb0 = u_xlat0<0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    output.SV_Target0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: SHADOWS_DEPTH 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (240 bytes) {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  Vector4 _MainTex_ST at 224
}

Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD1;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat6;
float u_xlat9;
bool u_xlatb9;
void main()
{
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3 = in_COLOR0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
    u_xlatb9 = unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat6 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = max((-u_xlat0.w), u_xlat6);
    gl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat10_0;
bool u_xlatb0;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat0 = u_xlat10_0.w * vs_TEXCOORD3.w + -0.5;
    u_xlatb0 = u_xlat0<0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: SHADOWS_DEPTH 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "TexCoord0"
Uses vertex data channel "Color"
Uses vertex data channel "Normal"
Uses vertex data channel "Vertex"

Set 2D Texture "_MainTex" to set: 0, binding: 1, used in: Fragment  using sampler in set: 0, binding: 0, used in: Fragment 

Constant Buffer "VGlobals3886833753" (240 bytes) on set: 1, binding: 0, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 160
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Vector4 _MainTex_ST at 224
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 272

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 9 11 34 36 42 85 246
                              Name 9  "vs_TEXCOORD1"
                              Name 34  "vs_TEXCOORD3"
                              Decorate 9(vs_TEXCOORD1) Location 0
                              Decorate 11 Location 3
                              Decorate 16 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 Offset 16
                              MemberDecorate 19 2 Offset 32
                              MemberDecorate 19 3 Offset 96
                              MemberDecorate 19 4 Offset 160
                              MemberDecorate 19 5 Offset 224
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 0
                              Decorate 34(vs_TEXCOORD3) RelaxedPrecision
                              Decorate 34(vs_TEXCOORD3) Location 1
                              Decorate 36 RelaxedPrecision
                              Decorate 36 Location 2
                              Decorate 37 RelaxedPrecision
                              Decorate 42 Location 1
                              Decorate 85 Location 0
                              MemberDecorate 244 0 BuiltIn Position
                              MemberDecorate 244 1 BuiltIn PointSize
                              MemberDecorate 244 2 BuiltIn ClipDistance
                              Decorate 244 Block
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 2
               8:             TypePointer Output 7(fvec2)
 9(vs_TEXCOORD1):      8(ptr) Variable Output
              10:             TypePointer Input 7(fvec2)
              11:     10(ptr) Variable Input
              13:             TypeVector 6(float) 4
              14:             TypeInt 32 0
              15:     14(int) Constant 4
              16:             TypeArray 13(fvec4) 15
              17:             TypeArray 13(fvec4) 15
              18:             TypeArray 13(fvec4) 15
              19:             TypeStruct 13(fvec4) 13(fvec4) 16 17 18 13(fvec4)
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 5
              24:             TypePointer Uniform 13(fvec4)
              33:             TypePointer Output 13(fvec4)
34(vs_TEXCOORD3):     33(ptr) Variable Output
              35:             TypePointer Input 13(fvec4)
              36:     35(ptr) Variable Input
              38:             TypePointer Private 13(fvec4)
              39:     38(ptr) Variable Private
              40:             TypeVector 6(float) 3
              41:             TypePointer Input 40(fvec3)
              42:     41(ptr) Variable Input
              44:     22(int) Constant 3
              45:     22(int) Constant 0
              50:     14(int) Constant 0
              51:             TypePointer Private 6(float)
              54:     22(int) Constant 1
              59:     14(int) Constant 1
              62:     22(int) Constant 2
              67:     14(int) Constant 2
              69:     51(ptr) Variable Private
              84:     38(ptr) Variable Private
              85:     35(ptr) Variable Input
             112:     38(ptr) Variable Private
             149:    6(float) Constant 1065353216
             154:             TypePointer Uniform 6(float)
             169:             TypeBool
             170:             TypePointer Private 169(bool)
             171:    170(ptr) Variable Private
             174:    6(float) Constant 0
             177:             TypePointer Function 40(fvec3)
             191:     22(int) Constant 4
             218:     14(int) Constant 3
             229:    6(float) Constant 3212836864
             232:     51(ptr) Variable Private
             243:             TypeArray 6(float) 59
             244:             TypeStruct 13(fvec4) 6(float) 243
             245:             TypePointer Output 244(struct)
             246:    245(ptr) Variable Output
             265:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
             178:    177(ptr) Variable Function
              12:    7(fvec2) Load 11
              25:     24(ptr) AccessChain 21 23
              26:   13(fvec4) Load 25
              27:    7(fvec2) VectorShuffle 26 26 0 1
              28:    7(fvec2) FMul 12 27
              29:     24(ptr) AccessChain 21 23
              30:   13(fvec4) Load 29
              31:    7(fvec2) VectorShuffle 30 30 2 3
              32:    7(fvec2) FAdd 28 31
                              Store 9(vs_TEXCOORD1) 32
              37:   13(fvec4) Load 36
                              Store 34(vs_TEXCOORD3) 37
              43:   40(fvec3) Load 42
              46:     24(ptr) AccessChain 21 44 45
              47:   13(fvec4) Load 46
              48:   40(fvec3) VectorShuffle 47 47 0 1 2
              49:    6(float) Dot 43 48
              52:     51(ptr) AccessChain 39 50
                              Store 52 49
              53:   40(fvec3) Load 42
              55:     24(ptr) AccessChain 21 44 54
              56:   13(fvec4) Load 55
              57:   40(fvec3) VectorShuffle 56 56 0 1 2
              58:    6(float) Dot 53 57
              60:     51(ptr) AccessChain 39 59
                              Store 60 58
              61:   40(fvec3) Load 42
              63:     24(ptr) AccessChain 21 44 62
              64:   13(fvec4) Load 63
              65:   40(fvec3) VectorShuffle 64 64 0 1 2
              66:    6(float) Dot 61 65
              68:     51(ptr) AccessChain 39 67
                              Store 68 66
              70:   13(fvec4) Load 39
              71:   40(fvec3) VectorShuffle 70 70 0 1 2
              72:   13(fvec4) Load 39
              73:   40(fvec3) VectorShuffle 72 72 0 1 2
              74:    6(float) Dot 71 73
                              Store 69 74
              75:    6(float) Load 69
              76:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 75
                              Store 69 76
              77:    6(float) Load 69
              78:   40(fvec3) CompositeConstruct 77 77 77
              79:   13(fvec4) Load 39
              80:   40(fvec3) VectorShuffle 79 79 0 1 2
              81:   40(fvec3) FMul 78 80
              82:   13(fvec4) Load 39
              83:   13(fvec4) VectorShuffle 82 81 4 5 6 3
                              Store 39 83
              86:   13(fvec4) Load 85
              87:   13(fvec4) VectorShuffle 86 86 1 1 1 1
              88:     24(ptr) AccessChain 21 62 54
              89:   13(fvec4) Load 88
              90:   13(fvec4) FMul 87 89
                              Store 84 90
              91:     24(ptr) AccessChain 21 62 45
              92:   13(fvec4) Load 91
              93:   13(fvec4) Load 85
              94:   13(fvec4) VectorShuffle 93 93 0 0 0 0
              95:   13(fvec4) FMul 92 94
              96:   13(fvec4) Load 84
              97:   13(fvec4) FAdd 95 96
                              Store 84 97
              98:     24(ptr) AccessChain 21 62 62
              99:   13(fvec4) Load 98
             100:   13(fvec4) Load 85
             101:   13(fvec4) VectorShuffle 100 100 2 2 2 2
             102:   13(fvec4) FMul 99 101
             103:   13(fvec4) Load 84
             104:   13(fvec4) FAdd 102 103
                              Store 84 104
             105:     24(ptr) AccessChain 21 62 44
             106:   13(fvec4) Load 105
             107:   13(fvec4) Load 85
             108:   13(fvec4) VectorShuffle 107 107 3 3 3 3
             109:   13(fvec4) FMul 106 108
             110:   13(fvec4) Load 84
             111:   13(fvec4) FAdd 109 110
                              Store 84 111
             113:   13(fvec4) Load 84
             114:   40(fvec3) VectorShuffle 113 113 0 1 2
             115:   40(fvec3) FNegate 114
             116:     24(ptr) AccessChain 21 45
             117:   13(fvec4) Load 116
             118:   40(fvec3) VectorShuffle 117 117 3 3 3
             119:   40(fvec3) FMul 115 118
             120:     24(ptr) AccessChain 21 45
             121:   13(fvec4) Load 120
             122:   40(fvec3) VectorShuffle 121 121 0 1 2
             123:   40(fvec3) FAdd 119 122
             124:   13(fvec4) Load 112
             125:   13(fvec4) VectorShuffle 124 123 4 5 6 3
                              Store 112 125
             126:   13(fvec4) Load 112
             127:   40(fvec3) VectorShuffle 126 126 0 1 2
             128:   13(fvec4) Load 112
             129:   40(fvec3) VectorShuffle 128 128 0 1 2
             130:    6(float) Dot 127 129
                              Store 69 130
             131:    6(float) Load 69
             132:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 131
                              Store 69 132
             133:    6(float) Load 69
             134:   40(fvec3) CompositeConstruct 133 133 133
             135:   13(fvec4) Load 112
             136:   40(fvec3) VectorShuffle 135 135 0 1 2
             137:   40(fvec3) FMul 134 136
             138:   13(fvec4) Load 112
             139:   13(fvec4) VectorShuffle 138 137 4 5 6 3
                              Store 112 139
             140:   13(fvec4) Load 39
             141:   40(fvec3) VectorShuffle 140 140 0 1 2
             142:   13(fvec4) Load 112
             143:   40(fvec3) VectorShuffle 142 142 0 1 2
             144:    6(float) Dot 141 143
                              Store 69 144
             145:    6(float) Load 69
             146:    6(float) FNegate 145
             147:    6(float) Load 69
             148:    6(float) FMul 146 147
             150:    6(float) FAdd 148 149
                              Store 69 150
             151:    6(float) Load 69
             152:    6(float) ExtInst 1(GLSL.std.450) 31(Sqrt) 151
                              Store 69 152
             153:    6(float) Load 69
             155:    154(ptr) AccessChain 21 54 67
             156:    6(float) Load 155
             157:    6(float) FMul 153 156
                              Store 69 157
             158:   13(fvec4) Load 39
             159:   40(fvec3) VectorShuffle 158 158 0 1 2
             160:   40(fvec3) FNegate 159
             161:    6(float) Load 69
             162:   40(fvec3) CompositeConstruct 161 161 161
             163:   40(fvec3) FMul 160 162
             164:   13(fvec4) Load 84
             165:   40(fvec3) VectorShuffle 164 164 0 1 2
             166:   40(fvec3) FAdd 163 165
             167:   13(fvec4) Load 39
             168:   13(fvec4) VectorShuffle 167 166 4 5 6 3
                              Store 39 168
             172:    154(ptr) AccessChain 21 54 67
             173:    6(float) Load 172
             175:   169(bool) FOrdNotEqual 173 174
                              Store 171 175
             176:   169(bool) Load 171
                              SelectionMerge 180 None
                              BranchConditional 176 179 183
             179:               Label
             181:   13(fvec4)   Load 39
             182:   40(fvec3)   VectorShuffle 181 181 0 1 2
                                Store 178 182
                                Branch 180
             183:               Label
             184:   13(fvec4)   Load 84
             185:   40(fvec3)   VectorShuffle 184 184 0 1 2
                                Store 178 185
                                Branch 180
             180:             Label
             186:   40(fvec3) Load 178
             187:   13(fvec4) Load 39
             188:   13(fvec4) VectorShuffle 187 186 4 5 6 3
                              Store 39 188
             189:   13(fvec4) Load 39
             190:   13(fvec4) VectorShuffle 189 189 1 1 1 1
             192:     24(ptr) AccessChain 21 191 54
             193:   13(fvec4) Load 192
             194:   13(fvec4) FMul 190 193
                              Store 112 194
             195:     24(ptr) AccessChain 21 191 45
             196:   13(fvec4) Load 195
             197:   13(fvec4) Load 39
             198:   13(fvec4) VectorShuffle 197 197 0 0 0 0
             199:   13(fvec4) FMul 196 198
             200:   13(fvec4) Load 112
             201:   13(fvec4) FAdd 199 200
                              Store 112 201
             202:     24(ptr) AccessChain 21 191 62
             203:   13(fvec4) Load 202
             204:   13(fvec4) Load 39
             205:   13(fvec4) VectorShuffle 204 204 2 2 2 2
             206:   13(fvec4) FMul 203 205
             207:   13(fvec4) Load 112
             208:   13(fvec4) FAdd 206 207
                              Store 39 208
             209:     24(ptr) AccessChain 21 191 44
             210:   13(fvec4) Load 209
             211:   13(fvec4) Load 84
             212:   13(fvec4) VectorShuffle 211 211 3 3 3 3
             213:   13(fvec4) FMul 210 212
             214:   13(fvec4) Load 39
             215:   13(fvec4) FAdd 213 214
                              Store 39 215
             216:    154(ptr) AccessChain 21 54 50
             217:    6(float) Load 216
             219:     51(ptr) AccessChain 39 218
             220:    6(float) Load 219
             221:    6(float) FDiv 217 220
             222:     51(ptr) AccessChain 84 50
                              Store 222 221
             223:     51(ptr) AccessChain 84 50
             224:    6(float) Load 223
             225:    6(float) ExtInst 1(GLSL.std.450) 37(FMin) 224 174
             226:     51(ptr) AccessChain 84 50
                              Store 226 225
             227:     51(ptr) AccessChain 84 50
             228:    6(float) Load 227
             230:    6(float) ExtInst 1(GLSL.std.450) 40(FMax) 228 229
             231:     51(ptr) AccessChain 84 50
                              Store 231 230
             233:     51(ptr) AccessChain 39 67
             234:    6(float) Load 233
             235:     51(ptr) AccessChain 84 50
             236:    6(float) Load 235
             237:    6(float) FAdd 234 236
                              Store 232 237
             238:     51(ptr) AccessChain 39 218
             239:    6(float) Load 238
             240:    6(float) Load 232
             241:    6(float) ExtInst 1(GLSL.std.450) 37(FMin) 239 240
             242:     51(ptr) AccessChain 84 50
                              Store 242 241
             247:   13(fvec4) Load 39
             248:   40(fvec3) VectorShuffle 247 247 0 1 3
             249:     33(ptr) AccessChain 246 45
             250:   13(fvec4) Load 249
             251:   13(fvec4) VectorShuffle 250 248 4 5 2 6
                              Store 249 251
             252:    6(float) Load 232
             253:    6(float) FNegate 252
             254:     51(ptr) AccessChain 84 50
             255:    6(float) Load 254
             256:    6(float) FAdd 253 255
             257:     51(ptr) AccessChain 39 50
                              Store 257 256
             258:    154(ptr) AccessChain 21 54 59
             259:    6(float) Load 258
             260:     51(ptr) AccessChain 39 50
             261:    6(float) Load 260
             262:    6(float) FMul 259 261
             263:    6(float) Load 232
             264:    6(float) FAdd 262 263
             266:    265(ptr) AccessChain 246 45 67
                              Store 266 264
             267:    265(ptr) AccessChain 246 45 59
             268:    6(float) Load 267
             269:    6(float) FNegate 268
             270:    265(ptr) AccessChain 246 45 59
                              Store 270 269
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 59

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 21 31 56
                              ExecutionMode 4 OriginUpperLeft
                              Name 21  "vs_TEXCOORD1"
                              Name 31  "vs_TEXCOORD3"
                              Decorate 8 RelaxedPrecision
                              Decorate 11 RelaxedPrecision
                              Decorate 11 DescriptorSet 0
                              Decorate 11 Binding 1
                              Decorate 12 RelaxedPrecision
                              Decorate 15 RelaxedPrecision
                              Decorate 15 DescriptorSet 0
                              Decorate 15 Binding 0
                              Decorate 16 RelaxedPrecision
                              Decorate 21(vs_TEXCOORD1) Location 0
                              Decorate 27 RelaxedPrecision
                              Decorate 28 RelaxedPrecision
                              Decorate 29 RelaxedPrecision
                              Decorate 31(vs_TEXCOORD3) RelaxedPrecision
                              Decorate 31(vs_TEXCOORD3) Location 1
                              Decorate 34 RelaxedPrecision
                              Decorate 35 RelaxedPrecision
                              Decorate 37 RelaxedPrecision
                              Decorate 41 RelaxedPrecision
                              Decorate 56 RelaxedPrecision
                              Decorate 56 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypePointer Private 6(float)
               8:      7(ptr) Variable Private
               9:             TypeImage 6(float) 2D sampled format:Unknown
              10:             TypePointer UniformConstant 9
              11:     10(ptr) Variable UniformConstant
              13:             TypeSampler
              14:             TypePointer UniformConstant 13
              15:     14(ptr) Variable UniformConstant
              17:             TypeSampledImage 9
              19:             TypeVector 6(float) 2
              20:             TypePointer Input 19(fvec2)
21(vs_TEXCOORD1):     20(ptr) Variable Input
              23:             TypeVector 6(float) 4
              25:             TypeInt 32 0
              26:     25(int) Constant 3
              28:      7(ptr) Variable Private
              30:             TypePointer Input 23(fvec4)
31(vs_TEXCOORD3):     30(ptr) Variable Input
              32:             TypePointer Input 6(float)
              36:    6(float) Constant 3204448256
              38:             TypeBool
              39:             TypePointer Private 38(bool)
              40:     39(ptr) Variable Private
              42:    6(float) Constant 0
              45:             TypeInt 32 1
              46:     45(int) Constant 0
              47:     45(int) Constant 1
              49:     45(int) Constant 4294967295
              55:             TypePointer Output 23(fvec4)
              56:     55(ptr) Variable Output
              57:   23(fvec4) ConstantComposite 42 42 42 42
               4:           2 Function None 3
               5:             Label
              12:           9 Load 11
              16:          13 Load 15
              18:          17 SampledImage 12 16
              22:   19(fvec2) Load 21(vs_TEXCOORD1)
              24:   23(fvec4) ImageSampleImplicitLod 18 22
              27:    6(float) CompositeExtract 24 3
                              Store 8 27
              29:    6(float) Load 8
              33:     32(ptr) AccessChain 31(vs_TEXCOORD3) 26
              34:    6(float) Load 33
              35:    6(float) FMul 29 34
              37:    6(float) FAdd 35 36
                              Store 28 37
              41:    6(float) Load 28
              43:    38(bool) FOrdLessThan 41 42
                              Store 40 43
              44:    38(bool) Load 40
              48:     45(int) Select 44 47 46
              50:     45(int) IMul 48 49
              51:    38(bool) INotEqual 50 46
                              SelectionMerge 53 None
                              BranchConditional 51 52 53
              52:               Label
                                Kill
              53:             Label
                              Store 56 57
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SHADOWS_DEPTH 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 41 math, 7 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"

Constant Buffer "UnityLighting" (768 bytes) on slot 0 {
  Vector4 _WorldSpaceLightPos0 at 0
}
Constant Buffer "UnityShadows" (416 bytes) on slot 1 {
  Vector4 unity_LightShadowBias at 80
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 272
}
Constant Buffer "UnityDrawCallInfo" (16 bytes) on slot 3 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// COLOR                    0   xyzw        2     NONE   float       
// TEXCOORD                 0   xy          3     NONE   float       
// SV_InstanceID            0   x           4   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
//
      vs_5_0
      dcl_globalFlags refactoringAllowed
      dcl_constantbuffer CB0[1], immediateIndexed
      dcl_constantbuffer CB1[6], immediateIndexed
      dcl_constantbuffer CB2[21], immediateIndexed
      dcl_constantbuffer CB3[1], immediateIndexed
      dcl_resource_structured t0, 56
      dcl_input v0.xyzw
      dcl_input v1.xyz
      dcl_input_sgv v4.x, instance_id
      dcl_output_siv o0.xyzw, position
      dcl_temps 7
   0: iadd r0.x, v4.x, cb3[0].x
   1: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r1.xyz, r0.x, l(24), t0.yzxx
   2: mov r2.z, r1.y
   3: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r3.xyz, r0.x, l(0), t0.yxzx
   4: mov r2.x, r3.z
   5: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r0.yzw, r0.x, l(12), t0.xxyz
   6: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r4.xyz, r0.x, l(36), t0.xyzx
   7: mov r2.y, r0.w
   8: mov r3.z, r1.x
   9: mov r1.x, r3.y
  10: mov r1.y, r0.y
  11: mov r3.y, r0.z
  12: mul r0.xyz, r2.zxyz, r1.yzxy
  13: mad r0.xyz, r1.zxyz, r2.yzxy, -r0.xyzx
  14: mul r5.xyz, r2.yzxy, r3.zxyz
  15: mad r5.xyz, r3.yzxy, r2.zxyz, -r5.xyzx
  16: dp3 r0.w, r1.xyzx, r5.xyzx
  17: rcp r0.w, r0.w
  18: mul r0.xyz, r0.wwww, r0.xyzx
  19: dp3 r0.y, v1.xyzx, r0.xyzx
  20: mul r6.xyz, r1.zxyz, r3.yzxy
  21: mad r6.xyz, r1.yzxy, r3.zxyz, -r6.xyzx
  22: mul r6.xyz, r0.wwww, r6.xyzx
  23: mul r5.xyz, r0.wwww, r5.xyzx
  24: dp3 r0.x, v1.xyzx, r5.xyzx
  25: dp3 r0.z, v1.xyzx, r6.xyzx
  26: dp3 r0.w, r0.xyzx, r0.xyzx
  27: rsq r0.w, r0.w
  28: mul r0.xyz, r0.wwww, r0.xyzx
  29: mov r1.w, r4.x
  30: dp4 r1.x, r1.xyzw, v0.xyzw
  31: mov r3.w, r4.y
  32: mov r2.w, r4.z
  33: dp4 r1.z, r2.xyzw, v0.xyzw
  34: dp4 r1.y, r3.xyzw, v0.xyzw
  35: mad r2.xyz, -r1.xyzx, cb0[0].wwww, cb0[0].xyzx
  36: dp3 r0.w, r2.xyzx, r2.xyzx
  37: rsq r0.w, r0.w
  38: mul r2.xyz, r0.wwww, r2.xyzx
  39: dp3 r0.w, r0.xyzx, r2.xyzx
  40: mad r0.w, -r0.w, r0.w, l(1.000000)
  41: sqrt r0.w, r0.w
  42: mul r0.w, r0.w, cb1[5].z
  43: mad r0.xyz, -r0.xyzx, r0.wwww, r1.xyzx
  44: ne r0.w, cb1[5].z, l(0.000000)
  45: movc r0.xyz, r0.wwww, r0.xyzx, r1.xyzx
  46: mul r1.xyzw, r0.yyyy, cb2[18].xyzw
  47: mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
  48: mad r0.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
  49: mad r0.xyzw, cb2[20].xyzw, v0.wwww, r0.xyzw
  50: div r1.x, cb1[5].x, r0.w
  51: min r1.x, r1.x, l(0.000000)
  52: max r1.x, r1.x, l(-1.000000)
  53: add r0.z, r0.z, r1.x
  54: min r1.x, r0.w, r0.z
  55: mov o0.xyw, r0.xyxw
  56: add r0.x, -r0.z, r1.x
  57: mad o0.z, cb1[5].y, r0.x, r0.z
  58: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_5_0
      dcl_globalFlags refactoringAllowed
      dcl_output o0.xyzw
   0: mov o0.xyzw, l(0,0,0,0)
   1: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SHADOWS_DEPTH 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Constant Buffer "$Globals" (100 bytes) {
  Matrix4x4 unity_MatrixVP at 32
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  ScalarInt unity_BaseInstanceID at 96
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
float u_xlat14;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat1.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 0]));
    u_xlat2.z = u_xlat1.y;
    u_xlat3.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 2]));
    u_xlat2.x = u_xlat3.z;
    u_xlat7.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 2]));
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 2]));
    u_xlat2.y = u_xlat7.z;
    u_xlat3.z = u_xlat1.x;
    u_xlat1.x = u_xlat3.y;
    u_xlat1.y = u_xlat7.x;
    u_xlat3.y = u_xlat7.y;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat0.xyz);
    u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat5.xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat21 = float(1.0) / float(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.y = dot(in_NORMAL0.xyz, u_xlat0.xyz);
    u_xlat6.xyz = u_xlat1.zxy * u_xlat3.yzx;
    u_xlat6.xyz = u_xlat1.yzx * u_xlat3.zxy + (-u_xlat6.xyz);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat5.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat5.xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, u_xlat6.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat1.w = u_xlat4.x;
    u_xlat1.x = dot(u_xlat1, in_POSITION0);
    u_xlat3.w = u_xlat4.y;
    u_xlat2.w = u_xlat4.z;
    u_xlat1.z = dot(u_xlat2, in_POSITION0);
    u_xlat1.y = dot(u_xlat3, in_POSITION0);
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat21 = (-u_xlat21) * u_xlat21 + 1.0;
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = u_xlat21 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat21) + u_xlat1.xyz;
    u_xlatb21 = unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb21)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat14 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = max((-u_xlat0.w), u_xlat14);
    gl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat14) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat14;
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es

precision highp float;
precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SHADOWS_DEPTH 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"

Constant Buffer "VGlobals" (96 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 32
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_LightShadowBias;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float3 u_xlat4;
    float3 u_xlat5;
    float3 u_xlat6;
    float3 u_xlat7;
    float u_xlat14;
    float u_xlat21;
    bool u_xlatb21;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x18 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x18 >> 2) + 0]));
    u_xlat2.z = u_xlat1.y;
    u_xlat3.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x0 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x0 >> 2) + 2]));
    u_xlat2.x = u_xlat3.z;
    u_xlat7.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0xc >> 2) + 2]));
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x24 >> 2) + 2]));
    u_xlat2.y = u_xlat7.z;
    u_xlat3.z = u_xlat1.x;
    u_xlat1.x = u_xlat3.y;
    u_xlat1.y = u_xlat7.x;
    u_xlat3.y = u_xlat7.y;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat1.yzx;
    u_xlat0.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat0.xyz));
    u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy;
    u_xlat5.xyz = fma(u_xlat3.yzx, u_xlat2.zxy, (-u_xlat5.xyz));
    u_xlat21 = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat21 = float(1.0) / float(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.y = dot(input.NORMAL0.xyz, u_xlat0.xyz);
    u_xlat6.xyz = u_xlat1.zxy * u_xlat3.yzx;
    u_xlat6.xyz = fma(u_xlat1.yzx, u_xlat3.zxy, (-u_xlat6.xyz));
    u_xlat6.xyz = float3(u_xlat21) * u_xlat6.xyz;
    u_xlat5.xyz = float3(u_xlat21) * u_xlat5.xyz;
    u_xlat0.x = dot(input.NORMAL0.xyz, u_xlat5.xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, u_xlat6.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat1.w = u_xlat4.x;
    u_xlat1.x = dot(u_xlat1, input.POSITION0);
    u_xlat3.w = u_xlat4.y;
    u_xlat2.w = u_xlat4.z;
    u_xlat1.z = dot(u_xlat2, input.POSITION0);
    u_xlat1.y = dot(u_xlat3, input.POSITION0);
    u_xlat2.xyz = fma((-u_xlat1.xyz), VGlobals._WorldSpaceLightPos0.www, VGlobals._WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat2.xyz = float3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat21 = fma((-u_xlat21), u_xlat21, 1.0);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = u_xlat21 * VGlobals.unity_LightShadowBias.z;
    u_xlat0.xyz = fma((-u_xlat0.xyz), float3(u_xlat21), u_xlat1.xyz);
    u_xlatb21 = VGlobals.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb21)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], input.POSITION0.wwww, u_xlat0);
    u_xlat1.x = VGlobals.unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = min(u_xlat1.x, 0.0);
    u_xlat1.x = max(u_xlat1.x, -1.0);
    u_xlat14 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = min(u_xlat0.w, u_xlat14);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat14) + u_xlat1.x;
    output.mtl_Position.z = fma(VGlobals.unity_LightShadowBias.y, u_xlat0.x, u_xlat14);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_Target0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SHADOWS_DEPTH 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Constant Buffer "$Globals" (100 bytes) {
  Matrix4x4 unity_MatrixVP at 32
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  ScalarInt unity_BaseInstanceID at 96
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require
#ifdef GL_ARB_shader_storage_buffer_object
#extension GL_ARB_shader_storage_buffer_object : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
float u_xlat14;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat1.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 0]));
    u_xlat2.z = u_xlat1.y;
    u_xlat3.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 2]));
    u_xlat2.x = u_xlat3.z;
    u_xlat7.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 2]));
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 2]));
    u_xlat2.y = u_xlat7.z;
    u_xlat3.z = u_xlat1.x;
    u_xlat1.x = u_xlat3.y;
    u_xlat1.y = u_xlat7.x;
    u_xlat3.y = u_xlat7.y;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat0.xyz);
    u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat5.xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat21 = float(1.0) / float(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.y = dot(in_NORMAL0.xyz, u_xlat0.xyz);
    u_xlat6.xyz = u_xlat1.zxy * u_xlat3.yzx;
    u_xlat6.xyz = u_xlat1.yzx * u_xlat3.zxy + (-u_xlat6.xyz);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat5.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat5.xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, u_xlat6.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat1.w = u_xlat4.x;
    u_xlat1.x = dot(u_xlat1, in_POSITION0);
    u_xlat3.w = u_xlat4.y;
    u_xlat2.w = u_xlat4.z;
    u_xlat1.z = dot(u_xlat2, in_POSITION0);
    u_xlat1.y = dot(u_xlat3, in_POSITION0);
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat21 = (-u_xlat21) * u_xlat21 + 1.0;
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = u_xlat21 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat21) + u_xlat1.xyz;
    u_xlatb21 = unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb21)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat14 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = max((-u_xlat0.w), u_xlat14);
    gl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat14) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat14;
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

layout(location = 0) out vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SHADOWS_DEPTH 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Normal"
Uses vertex data channel "Vertex"

Constant Buffer "UnityDrawCallInfo" (8 bytes) on set: 1, binding: 1, used in: Vertex  {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "VGlobals1413698015" (96 bytes) on set: 1, binding: 0, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 32
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
}

Set Buffer  "unity_ParticleInstanceData" to set: 0, binding: 0, used in: Vertex 
Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 417

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 10 180 236 390
                              Decorate 10 BuiltIn InstanceIndex
                              MemberDecorate 12 0 Offset 0
                              MemberDecorate 12 1 Offset 4
                              Decorate 12 Block
                              Decorate 14 DescriptorSet 1
                              Decorate 14 Binding 1
                              Decorate 26 ArrayStride 4
                              MemberDecorate 27 0 Offset 0
                              Decorate 28 ArrayStride 56
                              MemberDecorate 29 0 NonWritable
                              MemberDecorate 29 0 Offset 0
                              Decorate 29 BufferBlock
                              Decorate 31 DescriptorSet 0
                              Decorate 31 Binding 0
                              Decorate 180 Location 1
                              Decorate 236 Location 0
                              Decorate 258 ArrayStride 16
                              MemberDecorate 259 0 Offset 0
                              MemberDecorate 259 1 Offset 16
                              MemberDecorate 259 2 Offset 32
                              Decorate 259 Block
                              Decorate 261 DescriptorSet 1
                              Decorate 261 Binding 0
                              MemberDecorate 388 0 BuiltIn Position
                              MemberDecorate 388 1 BuiltIn PointSize
                              MemberDecorate 388 2 BuiltIn ClipDistance
                              Decorate 388 Block
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeInt 32 1
               7:             TypePointer Private 6(int)
               8:      7(ptr) Variable Private
               9:             TypePointer Input 6(int)
              10:      9(ptr) Variable Input
              12:             TypeStruct 6(int) 6(int)
              13:             TypePointer Uniform 12(struct)
              14:     13(ptr) Variable Uniform
              15:      6(int) Constant 0
              16:             TypePointer Uniform 6(int)
              20:             TypeFloat 32
              21:             TypeVector 20(float) 4
              22:             TypePointer Private 21(fvec4)
              23:     22(ptr) Variable Private
              24:             TypeInt 32 0
              25:     24(int) Constant 14
              26:             TypeArray 24(int) 25
              27:             TypeStruct 26
              28:             TypeRuntimeArray 27(struct)
              29:             TypeStruct 28
              30:             TypePointer Uniform 29(struct)
              31:     30(ptr) Variable Uniform
              33:      6(int) Constant 7
              34:             TypePointer Uniform 24(int)
              39:      6(int) Constant 8
              44:      6(int) Constant 6
              48:             TypeVector 20(float) 3
              52:     22(ptr) Variable Private
              53:     24(int) Constant 1
              54:             TypePointer Private 20(float)
              57:     24(int) Constant 2
              59:     22(ptr) Variable Private
              61:      6(int) Constant 1
              70:      6(int) Constant 2
              79:     24(int) Constant 0
              81:             TypePointer Private 48(fvec3)
              82:     81(ptr) Variable Private
              84:      6(int) Constant 3
              89:      6(int) Constant 4
              94:      6(int) Constant 5
              99:     81(ptr) Variable Private
             101:      6(int) Constant 9
             106:      6(int) Constant 10
             111:      6(int) Constant 11
             131:     22(ptr) Variable Private
             150:     81(ptr) Variable Private
             164:     54(ptr) Variable Private
             169:   20(float) Constant 1065353216
             179:             TypePointer Input 48(fvec3)
             180:    179(ptr) Variable Input
             186:     81(ptr) Variable Private
             232:     24(int) Constant 3
             235:             TypePointer Input 21(fvec4)
             236:    235(ptr) Variable Input
             257:     24(int) Constant 4
             258:             TypeArray 21(fvec4) 257
             259:             TypeStruct 21(fvec4) 21(fvec4) 258
             260:             TypePointer Uniform 259(struct)
             261:    260(ptr) Variable Uniform
             262:             TypePointer Uniform 21(fvec4)
             300:             TypePointer Uniform 20(float)
             315:             TypeBool
             316:             TypePointer Private 315(bool)
             317:    316(ptr) Variable Private
             320:   20(float) Constant 0
             323:             TypePointer Function 48(fvec3)
             373:   20(float) Constant 3212836864
             376:     54(ptr) Variable Private
             387:             TypeArray 20(float) 53
             388:             TypeStruct 21(fvec4) 20(float) 387
             389:             TypePointer Output 388(struct)
             390:    389(ptr) Variable Output
             393:             TypePointer Output 21(fvec4)
             410:             TypePointer Output 20(float)
               4:           2 Function None 3
               5:             Label
             324:    323(ptr) Variable Function
              11:      6(int) Load 10
              17:     16(ptr) AccessChain 14 15
              18:      6(int) Load 17
              19:      6(int) IAdd 11 18
                              Store 8 19
              32:      6(int) Load 8
              35:     34(ptr) AccessChain 31 15 32 15 33
              36:     24(int) Load 35
              37:   20(float) Bitcast 36
              38:      6(int) Load 8
              40:     34(ptr) AccessChain 31 15 38 15 39
              41:     24(int) Load 40
              42:   20(float) Bitcast 41
              43:      6(int) Load 8
              45:     34(ptr) AccessChain 31 15 43 15 44
              46:     24(int) Load 45
              47:   20(float) Bitcast 46
              49:   48(fvec3) CompositeConstruct 37 42 47
              50:   21(fvec4) Load 23
              51:   21(fvec4) VectorShuffle 50 49 4 5 6 3
                              Store 23 51
              55:     54(ptr) AccessChain 23 53
              56:   20(float) Load 55
              58:     54(ptr) AccessChain 52 57
                              Store 58 56
              60:      6(int) Load 8
              62:     34(ptr) AccessChain 31 15 60 15 61
              63:     24(int) Load 62
              64:   20(float) Bitcast 63
              65:      6(int) Load 8
              66:     34(ptr) AccessChain 31 15 65 15 15
              67:     24(int) Load 66
              68:   20(float) Bitcast 67
              69:      6(int) Load 8
              71:     34(ptr) AccessChain 31 15 69 15 70
              72:     24(int) Load 71
              73:   20(float) Bitcast 72
              74:   48(fvec3) CompositeConstruct 64 68 73
              75:   21(fvec4) Load 59
              76:   21(fvec4) VectorShuffle 75 74 4 5 6 3
                              Store 59 76
              77:     54(ptr) AccessChain 59 57
              78:   20(float) Load 77
              80:     54(ptr) AccessChain 52 79
                              Store 80 78
              83:      6(int) Load 8
              85:     34(ptr) AccessChain 31 15 83 15 84
              86:     24(int) Load 85
              87:   20(float) Bitcast 86
              88:      6(int) Load 8
              90:     34(ptr) AccessChain 31 15 88 15 89
              91:     24(int) Load 90
              92:   20(float) Bitcast 91
              93:      6(int) Load 8
              95:     34(ptr) AccessChain 31 15 93 15 94
              96:     24(int) Load 95
              97:   20(float) Bitcast 96
              98:   48(fvec3) CompositeConstruct 87 92 97
                              Store 82 98
             100:      6(int) Load 8
             102:     34(ptr) AccessChain 31 15 100 15 101
             103:     24(int) Load 102
             104:   20(float) Bitcast 103
             105:      6(int) Load 8
             107:     34(ptr) AccessChain 31 15 105 15 106
             108:     24(int) Load 107
             109:   20(float) Bitcast 108
             110:      6(int) Load 8
             112:     34(ptr) AccessChain 31 15 110 15 111
             113:     24(int) Load 112
             114:   20(float) Bitcast 113
             115:   48(fvec3) CompositeConstruct 104 109 114
                              Store 99 115
             116:     54(ptr) AccessChain 82 57
             117:   20(float) Load 116
             118:     54(ptr) AccessChain 52 53
                              Store 118 117
             119:     54(ptr) AccessChain 23 79
             120:   20(float) Load 119
             121:     54(ptr) AccessChain 59 57
                              Store 121 120
             122:     54(ptr) AccessChain 59 53
             123:   20(float) Load 122
             124:     54(ptr) AccessChain 23 79
                              Store 124 123
             125:     54(ptr) AccessChain 82 79
             126:   20(float) Load 125
             127:     54(ptr) AccessChain 23 53
                              Store 127 126
             128:     54(ptr) AccessChain 82 53
             129:   20(float) Load 128
             130:     54(ptr) AccessChain 59 53
                              Store 130 129
             132:   21(fvec4) Load 52
             133:   48(fvec3) VectorShuffle 132 132 2 0 1
             134:   21(fvec4) Load 23
             135:   48(fvec3) VectorShuffle 134 134 1 2 0
             136:   48(fvec3) FMul 133 135
             137:   21(fvec4) Load 131
             138:   21(fvec4) VectorShuffle 137 136 4 5 6 3
                              Store 131 138
             139:   21(fvec4) Load 23
             140:   48(fvec3) VectorShuffle 139 139 2 0 1
             141:   21(fvec4) Load 52
             142:   48(fvec3) VectorShuffle 141 141 1 2 0
             143:   48(fvec3) FMul 140 142
             144:   21(fvec4) Load 131
             145:   48(fvec3) VectorShuffle 144 144 0 1 2
             146:   48(fvec3) FNegate 145
             147:   48(fvec3) FAdd 143 146
             148:   21(fvec4) Load 131
             149:   21(fvec4) VectorShuffle 148 147 4 5 6 3
                              Store 131 149
             151:   21(fvec4) Load 52
             152:   48(fvec3) VectorShuffle 151 151 1 2 0
             153:   21(fvec4) Load 59
             154:   48(fvec3) VectorShuffle 153 153 2 0 1
             155:   48(fvec3) FMul 152 154
                              Store 150 155
             156:   21(fvec4) Load 59
             157:   48(fvec3) VectorShuffle 156 156 1 2 0
             158:   21(fvec4) Load 52
             159:   48(fvec3) VectorShuffle 158 158 2 0 1
             160:   48(fvec3) FMul 157 159
             161:   48(fvec3) Load 150
             162:   48(fvec3) FNegate 161
             163:   48(fvec3) FAdd 160 162
                              Store 150 163
             165:   21(fvec4) Load 23
             166:   48(fvec3) VectorShuffle 165 165 0 1 2
             167:   48(fvec3) Load 150
             168:   20(float) Dot 166 167
                              Store 164 168
             170:   20(float) Load 164
             171:   20(float) FDiv 169 170
                              Store 164 171
             172:   20(float) Load 164
             173:   48(fvec3) CompositeConstruct 172 172 172
             174:   21(fvec4) Load 131
             175:   48(fvec3) VectorShuffle 174 174 0 1 2
             176:   48(fvec3) FMul 173 175
             177:   21(fvec4) Load 131
             178:   21(fvec4) VectorShuffle 177 176 4 5 6 3
                              Store 131 178
             181:   48(fvec3) Load 180
             182:   21(fvec4) Load 131
             183:   48(fvec3) VectorShuffle 182 182 0 1 2
             184:   20(float) Dot 181 183
             185:     54(ptr) AccessChain 131 53
                              Store 185 184
             187:   21(fvec4) Load 23
             188:   48(fvec3) VectorShuffle 187 187 2 0 1
             189:   21(fvec4) Load 59
             190:   48(fvec3) VectorShuffle 189 189 1 2 0
             191:   48(fvec3) FMul 188 190
                              Store 186 191
             192:   21(fvec4) Load 23
             193:   48(fvec3) VectorShuffle 192 192 1 2 0
             194:   21(fvec4) Load 59
             195:   48(fvec3) VectorShuffle 194 194 2 0 1
             196:   48(fvec3) FMul 193 195
             197:   48(fvec3) Load 186
             198:   48(fvec3) FNegate 197
             199:   48(fvec3) FAdd 196 198
                              Store 186 199
             200:   20(float) Load 164
             201:   48(fvec3) CompositeConstruct 200 200 200
             202:   48(fvec3) Load 186
             203:   48(fvec3) FMul 201 202
                              Store 186 203
             204:   20(float) Load 164
             205:   48(fvec3) CompositeConstruct 204 204 204
             206:   48(fvec3) Load 150
             207:   48(fvec3) FMul 205 206
                              Store 150 207
             208:   48(fvec3) Load 180
             209:   48(fvec3) Load 150
             210:   20(float) Dot 208 209
             211:     54(ptr) AccessChain 131 79
                              Store 211 210
             212:   48(fvec3) Load 180
             213:   48(fvec3) Load 186
             214:   20(float) Dot 212 213
             215:     54(ptr) AccessChain 131 57
                              Store 215 214
             216:   21(fvec4) Load 131
             217:   48(fvec3) VectorShuffle 216 216 0 1 2
             218:   21(fvec4) Load 131
             219:   48(fvec3) VectorShuffle 218 218 0 1 2
             220:   20(float) Dot 217 219
                              Store 164 220
             221:   20(float) Load 164
             222:   20(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 221
                              Store 164 222
             223:   20(float) Load 164
             224:   48(fvec3) CompositeConstruct 223 223 223
             225:   21(fvec4) Load 131
             226:   48(fvec3) VectorShuffle 225 225 0 1 2
             227:   48(fvec3) FMul 224 226
             228:   21(fvec4) Load 131
             229:   21(fvec4) VectorShuffle 228 227 4 5 6 3
                              Store 131 229
             230:     54(ptr) AccessChain 99 79
             231:   20(float) Load 230
             233:     54(ptr) AccessChain 23 232
                              Store 233 231
             234:   21(fvec4) Load 23
             237:   21(fvec4) Load 236
             238:   20(float) Dot 234 237
             239:     54(ptr) AccessChain 23 79
                              Store 239 238
             240:     54(ptr) AccessChain 99 53
             241:   20(float) Load 240
             242:     54(ptr) AccessChain 59 232
                              Store 242 241
             243:     54(ptr) AccessChain 99 57
             244:   20(float) Load 243
             245:     54(ptr) AccessChain 52 232
                              Store 245 244
             246:   21(fvec4) Load 52
             247:   21(fvec4) Load 236
             248:   20(float) Dot 246 247
             249:     54(ptr) AccessChain 23 57
                              Store 249 248
             250:   21(fvec4) Load 59
             251:   21(fvec4) Load 236
             252:   20(float) Dot 250 251
             253:     54(ptr) AccessChain 23 53
                              Store 253 252
             254:   21(fvec4) Load 23
             255:   48(fvec3) VectorShuffle 254 254 0 1 2
             256:   48(fvec3) FNegate 255
             263:    262(ptr) AccessChain 261 15
             264:   21(fvec4) Load 263
             265:   48(fvec3) VectorShuffle 264 264 3 3 3
             266:   48(fvec3) FMul 256 265
             267:    262(ptr) AccessChain 261 15
             268:   21(fvec4) Load 267
             269:   48(fvec3) VectorShuffle 268 268 0 1 2
             270:   48(fvec3) FAdd 266 269
             271:   21(fvec4) Load 52
             272:   21(fvec4) VectorShuffle 271 270 4 5 6 3
                              Store 52 272
             273:   21(fvec4) Load 52
             274:   48(fvec3) VectorShuffle 273 273 0 1 2
             275:   21(fvec4) Load 52
             276:   48(fvec3) VectorShuffle 275 275 0 1 2
             277:   20(float) Dot 274 276
                              Store 164 277
             278:   20(float) Load 164
             279:   20(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 278
                              Store 164 279
             280:   20(float) Load 164
             281:   48(fvec3) CompositeConstruct 280 280 280
             282:   21(fvec4) Load 52
             283:   48(fvec3) VectorShuffle 282 282 0 1 2
             284:   48(fvec3) FMul 281 283
             285:   21(fvec4) Load 52
             286:   21(fvec4) VectorShuffle 285 284 4 5 6 3
                              Store 52 286
             287:   21(fvec4) Load 131
             288:   48(fvec3) VectorShuffle 287 287 0 1 2
             289:   21(fvec4) Load 52
             290:   48(fvec3) VectorShuffle 289 289 0 1 2
             291:   20(float) Dot 288 290
                              Store 164 291
             292:   20(float) Load 164
             293:   20(float) FNegate 292
             294:   20(float) Load 164
             295:   20(float) FMul 293 294
             296:   20(float) FAdd 295 169
                              Store 164 296
             297:   20(float) Load 164
             298:   20(float) ExtInst 1(GLSL.std.450) 31(Sqrt) 297
                              Store 164 298
             299:   20(float) Load 164
             301:    300(ptr) AccessChain 261 61 57
             302:   20(float) Load 301
             303:   20(float) FMul 299 302
                              Store 164 303
             304:   21(fvec4) Load 131
             305:   48(fvec3) VectorShuffle 304 304 0 1 2
             306:   48(fvec3) FNegate 305
             307:   20(float) Load 164
             308:   48(fvec3) CompositeConstruct 307 307 307
             309:   48(fvec3) FMul 306 308
             310:   21(fvec4) Load 23
             311:   48(fvec3) VectorShuffle 310 310 0 1 2
             312:   48(fvec3) FAdd 309 311
             313:   21(fvec4) Load 131
             314:   21(fvec4) VectorShuffle 313 312 4 5 6 3
                              Store 131 314
             318:    300(ptr) AccessChain 261 61 57
             319:   20(float) Load 318
             321:   315(bool) FOrdNotEqual 319 320
                              Store 317 321
             322:   315(bool) Load 317
                              SelectionMerge 326 None
                              BranchConditional 322 325 329
             325:               Label
             327:   21(fvec4)   Load 131
             328:   48(fvec3)   VectorShuffle 327 327 0 1 2
                                Store 324 328
                                Branch 326
             329:               Label
             330:   21(fvec4)   Load 23
             331:   48(fvec3)   VectorShuffle 330 330 0 1 2
                                Store 324 331
                                Branch 326
             326:             Label
             332:   48(fvec3) Load 324
             333:   21(fvec4) Load 131
             334:   21(fvec4) VectorShuffle 333 332 4 5 6 3
                              Store 131 334
             335:   21(fvec4) Load 131
             336:   21(fvec4) VectorShuffle 335 335 1 1 1 1
             337:    262(ptr) AccessChain 261 70 61
             338:   21(fvec4) Load 337
             339:   21(fvec4) FMul 336 338
                              Store 23 339
             340:    262(ptr) AccessChain 261 70 15
             341:   21(fvec4) Load 340
             342:   21(fvec4) Load 131
             343:   21(fvec4) VectorShuffle 342 342 0 0 0 0
             344:   21(fvec4) FMul 341 343
             345:   21(fvec4) Load 23
             346:   21(fvec4) FAdd 344 345
                              Store 23 346
             347:    262(ptr) AccessChain 261 70 70
             348:   21(fvec4) Load 347
             349:   21(fvec4) Load 131
             350:   21(fvec4) VectorShuffle 349 349 2 2 2 2
             351:   21(fvec4) FMul 348 350
             352:   21(fvec4) Load 23
             353:   21(fvec4) FAdd 351 352
                              Store 131 353
             354:    262(ptr) AccessChain 261 70 84
             355:   21(fvec4) Load 354
             356:   21(fvec4) Load 236
             357:   21(fvec4) VectorShuffle 356 356 3 3 3 3
             358:   21(fvec4) FMul 355 357
             359:   21(fvec4) Load 131
             360:   21(fvec4) FAdd 358 359
                              Store 131 360
             361:    300(ptr) AccessChain 261 61 79
             362:   20(float) Load 361
             363:     54(ptr) AccessChain 131 232
             364:   20(float) Load 363
             365:   20(float) FDiv 362 364
             366:     54(ptr) AccessChain 23 79
                              Store 366 365
             367:     54(ptr) AccessChain 23 79
             368:   20(float) Load 367
             369:   20(float) ExtInst 1(GLSL.std.450) 37(FMin) 368 320
             370:     54(ptr) AccessChain 23 79
                              Store 370 369
             371:     54(ptr) AccessChain 23 79
             372:   20(float) Load 371
             374:   20(float) ExtInst 1(GLSL.std.450) 40(FMax) 372 373
             375:     54(ptr) AccessChain 23 79
                              Store 375 374
             377:     54(ptr) AccessChain 131 57
             378:   20(float) Load 377
             379:     54(ptr) AccessChain 23 79
             380:   20(float) Load 379
             381:   20(float) FAdd 378 380
                              Store 376 381
             382:     54(ptr) AccessChain 131 232
             383:   20(float) Load 382
             384:   20(float) Load 376
             385:   20(float) ExtInst 1(GLSL.std.450) 37(FMin) 383 384
             386:     54(ptr) AccessChain 23 79
                              Store 386 385
             391:   21(fvec4) Load 131
             392:   48(fvec3) VectorShuffle 391 391 0 1 3
             394:    393(ptr) AccessChain 390 15
             395:   21(fvec4) Load 394
             396:   21(fvec4) VectorShuffle 395 392 4 5 2 6
                              Store 394 396
             397:   20(float) Load 376
             398:   20(float) FNegate 397
             399:     54(ptr) AccessChain 23 79
             400:   20(float) Load 399
             401:   20(float) FAdd 398 400
             402:     54(ptr) AccessChain 131 79
                              Store 402 401
             403:    300(ptr) AccessChain 261 61 53
             404:   20(float) Load 403
             405:     54(ptr) AccessChain 131 79
             406:   20(float) Load 405
             407:   20(float) FMul 404 406
             408:   20(float) Load 376
             409:   20(float) FAdd 407 408
             411:    410(ptr) AccessChain 390 15 57
                              Store 411 409
             412:    410(ptr) AccessChain 390 15 53
             413:   20(float) Load 412
             414:   20(float) FNegate 413
             415:    410(ptr) AccessChain 390 15 53
                              Store 415 414
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 13

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 9
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 9 RelaxedPrecision
                              Decorate 9 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Output 7(fvec4)
               9:      8(ptr) Variable Output
              10:    6(float) Constant 0
              11:    7(fvec4) ConstantComposite 10 10 10 10
               4:           2 Function None 3
               5:             Label
                              Store 9 11
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SHADOWS_CUBE 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 48 math, 7 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "$Globals" (96 bytes) on slot 0 {
  Vector4 unity_ParticleUVShiftData at 32
  Vector4 _MainTex_ST at 64
}
Constant Buffer "UnityLighting" (768 bytes) on slot 1 {
  Vector4 _WorldSpaceLightPos0 at 0
}
Constant Buffer "UnityShadows" (416 bytes) on slot 2 {
  Vector4 unity_LightShadowBias at 80
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 3 {
  Matrix4x4 unity_MatrixVP at 272
}
Constant Buffer "UnityDrawCallInfo" (16 bytes) on slot 4 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
// SV_InstanceID            0   x           4   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 1   xy          0     NONE   float   xy  
// TEXCOORD                 3   xyzw        1     NONE   float   xyzw
// SV_POSITION              0   xyzw        2      POS   float   xyzw
//
      vs_5_0
      dcl_globalFlags refactoringAllowed
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_constantbuffer CB1[1], immediateIndexed
      dcl_constantbuffer CB2[6], immediateIndexed
      dcl_constantbuffer CB3[21], immediateIndexed
      dcl_constantbuffer CB4[1], immediateIndexed
      dcl_resource_structured t0, 56
      dcl_input v0.xyzw
      dcl_input v1.xyz
      dcl_input v2.xyzw
      dcl_input v3.xy
      dcl_input_sgv v4.x, instance_id
      dcl_output o0.xy
      dcl_output o1.xyzw
      dcl_output_siv o2.xyzw, position
      dcl_temps 7
   0: iadd r0.x, v4.x, cb4[0].x
   1: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r0.y, r0.x, l(52), t0.xxxx
   2: round_ni r0.y, r0.y
   3: div r0.z, r0.y, cb0[2].y
   4: round_ni r0.z, r0.z
   5: mad r0.y, -r0.z, cb0[2].y, r0.y
   6: round_ni r0.y, r0.y
   7: mul r1.x, r0.y, cb0[2].z
   8: add r0.y, -cb0[2].w, l(1.000000)
   9: mad r1.y, -r0.z, cb0[2].w, r0.y
  10: mad r0.yz, v3.xxyx, cb0[2].zzwz, r1.xxyx
  11: ne r0.w, cb0[2].x, l(0.000000)
  12: movc r0.yz, r0.wwww, r0.yyzy, v3.xxyx
  13: mad o0.xy, r0.yzyy, cb0[4].xyxx, cb0[4].zwzz
  14: mov o1.xyzw, v2.xyzw
  15: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r1.xyz, r0.x, l(24), t0.yzxx
  16: mov r2.z, r1.y
  17: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r3.xyz, r0.x, l(0), t0.yxzx
  18: mov r2.x, r3.z
  19: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r0.yzw, r0.x, l(12), t0.xxyz
  20: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r4.xyz, r0.x, l(36), t0.xyzx
  21: mov r2.y, r0.w
  22: mov r3.z, r1.x
  23: mov r1.x, r3.y
  24: mov r1.y, r0.y
  25: mov r3.y, r0.z
  26: mul r0.xyz, r2.zxyz, r1.yzxy
  27: mad r0.xyz, r1.zxyz, r2.yzxy, -r0.xyzx
  28: mul r5.xyz, r2.yzxy, r3.zxyz
  29: mad r5.xyz, r3.yzxy, r2.zxyz, -r5.xyzx
  30: dp3 r0.w, r1.xyzx, r5.xyzx
  31: rcp r0.w, r0.w
  32: mul r0.xyz, r0.wwww, r0.xyzx
  33: dp3 r0.y, v1.xyzx, r0.xyzx
  34: mul r6.xyz, r1.zxyz, r3.yzxy
  35: mad r6.xyz, r1.yzxy, r3.zxyz, -r6.xyzx
  36: mul r6.xyz, r0.wwww, r6.xyzx
  37: mul r5.xyz, r0.wwww, r5.xyzx
  38: dp3 r0.x, v1.xyzx, r5.xyzx
  39: dp3 r0.z, v1.xyzx, r6.xyzx
  40: dp3 r0.w, r0.xyzx, r0.xyzx
  41: rsq r0.w, r0.w
  42: mul r0.xyz, r0.wwww, r0.xyzx
  43: mov r1.w, r4.x
  44: dp4 r1.x, r1.xyzw, v0.xyzw
  45: mov r3.w, r4.y
  46: mov r2.w, r4.z
  47: dp4 r1.z, r2.xyzw, v0.xyzw
  48: dp4 r1.y, r3.xyzw, v0.xyzw
  49: mad r2.xyz, -r1.xyzx, cb1[0].wwww, cb1[0].xyzx
  50: dp3 r0.w, r2.xyzx, r2.xyzx
  51: rsq r0.w, r0.w
  52: mul r2.xyz, r0.wwww, r2.xyzx
  53: dp3 r0.w, r0.xyzx, r2.xyzx
  54: mad r0.w, -r0.w, r0.w, l(1.000000)
  55: sqrt r0.w, r0.w
  56: mul r0.w, r0.w, cb2[5].z
  57: mad r0.xyz, -r0.xyzx, r0.wwww, r1.xyzx
  58: ne r0.w, cb2[5].z, l(0.000000)
  59: movc r0.xyz, r0.wwww, r0.xyzx, r1.xyzx
  60: mul r1.xyzw, r0.yyyy, cb3[18].xyzw
  61: mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
  62: mad r0.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
  63: mad r0.xyzw, cb3[20].xyzw, v0.wwww, r0.xyzw
  64: min r1.x, r0.w, r0.z
  65: add r1.x, -r0.z, r1.x
  66: mad o2.z, cb2[5].y, r1.x, r0.z
  67: mov o2.xyw, r0.xyxw
  68: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 5 math, 1 temp registers, 2 textures
Set 2D Texture "_MainTex" to slot 0
Set 3D Texture "_DitherMaskLOD" to slot 1

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 1   xy          0     NONE   float   xy  
// TEXCOORD                 3   xyzw        1     NONE   float      w
// SV_Position              0   xyzw        2      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_5_0
      dcl_globalFlags refactoringAllowed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture3d (float,float,float,float) t1
      dcl_input_ps linear v0.xy
      dcl_input_ps linear v1.w
      dcl_input_ps_siv linear noperspective v2.xy, position
      dcl_output o0.xyzw
      dcl_temps 1
   0: sample_indexable(texture2d)(float,float,float,float) r0.x, v0.xyxx, t0.wxyz, s0
   1: mul r0.x, r0.x, v1.w
   2: mul r0.z, r0.x, l(0.937500)
   3: mul r0.xy, v2.xyxx, l(0.250000, 0.250000, 0.000000, 0.000000)
   4: sample_indexable(texture3d)(float,float,float,float) r0.x, r0.xyzx, t1.wxyz, s1
   5: add r0.x, r0.x, l(-0.010000)
   6: lt r0.x, r0.x, l(0.000000)
   7: discard_nz r0.x
   8: mov o0.xyzw, l(0,0,0,0)
   9: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SHADOWS_CUBE 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Set 2D Texture "_MainTex" to slot 0
Set 3D Texture "_DitherMaskLOD" to slot 1

Constant Buffer "$Globals" (144 bytes) {
  Matrix4x4 unity_MatrixVP at 32
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  ScalarInt unity_BaseInstanceID at 96
  Vector4 unity_ParticleUVShiftData at 112
  Vector4 _MainTex_ST at 128
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	vec4 _MainTex_ST;
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
layout(location = 0) out highp vec2 vs_TEXCOORD1;
layout(location = 1) out mediump vec4 vs_TEXCOORD3;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
float u_xlat14;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat7.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(52 >> 2) + 0]);
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat14 = u_xlat7.x / unity_ParticleUVShiftData.y;
    u_xlat14 = floor(u_xlat14);
    u_xlat7.x = (-u_xlat14) * unity_ParticleUVShiftData.y + u_xlat7.x;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat1.x = u_xlat7.x * unity_ParticleUVShiftData.z;
    u_xlat7.x = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat14) * unity_ParticleUVShiftData.w + u_xlat7.x;
    u_xlat7.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb21 = unity_ParticleUVShiftData.x!=0.0;
    u_xlat7.xy = (bool(u_xlatb21)) ? u_xlat7.xy : in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = u_xlat7.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3 = in_COLOR0;
    u_xlat1.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 0]));
    u_xlat2.z = u_xlat1.y;
    u_xlat3.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 2]));
    u_xlat2.x = u_xlat3.z;
    u_xlat7.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 2]));
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 2]));
    u_xlat2.y = u_xlat7.z;
    u_xlat3.z = u_xlat1.x;
    u_xlat1.x = u_xlat3.y;
    u_xlat1.y = u_xlat7.x;
    u_xlat3.y = u_xlat7.y;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat0.xyz);
    u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat5.xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat21 = float(1.0) / float(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.y = dot(in_NORMAL0.xyz, u_xlat0.xyz);
    u_xlat6.xyz = u_xlat1.zxy * u_xlat3.yzx;
    u_xlat6.xyz = u_xlat1.yzx * u_xlat3.zxy + (-u_xlat6.xyz);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat5.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat5.xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, u_xlat6.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat1.w = u_xlat4.x;
    u_xlat1.x = dot(u_xlat1, in_POSITION0);
    u_xlat3.w = u_xlat4.y;
    u_xlat2.w = u_xlat4.z;
    u_xlat1.z = dot(u_xlat2, in_POSITION0);
    u_xlat1.y = dot(u_xlat3, in_POSITION0);
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat21 = (-u_xlat21) * u_xlat21 + 1.0;
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = u_xlat21 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat21) + u_xlat1.xyz;
    u_xlatb21 = unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb21)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.x = max((-u_xlat0.w), u_xlat0.z);
    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler3D _DitherMaskLOD;
layout(location = 0) in highp vec2 vs_TEXCOORD1;
layout(location = 1) in mediump vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_1;
mediump float u_xlat16_2;
mediump float u_xlat16_7;
void main()
{
vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    u_xlat16_1 = u_xlat16_0 * vs_TEXCOORD3.w;
    u_xlat16_7 = u_xlat16_1 * 0.9375;
    u_xlat1.z = u_xlat16_7;
    u_xlat1.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
    u_xlat16_0 = texture(_DitherMaskLOD, u_xlat1.xyz).w;
    u_xlat16_2 = u_xlat16_0 + -0.00999999978;
    u_xlatb0 = u_xlat16_2<0.0;
    if(u_xlatb0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SHADOWS_CUBE 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (128 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 32
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  Vector4 unity_ParticleUVShiftData at 96
  Vector4 _MainTex_ST at 112
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_LightShadowBias;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 mtl_Position [[ position ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float3 u_xlat4;
    float3 u_xlat5;
    float3 u_xlat6;
    float3 u_xlat7;
    float u_xlat14;
    float u_xlat21;
    bool u_xlatb21;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat7.x = as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x34 >> 2) + 0]);
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat14 = u_xlat7.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat14 = floor(u_xlat14);
    u_xlat7.x = fma((-u_xlat14), VGlobals.unity_ParticleUVShiftData.y, u_xlat7.x);
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat1.x = u_xlat7.x * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat7.x = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = fma((-u_xlat14), VGlobals.unity_ParticleUVShiftData.w, u_xlat7.x);
    u_xlat7.xy = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat1.xy);
    u_xlatb21 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat7.xy = (bool(u_xlatb21)) ? u_xlat7.xy : input.TEXCOORD0.xy;
    output.TEXCOORD1.xy = fma(u_xlat7.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD3 = input.COLOR0;
    u_xlat1.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x18 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x18 >> 2) + 0]));
    u_xlat2.z = u_xlat1.y;
    u_xlat3.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x0 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x0 >> 2) + 2]));
    u_xlat2.x = u_xlat3.z;
    u_xlat7.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0xc >> 2) + 2]));
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x24 >> 2) + 2]));
    u_xlat2.y = u_xlat7.z;
    u_xlat3.z = u_xlat1.x;
    u_xlat1.x = u_xlat3.y;
    u_xlat1.y = u_xlat7.x;
    u_xlat3.y = u_xlat7.y;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat1.yzx;
    u_xlat0.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat0.xyz));
    u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy;
    u_xlat5.xyz = fma(u_xlat3.yzx, u_xlat2.zxy, (-u_xlat5.xyz));
    u_xlat21 = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat21 = float(1.0) / float(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.y = dot(input.NORMAL0.xyz, u_xlat0.xyz);
    u_xlat6.xyz = u_xlat1.zxy * u_xlat3.yzx;
    u_xlat6.xyz = fma(u_xlat1.yzx, u_xlat3.zxy, (-u_xlat6.xyz));
    u_xlat6.xyz = float3(u_xlat21) * u_xlat6.xyz;
    u_xlat5.xyz = float3(u_xlat21) * u_xlat5.xyz;
    u_xlat0.x = dot(input.NORMAL0.xyz, u_xlat5.xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, u_xlat6.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat1.w = u_xlat4.x;
    u_xlat1.x = dot(u_xlat1, input.POSITION0);
    u_xlat3.w = u_xlat4.y;
    u_xlat2.w = u_xlat4.z;
    u_xlat1.z = dot(u_xlat2, input.POSITION0);
    u_xlat1.y = dot(u_xlat3, input.POSITION0);
    u_xlat2.xyz = fma((-u_xlat1.xyz), VGlobals._WorldSpaceLightPos0.www, VGlobals._WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat2.xyz = float3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat21 = fma((-u_xlat21), u_xlat21, 1.0);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = u_xlat21 * VGlobals.unity_LightShadowBias.z;
    u_xlat0.xyz = fma((-u_xlat0.xyz), float3(u_xlat21), u_xlat1.xyz);
    u_xlatb21 = VGlobals.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb21)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], input.POSITION0.wwww, u_xlat0);
    u_xlat1.x = min(u_xlat0.w, u_xlat0.z);
    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
    output.mtl_Position.z = fma(VGlobals.unity_LightShadowBias.y, u_xlat1.x, u_xlat0.z);
    output.mtl_Position.xyw = u_xlat0.xyw;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 3D Texture "_DitherMaskLOD" to slot 1

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_DitherMaskLOD [[ sampler (1) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture3d<float, access::sample > _DitherMaskLOD [[ texture(1) ]] ,
    float4 mtl_FragCoord [[ position ]],
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 hlslcc_FragCoord = float4(mtl_FragCoord.xyz, 1.0/mtl_FragCoord.w);
    float3 u_xlat0;
    bool u_xlatb0;
    u_xlat0.x = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).w;
    u_xlat0.x = u_xlat0.x * input.TEXCOORD3.w;
    u_xlat0.z = u_xlat0.x * 0.9375;
    u_xlat0.xy = hlslcc_FragCoord.xy * float2(0.25, 0.25);
    u_xlat0.x = _DitherMaskLOD.sample(sampler_DitherMaskLOD, u_xlat0.xyz).w;
    u_xlat0.x = u_xlat0.x + -0.00999999978;
    u_xlatb0 = u_xlat0.x<0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    output.SV_Target0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SHADOWS_CUBE 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Set 2D Texture "_MainTex" to slot 0
Set 3D Texture "_DitherMaskLOD" to slot 1

Constant Buffer "$Globals" (144 bytes) {
  Matrix4x4 unity_MatrixVP at 32
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  ScalarInt unity_BaseInstanceID at 96
  Vector4 unity_ParticleUVShiftData at 112
  Vector4 _MainTex_ST at 128
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require
#ifdef GL_ARB_shader_storage_buffer_object
#extension GL_ARB_shader_storage_buffer_object : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	vec4 _MainTex_ST;
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
layout(location = 0) out vec2 vs_TEXCOORD1;
layout(location = 1) out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
float u_xlat14;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat7.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(52 >> 2) + 0]);
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat14 = u_xlat7.x / unity_ParticleUVShiftData.y;
    u_xlat14 = floor(u_xlat14);
    u_xlat7.x = (-u_xlat14) * unity_ParticleUVShiftData.y + u_xlat7.x;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat1.x = u_xlat7.x * unity_ParticleUVShiftData.z;
    u_xlat7.x = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat14) * unity_ParticleUVShiftData.w + u_xlat7.x;
    u_xlat7.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb21 = unity_ParticleUVShiftData.x!=0.0;
    u_xlat7.xy = (bool(u_xlatb21)) ? u_xlat7.xy : in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = u_xlat7.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3 = in_COLOR0;
    u_xlat1.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 0]));
    u_xlat2.z = u_xlat1.y;
    u_xlat3.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 2]));
    u_xlat2.x = u_xlat3.z;
    u_xlat7.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 2]));
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 2]));
    u_xlat2.y = u_xlat7.z;
    u_xlat3.z = u_xlat1.x;
    u_xlat1.x = u_xlat3.y;
    u_xlat1.y = u_xlat7.x;
    u_xlat3.y = u_xlat7.y;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat0.xyz);
    u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat5.xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat21 = float(1.0) / float(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.y = dot(in_NORMAL0.xyz, u_xlat0.xyz);
    u_xlat6.xyz = u_xlat1.zxy * u_xlat3.yzx;
    u_xlat6.xyz = u_xlat1.yzx * u_xlat3.zxy + (-u_xlat6.xyz);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat5.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat5.xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, u_xlat6.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat1.w = u_xlat4.x;
    u_xlat1.x = dot(u_xlat1, in_POSITION0);
    u_xlat3.w = u_xlat4.y;
    u_xlat2.w = u_xlat4.z;
    u_xlat1.z = dot(u_xlat2, in_POSITION0);
    u_xlat1.y = dot(u_xlat3, in_POSITION0);
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat21 = (-u_xlat21) * u_xlat21 + 1.0;
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = u_xlat21 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat21) + u_xlat1.xyz;
    u_xlatb21 = unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb21)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.x = max((-u_xlat0.w), u_xlat0.z);
    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler3D _DitherMaskLOD;
layout(location = 0) in  vec2 vs_TEXCOORD1;
layout(location = 1) in  vec4 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
float u_xlat10_0;
bool u_xlatb0;
void main()
{
vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    u_xlat0.x = u_xlat10_0 * vs_TEXCOORD3.w;
    u_xlat0.z = u_xlat0.x * 0.9375;
    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
    u_xlat10_0 = texture(_DitherMaskLOD, u_xlat0.xyz).w;
    u_xlat0.x = u_xlat10_0 + -0.00999999978;
    u_xlatb0 = u_xlat0.x<0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SHADOWS_CUBE 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "TexCoord0"
Uses vertex data channel "Color"
Uses vertex data channel "Normal"
Uses vertex data channel "Vertex"

Set 3D Texture "_DitherMaskLOD" to set: 0, binding: 3, used in: Fragment  using sampler in set: 0, binding: 1, used in: Fragment 
Set 2D Texture "_MainTex" to set: 0, binding: 2, used in: Fragment  using sampler in set: 0, binding: 0, used in: Fragment 

Constant Buffer "UnityDrawCallInfo" (8 bytes) on set: 1, binding: 1, used in: Vertex  {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "VGlobals4080898885" (128 bytes) on set: 1, binding: 0, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 32
  Vector4 _MainTex_ST at 112
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  Vector4 unity_ParticleUVShiftData at 96
}

Set Buffer  "unity_ParticleInstanceData" to set: 0, binding: 4, used in: Vertex 
Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 493

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 10 102 134 147 149 288 342 472
                              Name 134  "vs_TEXCOORD1"
                              Name 147  "vs_TEXCOORD3"
                              Decorate 10 BuiltIn InstanceIndex
                              MemberDecorate 12 0 Offset 0
                              MemberDecorate 12 1 Offset 4
                              Decorate 12 Block
                              Decorate 14 DescriptorSet 1
                              Decorate 14 Binding 1
                              Decorate 26 ArrayStride 4
                              MemberDecorate 27 0 Offset 0
                              Decorate 28 ArrayStride 56
                              MemberDecorate 29 0 NonWritable
                              MemberDecorate 29 0 Offset 0
                              Decorate 29 BufferBlock
                              Decorate 31 DescriptorSet 0
                              Decorate 31 Binding 4
                              Decorate 50 ArrayStride 16
                              MemberDecorate 51 0 Offset 0
                              MemberDecorate 51 1 Offset 16
                              MemberDecorate 51 2 Offset 32
                              MemberDecorate 51 3 Offset 96
                              MemberDecorate 51 4 Offset 112
                              Decorate 51 Block
                              Decorate 53 DescriptorSet 1
                              Decorate 53 Binding 0
                              Decorate 102 Location 3
                              Decorate 134(vs_TEXCOORD1) Location 0
                              Decorate 147(vs_TEXCOORD3) RelaxedPrecision
                              Decorate 147(vs_TEXCOORD3) Location 1
                              Decorate 149 RelaxedPrecision
                              Decorate 149 Location 2
                              Decorate 150 RelaxedPrecision
                              Decorate 288 Location 1
                              Decorate 342 Location 0
                              MemberDecorate 470 0 BuiltIn Position
                              MemberDecorate 470 1 BuiltIn PointSize
                              MemberDecorate 470 2 BuiltIn ClipDistance
                              Decorate 470 Block
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeInt 32 1
               7:             TypePointer Private 6(int)
               8:      7(ptr) Variable Private
               9:             TypePointer Input 6(int)
              10:      9(ptr) Variable Input
              12:             TypeStruct 6(int) 6(int)
              13:             TypePointer Uniform 12(struct)
              14:     13(ptr) Variable Uniform
              15:      6(int) Constant 0
              16:             TypePointer Uniform 6(int)
              20:             TypeFloat 32
              21:             TypeVector 20(float) 3
              22:             TypePointer Private 21(fvec3)
              23:     22(ptr) Variable Private
              24:             TypeInt 32 0
              25:     24(int) Constant 14
              26:             TypeArray 24(int) 25
              27:             TypeStruct 26
              28:             TypeRuntimeArray 27(struct)
              29:             TypeStruct 28
              30:             TypePointer Uniform 29(struct)
              31:     30(ptr) Variable Uniform
              33:      6(int) Constant 13
              34:             TypePointer Uniform 24(int)
              38:     24(int) Constant 0
              39:             TypePointer Private 20(float)
              45:     39(ptr) Variable Private
              48:             TypeVector 20(float) 4
              49:     24(int) Constant 4
              50:             TypeArray 48(fvec4) 49
              51:             TypeStruct 48(fvec4) 48(fvec4) 50 48(fvec4) 48(fvec4)
              52:             TypePointer Uniform 51(struct)
              53:     52(ptr) Variable Uniform
              54:      6(int) Constant 3
              55:     24(int) Constant 1
              56:             TypePointer Uniform 20(float)
              75:             TypePointer Private 48(fvec4)
              76:     75(ptr) Variable Private
              79:     24(int) Constant 2
              84:     24(int) Constant 3
              88:   20(float) Constant 1065353216
             100:             TypeVector 20(float) 2
             101:             TypePointer Input 100(fvec2)
             102:    101(ptr) Variable Input
             104:             TypePointer Uniform 48(fvec4)
             114:             TypeBool
             115:             TypePointer Private 114(bool)
             116:    115(ptr) Variable Private
             119:   20(float) Constant 0
             122:             TypePointer Function 100(fvec2)
             133:             TypePointer Output 100(fvec2)
134(vs_TEXCOORD1):    133(ptr) Variable Output
             137:      6(int) Constant 4
             146:             TypePointer Output 48(fvec4)
147(vs_TEXCOORD3):    146(ptr) Variable Output
             148:             TypePointer Input 48(fvec4)
             149:    148(ptr) Variable Input
             152:      6(int) Constant 7
             157:      6(int) Constant 8
             162:      6(int) Constant 6
             169:     75(ptr) Variable Private
             173:     75(ptr) Variable Private
             175:      6(int) Constant 1
             184:      6(int) Constant 2
             203:      6(int) Constant 5
             208:     22(ptr) Variable Private
             210:      6(int) Constant 9
             215:      6(int) Constant 10
             220:      6(int) Constant 11
             240:     75(ptr) Variable Private
             259:     22(ptr) Variable Private
             273:     39(ptr) Variable Private
             287:             TypePointer Input 21(fvec3)
             288:    287(ptr) Variable Input
             294:     22(ptr) Variable Private
             342:    148(ptr) Variable Input
             418:             TypePointer Function 21(fvec3)
             469:             TypeArray 20(float) 55
             470:             TypeStruct 48(fvec4) 20(float) 469
             471:             TypePointer Output 470(struct)
             472:    471(ptr) Variable Output
             481:             TypePointer Output 20(float)
               4:           2 Function None 3
               5:             Label
             123:    122(ptr) Variable Function
             419:    418(ptr) Variable Function
              11:      6(int) Load 10
              17:     16(ptr) AccessChain 14 15
              18:      6(int) Load 17
              19:      6(int) IAdd 11 18
                              Store 8 19
              32:      6(int) Load 8
              35:     34(ptr) AccessChain 31 15 32 15 33
              36:     24(int) Load 35
              37:   20(float) Bitcast 36
              40:     39(ptr) AccessChain 23 38
                              Store 40 37
              41:     39(ptr) AccessChain 23 38
              42:   20(float) Load 41
              43:   20(float) ExtInst 1(GLSL.std.450) 8(Floor) 42
              44:     39(ptr) AccessChain 23 38
                              Store 44 43
              46:     39(ptr) AccessChain 23 38
              47:   20(float) Load 46
              57:     56(ptr) AccessChain 53 54 55
              58:   20(float) Load 57
              59:   20(float) FDiv 47 58
                              Store 45 59
              60:   20(float) Load 45
              61:   20(float) ExtInst 1(GLSL.std.450) 8(Floor) 60
                              Store 45 61
              62:   20(float) Load 45
              63:   20(float) FNegate 62
              64:     56(ptr) AccessChain 53 54 55
              65:   20(float) Load 64
              66:   20(float) FMul 63 65
              67:     39(ptr) AccessChain 23 38
              68:   20(float) Load 67
              69:   20(float) FAdd 66 68
              70:     39(ptr) AccessChain 23 38
                              Store 70 69
              71:     39(ptr) AccessChain 23 38
              72:   20(float) Load 71
              73:   20(float) ExtInst 1(GLSL.std.450) 8(Floor) 72
              74:     39(ptr) AccessChain 23 38
                              Store 74 73
              77:     39(ptr) AccessChain 23 38
              78:   20(float) Load 77
              80:     56(ptr) AccessChain 53 54 79
              81:   20(float) Load 80
              82:   20(float) FMul 78 81
              83:     39(ptr) AccessChain 76 38
                              Store 83 82
              85:     56(ptr) AccessChain 53 54 84
              86:   20(float) Load 85
              87:   20(float) FNegate 86
              89:   20(float) FAdd 87 88
              90:     39(ptr) AccessChain 23 38
                              Store 90 89
              91:   20(float) Load 45
              92:   20(float) FNegate 91
              93:     56(ptr) AccessChain 53 54 84
              94:   20(float) Load 93
              95:   20(float) FMul 92 94
              96:     39(ptr) AccessChain 23 38
              97:   20(float) Load 96
              98:   20(float) FAdd 95 97
              99:     39(ptr) AccessChain 76 55
                              Store 99 98
             103:  100(fvec2) Load 102
             105:    104(ptr) AccessChain 53 54
             106:   48(fvec4) Load 105
             107:  100(fvec2) VectorShuffle 106 106 2 3
             108:  100(fvec2) FMul 103 107
             109:   48(fvec4) Load 76
             110:  100(fvec2) VectorShuffle 109 109 0 1
             111:  100(fvec2) FAdd 108 110
             112:   21(fvec3) Load 23
             113:   21(fvec3) VectorShuffle 112 111 3 4 2
                              Store 23 113
             117:     56(ptr) AccessChain 53 54 38
             118:   20(float) Load 117
             120:   114(bool) FOrdNotEqual 118 119
                              Store 116 120
             121:   114(bool) Load 116
                              SelectionMerge 125 None
                              BranchConditional 121 124 128
             124:               Label
             126:   21(fvec3)   Load 23
             127:  100(fvec2)   VectorShuffle 126 126 0 1
                                Store 123 127
                                Branch 125
             128:               Label
             129:  100(fvec2)   Load 102
                                Store 123 129
                                Branch 125
             125:             Label
             130:  100(fvec2) Load 123
             131:   21(fvec3) Load 23
             132:   21(fvec3) VectorShuffle 131 130 3 4 2
                              Store 23 132
             135:   21(fvec3) Load 23
             136:  100(fvec2) VectorShuffle 135 135 0 1
             138:    104(ptr) AccessChain 53 137
             139:   48(fvec4) Load 138
             140:  100(fvec2) VectorShuffle 139 139 0 1
             141:  100(fvec2) FMul 136 140
             142:    104(ptr) AccessChain 53 137
             143:   48(fvec4) Load 142
             144:  100(fvec2) VectorShuffle 143 143 2 3
             145:  100(fvec2) FAdd 141 144
                              Store 134(vs_TEXCOORD1) 145
             150:   48(fvec4) Load 149
                              Store 147(vs_TEXCOORD3) 150
             151:      6(int) Load 8
             153:     34(ptr) AccessChain 31 15 151 15 152
             154:     24(int) Load 153
             155:   20(float) Bitcast 154
             156:      6(int) Load 8
             158:     34(ptr) AccessChain 31 15 156 15 157
             159:     24(int) Load 158
             160:   20(float) Bitcast 159
             161:      6(int) Load 8
             163:     34(ptr) AccessChain 31 15 161 15 162
             164:     24(int) Load 163
             165:   20(float) Bitcast 164
             166:   21(fvec3) CompositeConstruct 155 160 165
             167:   48(fvec4) Load 76
             168:   48(fvec4) VectorShuffle 167 166 4 5 6 3
                              Store 76 168
             170:     39(ptr) AccessChain 76 55
             171:   20(float) Load 170
             172:     39(ptr) AccessChain 169 79
                              Store 172 171
             174:      6(int) Load 8
             176:     34(ptr) AccessChain 31 15 174 15 175
             177:     24(int) Load 176
             178:   20(float) Bitcast 177
             179:      6(int) Load 8
             180:     34(ptr) AccessChain 31 15 179 15 15
             181:     24(int) Load 180
             182:   20(float) Bitcast 181
             183:      6(int) Load 8
             185:     34(ptr) AccessChain 31 15 183 15 184
             186:     24(int) Load 185
             187:   20(float) Bitcast 186
             188:   21(fvec3) CompositeConstruct 178 182 187
             189:   48(fvec4) Load 173
             190:   48(fvec4) VectorShuffle 189 188 4 5 6 3
                              Store 173 190
             191:     39(ptr) AccessChain 173 79
             192:   20(float) Load 191
             193:     39(ptr) AccessChain 169 38
                              Store 193 192
             194:      6(int) Load 8
             195:     34(ptr) AccessChain 31 15 194 15 54
             196:     24(int) Load 195
             197:   20(float) Bitcast 196
             198:      6(int) Load 8
             199:     34(ptr) AccessChain 31 15 198 15 137
             200:     24(int) Load 199
             201:   20(float) Bitcast 200
             202:      6(int) Load 8
             204:     34(ptr) AccessChain 31 15 202 15 203
             205:     24(int) Load 204
             206:   20(float) Bitcast 205
             207:   21(fvec3) CompositeConstruct 197 201 206
                              Store 23 207
             209:      6(int) Load 8
             211:     34(ptr) AccessChain 31 15 209 15 210
             212:     24(int) Load 211
             213:   20(float) Bitcast 212
             214:      6(int) Load 8
             216:     34(ptr) AccessChain 31 15 214 15 215
             217:     24(int) Load 216
             218:   20(float) Bitcast 217
             219:      6(int) Load 8
             221:     34(ptr) AccessChain 31 15 219 15 220
             222:     24(int) Load 221
             223:   20(float) Bitcast 222
             224:   21(fvec3) CompositeConstruct 213 218 223
                              Store 208 224
             225:     39(ptr) AccessChain 23 79
             226:   20(float) Load 225
             227:     39(ptr) AccessChain 169 55
                              Store 227 226
             228:     39(ptr) AccessChain 76 38
             229:   20(float) Load 228
             230:     39(ptr) AccessChain 173 79
                              Store 230 229
             231:     39(ptr) AccessChain 173 55
             232:   20(float) Load 231
             233:     39(ptr) AccessChain 76 38
                              Store 233 232
             234:     39(ptr) AccessChain 23 38
             235:   20(float) Load 234
             236:     39(ptr) AccessChain 76 55
                              Store 236 235
             237:     39(ptr) AccessChain 23 55
             238:   20(float) Load 237
             239:     39(ptr) AccessChain 173 55
                              Store 239 238
             241:   48(fvec4) Load 169
             242:   21(fvec3) VectorShuffle 241 241 2 0 1
             243:   48(fvec4) Load 76
             244:   21(fvec3) VectorShuffle 243 243 1 2 0
             245:   21(fvec3) FMul 242 244
             246:   48(fvec4) Load 240
             247:   48(fvec4) VectorShuffle 246 245 4 5 6 3
                              Store 240 247
             248:   48(fvec4) Load 76
             249:   21(fvec3) VectorShuffle 248 248 2 0 1
             250:   48(fvec4) Load 169
             251:   21(fvec3) VectorShuffle 250 250 1 2 0
             252:   21(fvec3) FMul 249 251
             253:   48(fvec4) Load 240
             254:   21(fvec3) VectorShuffle 253 253 0 1 2
             255:   21(fvec3) FNegate 254
             256:   21(fvec3) FAdd 252 255
             257:   48(fvec4) Load 240
             258:   48(fvec4) VectorShuffle 257 256 4 5 6 3
                              Store 240 258
             260:   48(fvec4) Load 169
             261:   21(fvec3) VectorShuffle 260 260 1 2 0
             262:   48(fvec4) Load 173
             263:   21(fvec3) VectorShuffle 262 262 2 0 1
             264:   21(fvec3) FMul 261 263
                              Store 259 264
             265:   48(fvec4) Load 173
             266:   21(fvec3) VectorShuffle 265 265 1 2 0
             267:   48(fvec4) Load 169
             268:   21(fvec3) VectorShuffle 267 267 2 0 1
             269:   21(fvec3) FMul 266 268
             270:   21(fvec3) Load 259
             271:   21(fvec3) FNegate 270
             272:   21(fvec3) FAdd 269 271
                              Store 259 272
             274:   48(fvec4) Load 76
             275:   21(fvec3) VectorShuffle 274 274 0 1 2
             276:   21(fvec3) Load 259
             277:   20(float) Dot 275 276
                              Store 273 277
             278:   20(float) Load 273
             279:   20(float) FDiv 88 278
                              Store 273 279
             280:   20(float) Load 273
             281:   21(fvec3) CompositeConstruct 280 280 280
             282:   48(fvec4) Load 240
             283:   21(fvec3) VectorShuffle 282 282 0 1 2
             284:   21(fvec3) FMul 281 283
             285:   48(fvec4) Load 240
             286:   48(fvec4) VectorShuffle 285 284 4 5 6 3
                              Store 240 286
             289:   21(fvec3) Load 288
             290:   48(fvec4) Load 240
             291:   21(fvec3) VectorShuffle 290 290 0 1 2
             292:   20(float) Dot 289 291
             293:     39(ptr) AccessChain 240 55
                              Store 293 292
             295:   48(fvec4) Load 76
             296:   21(fvec3) VectorShuffle 295 295 2 0 1
             297:   48(fvec4) Load 173
             298:   21(fvec3) VectorShuffle 297 297 1 2 0
             299:   21(fvec3) FMul 296 298
                              Store 294 299
             300:   48(fvec4) Load 76
             301:   21(fvec3) VectorShuffle 300 300 1 2 0
             302:   48(fvec4) Load 173
             303:   21(fvec3) VectorShuffle 302 302 2 0 1
             304:   21(fvec3) FMul 301 303
             305:   21(fvec3) Load 294
             306:   21(fvec3) FNegate 305
             307:   21(fvec3) FAdd 304 306
                              Store 294 307
             308:   20(float) Load 273
             309:   21(fvec3) CompositeConstruct 308 308 308
             310:   21(fvec3) Load 294
             311:   21(fvec3) FMul 309 310
                              Store 294 311
             312:   20(float) Load 273
             313:   21(fvec3) CompositeConstruct 312 312 312
             314:   21(fvec3) Load 259
             315:   21(fvec3) FMul 313 314
                              Store 259 315
             316:   21(fvec3) Load 288
             317:   21(fvec3) Load 259
             318:   20(float) Dot 316 317
             319:     39(ptr) AccessChain 240 38
                              Store 319 318
             320:   21(fvec3) Load 288
             321:   21(fvec3) Load 294
             322:   20(float) Dot 320 321
             323:     39(ptr) AccessChain 240 79
                              Store 323 322
             324:   48(fvec4) Load 240
             325:   21(fvec3) VectorShuffle 324 324 0 1 2
             326:   48(fvec4) Load 240
             327:   21(fvec3) VectorShuffle 326 326 0 1 2
             328:   20(float) Dot 325 327
                              Store 273 328
             329:   20(float) Load 273
             330:   20(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 329
                              Store 273 330
             331:   20(float) Load 273
             332:   21(fvec3) CompositeConstruct 331 331 331
             333:   48(fvec4) Load 240
             334:   21(fvec3) VectorShuffle 333 333 0 1 2
             335:   21(fvec3) FMul 332 334
             336:   48(fvec4) Load 240
             337:   48(fvec4) VectorShuffle 336 335 4 5 6 3
                              Store 240 337
             338:     39(ptr) AccessChain 208 38
             339:   20(float) Load 338
             340:     39(ptr) AccessChain 76 84
                              Store 340 339
             341:   48(fvec4) Load 76
             343:   48(fvec4) Load 342
             344:   20(float) Dot 341 343
             345:     39(ptr) AccessChain 76 38
                              Store 345 344
             346:     39(ptr) AccessChain 208 55
             347:   20(float) Load 346
             348:     39(ptr) AccessChain 173 84
                              Store 348 347
             349:     39(ptr) AccessChain 208 79
             350:   20(float) Load 349
             351:     39(ptr) AccessChain 169 84
                              Store 351 350
             352:   48(fvec4) Load 169
             353:   48(fvec4) Load 342
             354:   20(float) Dot 352 353
             355:     39(ptr) AccessChain 76 79
                              Store 355 354
             356:   48(fvec4) Load 173
             357:   48(fvec4) Load 342
             358:   20(float) Dot 356 357
             359:     39(ptr) AccessChain 76 55
                              Store 359 358
             360:   48(fvec4) Load 76
             361:   21(fvec3) VectorShuffle 360 360 0 1 2
             362:   21(fvec3) FNegate 361
             363:    104(ptr) AccessChain 53 15
             364:   48(fvec4) Load 363
             365:   21(fvec3) VectorShuffle 364 364 3 3 3
             366:   21(fvec3) FMul 362 365
             367:    104(ptr) AccessChain 53 15
             368:   48(fvec4) Load 367
             369:   21(fvec3) VectorShuffle 368 368 0 1 2
             370:   21(fvec3) FAdd 366 369
             371:   48(fvec4) Load 169
             372:   48(fvec4) VectorShuffle 371 370 4 5 6 3
                              Store 169 372
             373:   48(fvec4) Load 169
             374:   21(fvec3) VectorShuffle 373 373 0 1 2
             375:   48(fvec4) Load 169
             376:   21(fvec3) VectorShuffle 375 375 0 1 2
             377:   20(float) Dot 374 376
                              Store 273 377
             378:   20(float) Load 273
             379:   20(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 378
                              Store 273 379
             380:   20(float) Load 273
             381:   21(fvec3) CompositeConstruct 380 380 380
             382:   48(fvec4) Load 169
             383:   21(fvec3) VectorShuffle 382 382 0 1 2
             384:   21(fvec3) FMul 381 383
             385:   48(fvec4) Load 169
             386:   48(fvec4) VectorShuffle 385 384 4 5 6 3
                              Store 169 386
             387:   48(fvec4) Load 240
             388:   21(fvec3) VectorShuffle 387 387 0 1 2
             389:   48(fvec4) Load 169
             390:   21(fvec3) VectorShuffle 389 389 0 1 2
             391:   20(float) Dot 388 390
                              Store 273 391
             392:   20(float) Load 273
             393:   20(float) FNegate 392
             394:   20(float) Load 273
             395:   20(float) FMul 393 394
             396:   20(float) FAdd 395 88
                              Store 273 396
             397:   20(float) Load 273
             398:   20(float) ExtInst 1(GLSL.std.450) 31(Sqrt) 397
                              Store 273 398
             399:   20(float) Load 273
             400:     56(ptr) AccessChain 53 175 79
             401:   20(float) Load 400
             402:   20(float) FMul 399 401
                              Store 273 402
             403:   48(fvec4) Load 240
             404:   21(fvec3) VectorShuffle 403 403 0 1 2
             405:   21(fvec3) FNegate 404
             406:   20(float) Load 273
             407:   21(fvec3) CompositeConstruct 406 406 406
             408:   21(fvec3) FMul 405 407
             409:   48(fvec4) Load 76
             410:   21(fvec3) VectorShuffle 409 409 0 1 2
             411:   21(fvec3) FAdd 408 410
             412:   48(fvec4) Load 240
             413:   48(fvec4) VectorShuffle 412 411 4 5 6 3
                              Store 240 413
             414:     56(ptr) AccessChain 53 175 79
             415:   20(float) Load 414
             416:   114(bool) FOrdNotEqual 415 119
                              Store 116 416
             417:   114(bool) Load 116
                              SelectionMerge 421 None
                              BranchConditional 417 420 424
             420:               Label
             422:   48(fvec4)   Load 240
             423:   21(fvec3)   VectorShuffle 422 422 0 1 2
                                Store 419 423
                                Branch 421
             424:               Label
             425:   48(fvec4)   Load 76
             426:   21(fvec3)   VectorShuffle 425 425 0 1 2
                                Store 419 426
                                Branch 421
             421:             Label
             427:   21(fvec3) Load 419
             428:   48(fvec4) Load 240
             429:   48(fvec4) VectorShuffle 428 427 4 5 6 3
                              Store 240 429
             430:   48(fvec4) Load 240
             431:   48(fvec4) VectorShuffle 430 430 1 1 1 1
             432:    104(ptr) AccessChain 53 184 175
             433:   48(fvec4) Load 432
             434:   48(fvec4) FMul 431 433
                              Store 76 434
             435:    104(ptr) AccessChain 53 184 15
             436:   48(fvec4) Load 435
             437:   48(fvec4) Load 240
             438:   48(fvec4) VectorShuffle 437 437 0 0 0 0
             439:   48(fvec4) FMul 436 438
             440:   48(fvec4) Load 76
             441:   48(fvec4) FAdd 439 440
                              Store 76 441
             442:    104(ptr) AccessChain 53 184 184
             443:   48(fvec4) Load 442
             444:   48(fvec4) Load 240
             445:   48(fvec4) VectorShuffle 444 444 2 2 2 2
             446:   48(fvec4) FMul 443 445
             447:   48(fvec4) Load 76
             448:   48(fvec4) FAdd 446 447
                              Store 240 448
             449:    104(ptr) AccessChain 53 184 54
             450:   48(fvec4) Load 449
             451:   48(fvec4) Load 342
             452:   48(fvec4) VectorShuffle 451 451 3 3 3 3
             453:   48(fvec4) FMul 450 452
             454:   48(fvec4) Load 240
             455:   48(fvec4) FAdd 453 454
                              Store 240 455
             456:     39(ptr) AccessChain 240 84
             457:   20(float) Load 456
             458:     39(ptr) AccessChain 240 79
             459:   20(float) Load 458
             460:   20(float) ExtInst 1(GLSL.std.450) 37(FMin) 457 459
             461:     39(ptr) AccessChain 76 38
                              Store 461 460
             462:     39(ptr) AccessChain 240 79
             463:   20(float) Load 462
             464:   20(float) FNegate 463
             465:     39(ptr) AccessChain 76 38
             466:   20(float) Load 465
             467:   20(float) FAdd 464 466
             468:     39(ptr) AccessChain 76 38
                              Store 468 467
             473:     56(ptr) AccessChain 53 175 55
             474:   20(float) Load 473
             475:     39(ptr) AccessChain 76 38
             476:   20(float) Load 475
             477:   20(float) FMul 474 476
             478:     39(ptr) AccessChain 240 79
             479:   20(float) Load 478
             480:   20(float) FAdd 477 479
             482:    481(ptr) AccessChain 472 15 79
                              Store 482 480
             483:   48(fvec4) Load 240
             484:   21(fvec3) VectorShuffle 483 483 0 1 3
             485:    146(ptr) AccessChain 472 15
             486:   48(fvec4) Load 485
             487:   48(fvec4) VectorShuffle 486 484 4 5 2 6
                              Store 485 487
             488:    481(ptr) AccessChain 472 15 55
             489:   20(float) Load 488
             490:   20(float) FNegate 489
             491:    481(ptr) AccessChain 472 15 55
                              Store 491 490
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 102

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 11 40 46 99
                              ExecutionMode 4 OriginUpperLeft
                              Name 40  "vs_TEXCOORD1"
                              Name 46  "vs_TEXCOORD3"
                              Decorate 11 BuiltIn FragCoord
                              Decorate 27 RelaxedPrecision
                              Decorate 30 RelaxedPrecision
                              Decorate 30 DescriptorSet 0
                              Decorate 30 Binding 2
                              Decorate 31 RelaxedPrecision
                              Decorate 34 RelaxedPrecision
                              Decorate 34 DescriptorSet 0
                              Decorate 34 Binding 0
                              Decorate 35 RelaxedPrecision
                              Decorate 40(vs_TEXCOORD1) Location 0
                              Decorate 43 RelaxedPrecision
                              Decorate 44 RelaxedPrecision
                              Decorate 45 RelaxedPrecision
                              Decorate 46(vs_TEXCOORD3) RelaxedPrecision
                              Decorate 46(vs_TEXCOORD3) Location 1
                              Decorate 48 RelaxedPrecision
                              Decorate 49 RelaxedPrecision
                              Decorate 50 RelaxedPrecision
                              Decorate 51 RelaxedPrecision
                              Decorate 53 RelaxedPrecision
                              Decorate 56 RelaxedPrecision
                              Decorate 68 RelaxedPrecision
                              Decorate 68 DescriptorSet 0
                              Decorate 68 Binding 3
                              Decorate 69 RelaxedPrecision
                              Decorate 70 RelaxedPrecision
                              Decorate 70 DescriptorSet 0
                              Decorate 70 Binding 1
                              Decorate 71 RelaxedPrecision
                              Decorate 76 RelaxedPrecision
                              Decorate 77 RelaxedPrecision
                              Decorate 78 RelaxedPrecision
                              Decorate 80 RelaxedPrecision
                              Decorate 84 RelaxedPrecision
                              Decorate 99 RelaxedPrecision
                              Decorate 99 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Function 7(fvec4)
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              12:             TypeVector 6(float) 3
              15:    6(float) Constant 1065353216
              16:             TypeInt 32 0
              17:     16(int) Constant 3
              18:             TypePointer Input 6(float)
              26:             TypePointer Private 6(float)
              27:     26(ptr) Variable Private
              28:             TypeImage 6(float) 2D sampled format:Unknown
              29:             TypePointer UniformConstant 28
              30:     29(ptr) Variable UniformConstant
              32:             TypeSampler
              33:             TypePointer UniformConstant 32
              34:     33(ptr) Variable UniformConstant
              36:             TypeSampledImage 28
              38:             TypeVector 6(float) 2
              39:             TypePointer Input 38(fvec2)
40(vs_TEXCOORD1):     39(ptr) Variable Input
              44:     26(ptr) Variable Private
46(vs_TEXCOORD3):     10(ptr) Variable Input
              50:     26(ptr) Variable Private
              52:    6(float) Constant 1064304640
              54:             TypePointer Private 12(fvec3)
              55:     54(ptr) Variable Private
              57:     16(int) Constant 2
              61:    6(float) Constant 1048576000
              62:   38(fvec2) ConstantComposite 61 61
              66:             TypeImage 6(float) 3D sampled format:Unknown
              67:             TypePointer UniformConstant 66
              68:     67(ptr) Variable UniformConstant
              70:     33(ptr) Variable UniformConstant
              72:             TypeSampledImage 66
              77:     26(ptr) Variable Private
              79:    6(float) Constant 3156465418
              81:             TypeBool
              82:             TypePointer Private 81(bool)
              83:     82(ptr) Variable Private
              85:    6(float) Constant 0
              88:             TypeInt 32 1
              89:     88(int) Constant 0
              90:     88(int) Constant 1
              92:     88(int) Constant 4294967295
              98:             TypePointer Output 7(fvec4)
              99:     98(ptr) Variable Output
             100:    7(fvec4) ConstantComposite 85 85 85 85
               4:           2 Function None 3
               5:             Label
               9:      8(ptr) Variable Function
              13:    7(fvec4) Load 11
              14:   12(fvec3) VectorShuffle 13 13 0 1 2
              19:     18(ptr) AccessChain 11 17
              20:    6(float) Load 19
              21:    6(float) FDiv 15 20
              22:    6(float) CompositeExtract 14 0
              23:    6(float) CompositeExtract 14 1
              24:    6(float) CompositeExtract 14 2
              25:    7(fvec4) CompositeConstruct 22 23 24 21
                              Store 9 25
              31:          28 Load 30
              35:          32 Load 34
              37:          36 SampledImage 31 35
              41:   38(fvec2) Load 40(vs_TEXCOORD1)
              42:    7(fvec4) ImageSampleImplicitLod 37 41
              43:    6(float) CompositeExtract 42 3
                              Store 27 43
              45:    6(float) Load 27
              47:     18(ptr) AccessChain 46(vs_TEXCOORD3) 17
              48:    6(float) Load 47
              49:    6(float) FMul 45 48
                              Store 44 49
              51:    6(float) Load 44
              53:    6(float) FMul 51 52
                              Store 50 53
              56:    6(float) Load 50
              58:     26(ptr) AccessChain 55 57
                              Store 58 56
              59:    7(fvec4) Load 9
              60:   38(fvec2) VectorShuffle 59 59 0 1
              63:   38(fvec2) FMul 60 62
              64:   12(fvec3) Load 55
              65:   12(fvec3) VectorShuffle 64 63 3 4 2
                              Store 55 65
              69:          66 Load 68
              71:          32 Load 70
              73:          72 SampledImage 69 71
              74:   12(fvec3) Load 55
              75:    7(fvec4) ImageSampleImplicitLod 73 74
              76:    6(float) CompositeExtract 75 3
                              Store 27 76
              78:    6(float) Load 27
              80:    6(float) FAdd 78 79
                              Store 77 80
              84:    6(float) Load 77
              86:    81(bool) FOrdLessThan 84 85
                              Store 83 86
              87:    81(bool) Load 83
              91:     88(int) Select 87 90 89
              93:     88(int) IMul 91 92
              94:    81(bool) INotEqual 93 89
                              SelectionMerge 96 None
                              BranchConditional 94 95 96
              95:               Label
                                Kill
              96:             Label
                              Store 99 100
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SHADOWS_CUBE 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 48 math, 7 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "$Globals" (96 bytes) on slot 0 {
  Vector4 unity_ParticleUVShiftData at 32
  Vector4 _MainTex_ST at 64
}
Constant Buffer "UnityLighting" (768 bytes) on slot 1 {
  Vector4 _WorldSpaceLightPos0 at 0
}
Constant Buffer "UnityShadows" (416 bytes) on slot 2 {
  Vector4 unity_LightShadowBias at 80
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 3 {
  Matrix4x4 unity_MatrixVP at 272
}
Constant Buffer "UnityDrawCallInfo" (16 bytes) on slot 4 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
// SV_InstanceID            0   x           4   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 1   xy          0     NONE   float   xy  
// TEXCOORD                 3   xyzw        1     NONE   float   xyzw
// SV_POSITION              0   xyzw        2      POS   float   xyzw
//
      vs_5_0
      dcl_globalFlags refactoringAllowed
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_constantbuffer CB1[1], immediateIndexed
      dcl_constantbuffer CB2[6], immediateIndexed
      dcl_constantbuffer CB3[21], immediateIndexed
      dcl_constantbuffer CB4[1], immediateIndexed
      dcl_resource_structured t0, 56
      dcl_input v0.xyzw
      dcl_input v1.xyz
      dcl_input v2.xyzw
      dcl_input v3.xy
      dcl_input_sgv v4.x, instance_id
      dcl_output o0.xy
      dcl_output o1.xyzw
      dcl_output_siv o2.xyzw, position
      dcl_temps 7
   0: iadd r0.x, v4.x, cb4[0].x
   1: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r0.y, r0.x, l(52), t0.xxxx
   2: round_ni r0.y, r0.y
   3: div r0.z, r0.y, cb0[2].y
   4: round_ni r0.z, r0.z
   5: mad r0.y, -r0.z, cb0[2].y, r0.y
   6: round_ni r0.y, r0.y
   7: mul r1.x, r0.y, cb0[2].z
   8: add r0.y, -cb0[2].w, l(1.000000)
   9: mad r1.y, -r0.z, cb0[2].w, r0.y
  10: mad r0.yz, v3.xxyx, cb0[2].zzwz, r1.xxyx
  11: ne r0.w, cb0[2].x, l(0.000000)
  12: movc r0.yz, r0.wwww, r0.yyzy, v3.xxyx
  13: mad o0.xy, r0.yzyy, cb0[4].xyxx, cb0[4].zwzz
  14: mov o1.xyzw, v2.xyzw
  15: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r1.xyz, r0.x, l(24), t0.yzxx
  16: mov r2.z, r1.y
  17: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r3.xyz, r0.x, l(0), t0.yxzx
  18: mov r2.x, r3.z
  19: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r0.yzw, r0.x, l(12), t0.xxyz
  20: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r4.xyz, r0.x, l(36), t0.xyzx
  21: mov r2.y, r0.w
  22: mov r3.z, r1.x
  23: mov r1.x, r3.y
  24: mov r1.y, r0.y
  25: mov r3.y, r0.z
  26: mul r0.xyz, r2.zxyz, r1.yzxy
  27: mad r0.xyz, r1.zxyz, r2.yzxy, -r0.xyzx
  28: mul r5.xyz, r2.yzxy, r3.zxyz
  29: mad r5.xyz, r3.yzxy, r2.zxyz, -r5.xyzx
  30: dp3 r0.w, r1.xyzx, r5.xyzx
  31: rcp r0.w, r0.w
  32: mul r0.xyz, r0.wwww, r0.xyzx
  33: dp3 r0.y, v1.xyzx, r0.xyzx
  34: mul r6.xyz, r1.zxyz, r3.yzxy
  35: mad r6.xyz, r1.yzxy, r3.zxyz, -r6.xyzx
  36: mul r6.xyz, r0.wwww, r6.xyzx
  37: mul r5.xyz, r0.wwww, r5.xyzx
  38: dp3 r0.x, v1.xyzx, r5.xyzx
  39: dp3 r0.z, v1.xyzx, r6.xyzx
  40: dp3 r0.w, r0.xyzx, r0.xyzx
  41: rsq r0.w, r0.w
  42: mul r0.xyz, r0.wwww, r0.xyzx
  43: mov r1.w, r4.x
  44: dp4 r1.x, r1.xyzw, v0.xyzw
  45: mov r3.w, r4.y
  46: mov r2.w, r4.z
  47: dp4 r1.z, r2.xyzw, v0.xyzw
  48: dp4 r1.y, r3.xyzw, v0.xyzw
  49: mad r2.xyz, -r1.xyzx, cb1[0].wwww, cb1[0].xyzx
  50: dp3 r0.w, r2.xyzx, r2.xyzx
  51: rsq r0.w, r0.w
  52: mul r2.xyz, r0.wwww, r2.xyzx
  53: dp3 r0.w, r0.xyzx, r2.xyzx
  54: mad r0.w, -r0.w, r0.w, l(1.000000)
  55: sqrt r0.w, r0.w
  56: mul r0.w, r0.w, cb2[5].z
  57: mad r0.xyz, -r0.xyzx, r0.wwww, r1.xyzx
  58: ne r0.w, cb2[5].z, l(0.000000)
  59: movc r0.xyz, r0.wwww, r0.xyzx, r1.xyzx
  60: mul r1.xyzw, r0.yyyy, cb3[18].xyzw
  61: mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
  62: mad r0.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
  63: mad r0.xyzw, cb3[20].xyzw, v0.wwww, r0.xyzw
  64: min r1.x, r0.w, r0.z
  65: add r1.x, -r0.z, r1.x
  66: mad o2.z, cb2[5].y, r1.x, r0.z
  67: mov o2.xyw, r0.xyxw
  68: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 5 math, 1 temp registers, 2 textures
Set 2D Texture "_MainTex" to slot 0
Set 3D Texture "_DitherMaskLOD" to slot 1

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 1   xy          0     NONE   float   xy  
// TEXCOORD                 3   xyzw        1     NONE   float      w
// SV_Position              0   xyzw        2      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_5_0
      dcl_globalFlags refactoringAllowed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture3d (float,float,float,float) t1
      dcl_input_ps linear v0.xy
      dcl_input_ps linear v1.w
      dcl_input_ps_siv linear noperspective v2.xy, position
      dcl_output o0.xyzw
      dcl_temps 1
   0: sample_indexable(texture2d)(float,float,float,float) r0.x, v0.xyxx, t0.wxyz, s0
   1: mul r0.x, r0.x, v1.w
   2: mul r0.z, r0.x, l(0.937500)
   3: mul r0.xy, v2.xyxx, l(0.250000, 0.250000, 0.000000, 0.000000)
   4: sample_indexable(texture3d)(float,float,float,float) r0.x, r0.xyzx, t1.wxyz, s1
   5: add r0.x, r0.x, l(-0.010000)
   6: lt r0.x, r0.x, l(0.000000)
   7: discard_nz r0.x
   8: mov o0.xyzw, l(0,0,0,0)
   9: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SHADOWS_CUBE 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Set 2D Texture "_MainTex" to slot 0
Set 3D Texture "_DitherMaskLOD" to slot 1

Constant Buffer "$Globals" (144 bytes) {
  Matrix4x4 unity_MatrixVP at 32
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  ScalarInt unity_BaseInstanceID at 96
  Vector4 unity_ParticleUVShiftData at 112
  Vector4 _MainTex_ST at 128
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	vec4 _MainTex_ST;
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
layout(location = 0) out highp vec2 vs_TEXCOORD1;
layout(location = 1) out mediump vec4 vs_TEXCOORD3;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
float u_xlat14;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat7.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(52 >> 2) + 0]);
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat14 = u_xlat7.x / unity_ParticleUVShiftData.y;
    u_xlat14 = floor(u_xlat14);
    u_xlat7.x = (-u_xlat14) * unity_ParticleUVShiftData.y + u_xlat7.x;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat1.x = u_xlat7.x * unity_ParticleUVShiftData.z;
    u_xlat7.x = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat14) * unity_ParticleUVShiftData.w + u_xlat7.x;
    u_xlat7.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb21 = unity_ParticleUVShiftData.x!=0.0;
    u_xlat7.xy = (bool(u_xlatb21)) ? u_xlat7.xy : in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = u_xlat7.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3 = in_COLOR0;
    u_xlat1.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 0]));
    u_xlat2.z = u_xlat1.y;
    u_xlat3.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 2]));
    u_xlat2.x = u_xlat3.z;
    u_xlat7.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 2]));
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 2]));
    u_xlat2.y = u_xlat7.z;
    u_xlat3.z = u_xlat1.x;
    u_xlat1.x = u_xlat3.y;
    u_xlat1.y = u_xlat7.x;
    u_xlat3.y = u_xlat7.y;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat0.xyz);
    u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat5.xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat21 = float(1.0) / float(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.y = dot(in_NORMAL0.xyz, u_xlat0.xyz);
    u_xlat6.xyz = u_xlat1.zxy * u_xlat3.yzx;
    u_xlat6.xyz = u_xlat1.yzx * u_xlat3.zxy + (-u_xlat6.xyz);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat5.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat5.xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, u_xlat6.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat1.w = u_xlat4.x;
    u_xlat1.x = dot(u_xlat1, in_POSITION0);
    u_xlat3.w = u_xlat4.y;
    u_xlat2.w = u_xlat4.z;
    u_xlat1.z = dot(u_xlat2, in_POSITION0);
    u_xlat1.y = dot(u_xlat3, in_POSITION0);
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat21 = (-u_xlat21) * u_xlat21 + 1.0;
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = u_xlat21 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat21) + u_xlat1.xyz;
    u_xlatb21 = unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb21)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.x = max((-u_xlat0.w), u_xlat0.z);
    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler3D _DitherMaskLOD;
layout(location = 0) in highp vec2 vs_TEXCOORD1;
layout(location = 1) in mediump vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_1;
mediump float u_xlat16_2;
mediump float u_xlat16_7;
void main()
{
vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    u_xlat16_1 = u_xlat16_0 * vs_TEXCOORD3.w;
    u_xlat16_7 = u_xlat16_1 * 0.9375;
    u_xlat1.z = u_xlat16_7;
    u_xlat1.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
    u_xlat16_0 = texture(_DitherMaskLOD, u_xlat1.xyz).w;
    u_xlat16_2 = u_xlat16_0 + -0.00999999978;
    u_xlatb0 = u_xlat16_2<0.0;
    if(u_xlatb0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SHADOWS_CUBE 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (128 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 32
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  Vector4 unity_ParticleUVShiftData at 96
  Vector4 _MainTex_ST at 112
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_LightShadowBias;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 mtl_Position [[ position ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float3 u_xlat4;
    float3 u_xlat5;
    float3 u_xlat6;
    float3 u_xlat7;
    float u_xlat14;
    float u_xlat21;
    bool u_xlatb21;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat7.x = as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x34 >> 2) + 0]);
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat14 = u_xlat7.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat14 = floor(u_xlat14);
    u_xlat7.x = fma((-u_xlat14), VGlobals.unity_ParticleUVShiftData.y, u_xlat7.x);
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat1.x = u_xlat7.x * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat7.x = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = fma((-u_xlat14), VGlobals.unity_ParticleUVShiftData.w, u_xlat7.x);
    u_xlat7.xy = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat1.xy);
    u_xlatb21 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat7.xy = (bool(u_xlatb21)) ? u_xlat7.xy : input.TEXCOORD0.xy;
    output.TEXCOORD1.xy = fma(u_xlat7.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD3 = input.COLOR0;
    u_xlat1.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x18 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x18 >> 2) + 0]));
    u_xlat2.z = u_xlat1.y;
    u_xlat3.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x0 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x0 >> 2) + 2]));
    u_xlat2.x = u_xlat3.z;
    u_xlat7.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0xc >> 2) + 2]));
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x24 >> 2) + 2]));
    u_xlat2.y = u_xlat7.z;
    u_xlat3.z = u_xlat1.x;
    u_xlat1.x = u_xlat3.y;
    u_xlat1.y = u_xlat7.x;
    u_xlat3.y = u_xlat7.y;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat1.yzx;
    u_xlat0.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat0.xyz));
    u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy;
    u_xlat5.xyz = fma(u_xlat3.yzx, u_xlat2.zxy, (-u_xlat5.xyz));
    u_xlat21 = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat21 = float(1.0) / float(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.y = dot(input.NORMAL0.xyz, u_xlat0.xyz);
    u_xlat6.xyz = u_xlat1.zxy * u_xlat3.yzx;
    u_xlat6.xyz = fma(u_xlat1.yzx, u_xlat3.zxy, (-u_xlat6.xyz));
    u_xlat6.xyz = float3(u_xlat21) * u_xlat6.xyz;
    u_xlat5.xyz = float3(u_xlat21) * u_xlat5.xyz;
    u_xlat0.x = dot(input.NORMAL0.xyz, u_xlat5.xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, u_xlat6.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat1.w = u_xlat4.x;
    u_xlat1.x = dot(u_xlat1, input.POSITION0);
    u_xlat3.w = u_xlat4.y;
    u_xlat2.w = u_xlat4.z;
    u_xlat1.z = dot(u_xlat2, input.POSITION0);
    u_xlat1.y = dot(u_xlat3, input.POSITION0);
    u_xlat2.xyz = fma((-u_xlat1.xyz), VGlobals._WorldSpaceLightPos0.www, VGlobals._WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat2.xyz = float3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat21 = fma((-u_xlat21), u_xlat21, 1.0);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = u_xlat21 * VGlobals.unity_LightShadowBias.z;
    u_xlat0.xyz = fma((-u_xlat0.xyz), float3(u_xlat21), u_xlat1.xyz);
    u_xlatb21 = VGlobals.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb21)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], input.POSITION0.wwww, u_xlat0);
    u_xlat1.x = min(u_xlat0.w, u_xlat0.z);
    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
    output.mtl_Position.z = fma(VGlobals.unity_LightShadowBias.y, u_xlat1.x, u_xlat0.z);
    output.mtl_Position.xyw = u_xlat0.xyw;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 3D Texture "_DitherMaskLOD" to slot 1

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_DitherMaskLOD [[ sampler (1) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture3d<float, access::sample > _DitherMaskLOD [[ texture(1) ]] ,
    float4 mtl_FragCoord [[ position ]],
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 hlslcc_FragCoord = float4(mtl_FragCoord.xyz, 1.0/mtl_FragCoord.w);
    float3 u_xlat0;
    bool u_xlatb0;
    u_xlat0.x = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).w;
    u_xlat0.x = u_xlat0.x * input.TEXCOORD3.w;
    u_xlat0.z = u_xlat0.x * 0.9375;
    u_xlat0.xy = hlslcc_FragCoord.xy * float2(0.25, 0.25);
    u_xlat0.x = _DitherMaskLOD.sample(sampler_DitherMaskLOD, u_xlat0.xyz).w;
    u_xlat0.x = u_xlat0.x + -0.00999999978;
    u_xlatb0 = u_xlat0.x<0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    output.SV_Target0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SHADOWS_CUBE 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Set 2D Texture "_MainTex" to slot 0
Set 3D Texture "_DitherMaskLOD" to slot 1

Constant Buffer "$Globals" (144 bytes) {
  Matrix4x4 unity_MatrixVP at 32
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  ScalarInt unity_BaseInstanceID at 96
  Vector4 unity_ParticleUVShiftData at 112
  Vector4 _MainTex_ST at 128
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require
#ifdef GL_ARB_shader_storage_buffer_object
#extension GL_ARB_shader_storage_buffer_object : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	vec4 _MainTex_ST;
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
layout(location = 0) out vec2 vs_TEXCOORD1;
layout(location = 1) out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
float u_xlat14;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat7.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(52 >> 2) + 0]);
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat14 = u_xlat7.x / unity_ParticleUVShiftData.y;
    u_xlat14 = floor(u_xlat14);
    u_xlat7.x = (-u_xlat14) * unity_ParticleUVShiftData.y + u_xlat7.x;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat1.x = u_xlat7.x * unity_ParticleUVShiftData.z;
    u_xlat7.x = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat14) * unity_ParticleUVShiftData.w + u_xlat7.x;
    u_xlat7.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb21 = unity_ParticleUVShiftData.x!=0.0;
    u_xlat7.xy = (bool(u_xlatb21)) ? u_xlat7.xy : in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = u_xlat7.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3 = in_COLOR0;
    u_xlat1.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 0]));
    u_xlat2.z = u_xlat1.y;
    u_xlat3.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 2]));
    u_xlat2.x = u_xlat3.z;
    u_xlat7.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 2]));
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 2]));
    u_xlat2.y = u_xlat7.z;
    u_xlat3.z = u_xlat1.x;
    u_xlat1.x = u_xlat3.y;
    u_xlat1.y = u_xlat7.x;
    u_xlat3.y = u_xlat7.y;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat0.xyz);
    u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat5.xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat21 = float(1.0) / float(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.y = dot(in_NORMAL0.xyz, u_xlat0.xyz);
    u_xlat6.xyz = u_xlat1.zxy * u_xlat3.yzx;
    u_xlat6.xyz = u_xlat1.yzx * u_xlat3.zxy + (-u_xlat6.xyz);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat5.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat5.xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, u_xlat6.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat1.w = u_xlat4.x;
    u_xlat1.x = dot(u_xlat1, in_POSITION0);
    u_xlat3.w = u_xlat4.y;
    u_xlat2.w = u_xlat4.z;
    u_xlat1.z = dot(u_xlat2, in_POSITION0);
    u_xlat1.y = dot(u_xlat3, in_POSITION0);
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat21 = (-u_xlat21) * u_xlat21 + 1.0;
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = u_xlat21 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat21) + u_xlat1.xyz;
    u_xlatb21 = unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb21)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.x = max((-u_xlat0.w), u_xlat0.z);
    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler3D _DitherMaskLOD;
layout(location = 0) in  vec2 vs_TEXCOORD1;
layout(location = 1) in  vec4 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
float u_xlat10_0;
bool u_xlatb0;
void main()
{
vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    u_xlat0.x = u_xlat10_0 * vs_TEXCOORD3.w;
    u_xlat0.z = u_xlat0.x * 0.9375;
    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
    u_xlat10_0 = texture(_DitherMaskLOD, u_xlat0.xyz).w;
    u_xlat0.x = u_xlat10_0 + -0.00999999978;
    u_xlatb0 = u_xlat0.x<0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SHADOWS_CUBE 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "TexCoord0"
Uses vertex data channel "Color"
Uses vertex data channel "Normal"
Uses vertex data channel "Vertex"

Set 3D Texture "_DitherMaskLOD" to set: 0, binding: 3, used in: Fragment  using sampler in set: 0, binding: 1, used in: Fragment 
Set 2D Texture "_MainTex" to set: 0, binding: 2, used in: Fragment  using sampler in set: 0, binding: 0, used in: Fragment 

Constant Buffer "UnityDrawCallInfo" (8 bytes) on set: 1, binding: 1, used in: Vertex  {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "VGlobals4080898885" (128 bytes) on set: 1, binding: 0, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 32
  Vector4 _MainTex_ST at 112
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  Vector4 unity_ParticleUVShiftData at 96
}

Set Buffer  "unity_ParticleInstanceData" to set: 0, binding: 4, used in: Vertex 
Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 493

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 10 102 134 147 149 288 342 472
                              Name 134  "vs_TEXCOORD1"
                              Name 147  "vs_TEXCOORD3"
                              Decorate 10 BuiltIn InstanceIndex
                              MemberDecorate 12 0 Offset 0
                              MemberDecorate 12 1 Offset 4
                              Decorate 12 Block
                              Decorate 14 DescriptorSet 1
                              Decorate 14 Binding 1
                              Decorate 26 ArrayStride 4
                              MemberDecorate 27 0 Offset 0
                              Decorate 28 ArrayStride 56
                              MemberDecorate 29 0 NonWritable
                              MemberDecorate 29 0 Offset 0
                              Decorate 29 BufferBlock
                              Decorate 31 DescriptorSet 0
                              Decorate 31 Binding 4
                              Decorate 50 ArrayStride 16
                              MemberDecorate 51 0 Offset 0
                              MemberDecorate 51 1 Offset 16
                              MemberDecorate 51 2 Offset 32
                              MemberDecorate 51 3 Offset 96
                              MemberDecorate 51 4 Offset 112
                              Decorate 51 Block
                              Decorate 53 DescriptorSet 1
                              Decorate 53 Binding 0
                              Decorate 102 Location 3
                              Decorate 134(vs_TEXCOORD1) Location 0
                              Decorate 147(vs_TEXCOORD3) RelaxedPrecision
                              Decorate 147(vs_TEXCOORD3) Location 1
                              Decorate 149 RelaxedPrecision
                              Decorate 149 Location 2
                              Decorate 150 RelaxedPrecision
                              Decorate 288 Location 1
                              Decorate 342 Location 0
                              MemberDecorate 470 0 BuiltIn Position
                              MemberDecorate 470 1 BuiltIn PointSize
                              MemberDecorate 470 2 BuiltIn ClipDistance
                              Decorate 470 Block
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeInt 32 1
               7:             TypePointer Private 6(int)
               8:      7(ptr) Variable Private
               9:             TypePointer Input 6(int)
              10:      9(ptr) Variable Input
              12:             TypeStruct 6(int) 6(int)
              13:             TypePointer Uniform 12(struct)
              14:     13(ptr) Variable Uniform
              15:      6(int) Constant 0
              16:             TypePointer Uniform 6(int)
              20:             TypeFloat 32
              21:             TypeVector 20(float) 3
              22:             TypePointer Private 21(fvec3)
              23:     22(ptr) Variable Private
              24:             TypeInt 32 0
              25:     24(int) Constant 14
              26:             TypeArray 24(int) 25
              27:             TypeStruct 26
              28:             TypeRuntimeArray 27(struct)
              29:             TypeStruct 28
              30:             TypePointer Uniform 29(struct)
              31:     30(ptr) Variable Uniform
              33:      6(int) Constant 13
              34:             TypePointer Uniform 24(int)
              38:     24(int) Constant 0
              39:             TypePointer Private 20(float)
              45:     39(ptr) Variable Private
              48:             TypeVector 20(float) 4
              49:     24(int) Constant 4
              50:             TypeArray 48(fvec4) 49
              51:             TypeStruct 48(fvec4) 48(fvec4) 50 48(fvec4) 48(fvec4)
              52:             TypePointer Uniform 51(struct)
              53:     52(ptr) Variable Uniform
              54:      6(int) Constant 3
              55:     24(int) Constant 1
              56:             TypePointer Uniform 20(float)
              75:             TypePointer Private 48(fvec4)
              76:     75(ptr) Variable Private
              79:     24(int) Constant 2
              84:     24(int) Constant 3
              88:   20(float) Constant 1065353216
             100:             TypeVector 20(float) 2
             101:             TypePointer Input 100(fvec2)
             102:    101(ptr) Variable Input
             104:             TypePointer Uniform 48(fvec4)
             114:             TypeBool
             115:             TypePointer Private 114(bool)
             116:    115(ptr) Variable Private
             119:   20(float) Constant 0
             122:             TypePointer Function 100(fvec2)
             133:             TypePointer Output 100(fvec2)
134(vs_TEXCOORD1):    133(ptr) Variable Output
             137:      6(int) Constant 4
             146:             TypePointer Output 48(fvec4)
147(vs_TEXCOORD3):    146(ptr) Variable Output
             148:             TypePointer Input 48(fvec4)
             149:    148(ptr) Variable Input
             152:      6(int) Constant 7
             157:      6(int) Constant 8
             162:      6(int) Constant 6
             169:     75(ptr) Variable Private
             173:     75(ptr) Variable Private
             175:      6(int) Constant 1
             184:      6(int) Constant 2
             203:      6(int) Constant 5
             208:     22(ptr) Variable Private
             210:      6(int) Constant 9
             215:      6(int) Constant 10
             220:      6(int) Constant 11
             240:     75(ptr) Variable Private
             259:     22(ptr) Variable Private
             273:     39(ptr) Variable Private
             287:             TypePointer Input 21(fvec3)
             288:    287(ptr) Variable Input
             294:     22(ptr) Variable Private
             342:    148(ptr) Variable Input
             418:             TypePointer Function 21(fvec3)
             469:             TypeArray 20(float) 55
             470:             TypeStruct 48(fvec4) 20(float) 469
             471:             TypePointer Output 470(struct)
             472:    471(ptr) Variable Output
             481:             TypePointer Output 20(float)
               4:           2 Function None 3
               5:             Label
             123:    122(ptr) Variable Function
             419:    418(ptr) Variable Function
              11:      6(int) Load 10
              17:     16(ptr) AccessChain 14 15
              18:      6(int) Load 17
              19:      6(int) IAdd 11 18
                              Store 8 19
              32:      6(int) Load 8
              35:     34(ptr) AccessChain 31 15 32 15 33
              36:     24(int) Load 35
              37:   20(float) Bitcast 36
              40:     39(ptr) AccessChain 23 38
                              Store 40 37
              41:     39(ptr) AccessChain 23 38
              42:   20(float) Load 41
              43:   20(float) ExtInst 1(GLSL.std.450) 8(Floor) 42
              44:     39(ptr) AccessChain 23 38
                              Store 44 43
              46:     39(ptr) AccessChain 23 38
              47:   20(float) Load 46
              57:     56(ptr) AccessChain 53 54 55
              58:   20(float) Load 57
              59:   20(float) FDiv 47 58
                              Store 45 59
              60:   20(float) Load 45
              61:   20(float) ExtInst 1(GLSL.std.450) 8(Floor) 60
                              Store 45 61
              62:   20(float) Load 45
              63:   20(float) FNegate 62
              64:     56(ptr) AccessChain 53 54 55
              65:   20(float) Load 64
              66:   20(float) FMul 63 65
              67:     39(ptr) AccessChain 23 38
              68:   20(float) Load 67
              69:   20(float) FAdd 66 68
              70:     39(ptr) AccessChain 23 38
                              Store 70 69
              71:     39(ptr) AccessChain 23 38
              72:   20(float) Load 71
              73:   20(float) ExtInst 1(GLSL.std.450) 8(Floor) 72
              74:     39(ptr) AccessChain 23 38
                              Store 74 73
              77:     39(ptr) AccessChain 23 38
              78:   20(float) Load 77
              80:     56(ptr) AccessChain 53 54 79
              81:   20(float) Load 80
              82:   20(float) FMul 78 81
              83:     39(ptr) AccessChain 76 38
                              Store 83 82
              85:     56(ptr) AccessChain 53 54 84
              86:   20(float) Load 85
              87:   20(float) FNegate 86
              89:   20(float) FAdd 87 88
              90:     39(ptr) AccessChain 23 38
                              Store 90 89
              91:   20(float) Load 45
              92:   20(float) FNegate 91
              93:     56(ptr) AccessChain 53 54 84
              94:   20(float) Load 93
              95:   20(float) FMul 92 94
              96:     39(ptr) AccessChain 23 38
              97:   20(float) Load 96
              98:   20(float) FAdd 95 97
              99:     39(ptr) AccessChain 76 55
                              Store 99 98
             103:  100(fvec2) Load 102
             105:    104(ptr) AccessChain 53 54
             106:   48(fvec4) Load 105
             107:  100(fvec2) VectorShuffle 106 106 2 3
             108:  100(fvec2) FMul 103 107
             109:   48(fvec4) Load 76
             110:  100(fvec2) VectorShuffle 109 109 0 1
             111:  100(fvec2) FAdd 108 110
             112:   21(fvec3) Load 23
             113:   21(fvec3) VectorShuffle 112 111 3 4 2
                              Store 23 113
             117:     56(ptr) AccessChain 53 54 38
             118:   20(float) Load 117
             120:   114(bool) FOrdNotEqual 118 119
                              Store 116 120
             121:   114(bool) Load 116
                              SelectionMerge 125 None
                              BranchConditional 121 124 128
             124:               Label
             126:   21(fvec3)   Load 23
             127:  100(fvec2)   VectorShuffle 126 126 0 1
                                Store 123 127
                                Branch 125
             128:               Label
             129:  100(fvec2)   Load 102
                                Store 123 129
                                Branch 125
             125:             Label
             130:  100(fvec2) Load 123
             131:   21(fvec3) Load 23
             132:   21(fvec3) VectorShuffle 131 130 3 4 2
                              Store 23 132
             135:   21(fvec3) Load 23
             136:  100(fvec2) VectorShuffle 135 135 0 1
             138:    104(ptr) AccessChain 53 137
             139:   48(fvec4) Load 138
             140:  100(fvec2) VectorShuffle 139 139 0 1
             141:  100(fvec2) FMul 136 140
             142:    104(ptr) AccessChain 53 137
             143:   48(fvec4) Load 142
             144:  100(fvec2) VectorShuffle 143 143 2 3
             145:  100(fvec2) FAdd 141 144
                              Store 134(vs_TEXCOORD1) 145
             150:   48(fvec4) Load 149
                              Store 147(vs_TEXCOORD3) 150
             151:      6(int) Load 8
             153:     34(ptr) AccessChain 31 15 151 15 152
             154:     24(int) Load 153
             155:   20(float) Bitcast 154
             156:      6(int) Load 8
             158:     34(ptr) AccessChain 31 15 156 15 157
             159:     24(int) Load 158
             160:   20(float) Bitcast 159
             161:      6(int) Load 8
             163:     34(ptr) AccessChain 31 15 161 15 162
             164:     24(int) Load 163
             165:   20(float) Bitcast 164
             166:   21(fvec3) CompositeConstruct 155 160 165
             167:   48(fvec4) Load 76
             168:   48(fvec4) VectorShuffle 167 166 4 5 6 3
                              Store 76 168
             170:     39(ptr) AccessChain 76 55
             171:   20(float) Load 170
             172:     39(ptr) AccessChain 169 79
                              Store 172 171
             174:      6(int) Load 8
             176:     34(ptr) AccessChain 31 15 174 15 175
             177:     24(int) Load 176
             178:   20(float) Bitcast 177
             179:      6(int) Load 8
             180:     34(ptr) AccessChain 31 15 179 15 15
             181:     24(int) Load 180
             182:   20(float) Bitcast 181
             183:      6(int) Load 8
             185:     34(ptr) AccessChain 31 15 183 15 184
             186:     24(int) Load 185
             187:   20(float) Bitcast 186
             188:   21(fvec3) CompositeConstruct 178 182 187
             189:   48(fvec4) Load 173
             190:   48(fvec4) VectorShuffle 189 188 4 5 6 3
                              Store 173 190
             191:     39(ptr) AccessChain 173 79
             192:   20(float) Load 191
             193:     39(ptr) AccessChain 169 38
                              Store 193 192
             194:      6(int) Load 8
             195:     34(ptr) AccessChain 31 15 194 15 54
             196:     24(int) Load 195
             197:   20(float) Bitcast 196
             198:      6(int) Load 8
             199:     34(ptr) AccessChain 31 15 198 15 137
             200:     24(int) Load 199
             201:   20(float) Bitcast 200
             202:      6(int) Load 8
             204:     34(ptr) AccessChain 31 15 202 15 203
             205:     24(int) Load 204
             206:   20(float) Bitcast 205
             207:   21(fvec3) CompositeConstruct 197 201 206
                              Store 23 207
             209:      6(int) Load 8
             211:     34(ptr) AccessChain 31 15 209 15 210
             212:     24(int) Load 211
             213:   20(float) Bitcast 212
             214:      6(int) Load 8
             216:     34(ptr) AccessChain 31 15 214 15 215
             217:     24(int) Load 216
             218:   20(float) Bitcast 217
             219:      6(int) Load 8
             221:     34(ptr) AccessChain 31 15 219 15 220
             222:     24(int) Load 221
             223:   20(float) Bitcast 222
             224:   21(fvec3) CompositeConstruct 213 218 223
                              Store 208 224
             225:     39(ptr) AccessChain 23 79
             226:   20(float) Load 225
             227:     39(ptr) AccessChain 169 55
                              Store 227 226
             228:     39(ptr) AccessChain 76 38
             229:   20(float) Load 228
             230:     39(ptr) AccessChain 173 79
                              Store 230 229
             231:     39(ptr) AccessChain 173 55
             232:   20(float) Load 231
             233:     39(ptr) AccessChain 76 38
                              Store 233 232
             234:     39(ptr) AccessChain 23 38
             235:   20(float) Load 234
             236:     39(ptr) AccessChain 76 55
                              Store 236 235
             237:     39(ptr) AccessChain 23 55
             238:   20(float) Load 237
             239:     39(ptr) AccessChain 173 55
                              Store 239 238
             241:   48(fvec4) Load 169
             242:   21(fvec3) VectorShuffle 241 241 2 0 1
             243:   48(fvec4) Load 76
             244:   21(fvec3) VectorShuffle 243 243 1 2 0
             245:   21(fvec3) FMul 242 244
             246:   48(fvec4) Load 240
             247:   48(fvec4) VectorShuffle 246 245 4 5 6 3
                              Store 240 247
             248:   48(fvec4) Load 76
             249:   21(fvec3) VectorShuffle 248 248 2 0 1
             250:   48(fvec4) Load 169
             251:   21(fvec3) VectorShuffle 250 250 1 2 0
             252:   21(fvec3) FMul 249 251
             253:   48(fvec4) Load 240
             254:   21(fvec3) VectorShuffle 253 253 0 1 2
             255:   21(fvec3) FNegate 254
             256:   21(fvec3) FAdd 252 255
             257:   48(fvec4) Load 240
             258:   48(fvec4) VectorShuffle 257 256 4 5 6 3
                              Store 240 258
             260:   48(fvec4) Load 169
             261:   21(fvec3) VectorShuffle 260 260 1 2 0
             262:   48(fvec4) Load 173
             263:   21(fvec3) VectorShuffle 262 262 2 0 1
             264:   21(fvec3) FMul 261 263
                              Store 259 264
             265:   48(fvec4) Load 173
             266:   21(fvec3) VectorShuffle 265 265 1 2 0
             267:   48(fvec4) Load 169
             268:   21(fvec3) VectorShuffle 267 267 2 0 1
             269:   21(fvec3) FMul 266 268
             270:   21(fvec3) Load 259
             271:   21(fvec3) FNegate 270
             272:   21(fvec3) FAdd 269 271
                              Store 259 272
             274:   48(fvec4) Load 76
             275:   21(fvec3) VectorShuffle 274 274 0 1 2
             276:   21(fvec3) Load 259
             277:   20(float) Dot 275 276
                              Store 273 277
             278:   20(float) Load 273
             279:   20(float) FDiv 88 278
                              Store 273 279
             280:   20(float) Load 273
             281:   21(fvec3) CompositeConstruct 280 280 280
             282:   48(fvec4) Load 240
             283:   21(fvec3) VectorShuffle 282 282 0 1 2
             284:   21(fvec3) FMul 281 283
             285:   48(fvec4) Load 240
             286:   48(fvec4) VectorShuffle 285 284 4 5 6 3
                              Store 240 286
             289:   21(fvec3) Load 288
             290:   48(fvec4) Load 240
             291:   21(fvec3) VectorShuffle 290 290 0 1 2
             292:   20(float) Dot 289 291
             293:     39(ptr) AccessChain 240 55
                              Store 293 292
             295:   48(fvec4) Load 76
             296:   21(fvec3) VectorShuffle 295 295 2 0 1
             297:   48(fvec4) Load 173
             298:   21(fvec3) VectorShuffle 297 297 1 2 0
             299:   21(fvec3) FMul 296 298
                              Store 294 299
             300:   48(fvec4) Load 76
             301:   21(fvec3) VectorShuffle 300 300 1 2 0
             302:   48(fvec4) Load 173
             303:   21(fvec3) VectorShuffle 302 302 2 0 1
             304:   21(fvec3) FMul 301 303
             305:   21(fvec3) Load 294
             306:   21(fvec3) FNegate 305
             307:   21(fvec3) FAdd 304 306
                              Store 294 307
             308:   20(float) Load 273
             309:   21(fvec3) CompositeConstruct 308 308 308
             310:   21(fvec3) Load 294
             311:   21(fvec3) FMul 309 310
                              Store 294 311
             312:   20(float) Load 273
             313:   21(fvec3) CompositeConstruct 312 312 312
             314:   21(fvec3) Load 259
             315:   21(fvec3) FMul 313 314
                              Store 259 315
             316:   21(fvec3) Load 288
             317:   21(fvec3) Load 259
             318:   20(float) Dot 316 317
             319:     39(ptr) AccessChain 240 38
                              Store 319 318
             320:   21(fvec3) Load 288
             321:   21(fvec3) Load 294
             322:   20(float) Dot 320 321
             323:     39(ptr) AccessChain 240 79
                              Store 323 322
             324:   48(fvec4) Load 240
             325:   21(fvec3) VectorShuffle 324 324 0 1 2
             326:   48(fvec4) Load 240
             327:   21(fvec3) VectorShuffle 326 326 0 1 2
             328:   20(float) Dot 325 327
                              Store 273 328
             329:   20(float) Load 273
             330:   20(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 329
                              Store 273 330
             331:   20(float) Load 273
             332:   21(fvec3) CompositeConstruct 331 331 331
             333:   48(fvec4) Load 240
             334:   21(fvec3) VectorShuffle 333 333 0 1 2
             335:   21(fvec3) FMul 332 334
             336:   48(fvec4) Load 240
             337:   48(fvec4) VectorShuffle 336 335 4 5 6 3
                              Store 240 337
             338:     39(ptr) AccessChain 208 38
             339:   20(float) Load 338
             340:     39(ptr) AccessChain 76 84
                              Store 340 339
             341:   48(fvec4) Load 76
             343:   48(fvec4) Load 342
             344:   20(float) Dot 341 343
             345:     39(ptr) AccessChain 76 38
                              Store 345 344
             346:     39(ptr) AccessChain 208 55
             347:   20(float) Load 346
             348:     39(ptr) AccessChain 173 84
                              Store 348 347
             349:     39(ptr) AccessChain 208 79
             350:   20(float) Load 349
             351:     39(ptr) AccessChain 169 84
                              Store 351 350
             352:   48(fvec4) Load 169
             353:   48(fvec4) Load 342
             354:   20(float) Dot 352 353
             355:     39(ptr) AccessChain 76 79
                              Store 355 354
             356:   48(fvec4) Load 173
             357:   48(fvec4) Load 342
             358:   20(float) Dot 356 357
             359:     39(ptr) AccessChain 76 55
                              Store 359 358
             360:   48(fvec4) Load 76
             361:   21(fvec3) VectorShuffle 360 360 0 1 2
             362:   21(fvec3) FNegate 361
             363:    104(ptr) AccessChain 53 15
             364:   48(fvec4) Load 363
             365:   21(fvec3) VectorShuffle 364 364 3 3 3
             366:   21(fvec3) FMul 362 365
             367:    104(ptr) AccessChain 53 15
             368:   48(fvec4) Load 367
             369:   21(fvec3) VectorShuffle 368 368 0 1 2
             370:   21(fvec3) FAdd 366 369
             371:   48(fvec4) Load 169
             372:   48(fvec4) VectorShuffle 371 370 4 5 6 3
                              Store 169 372
             373:   48(fvec4) Load 169
             374:   21(fvec3) VectorShuffle 373 373 0 1 2
             375:   48(fvec4) Load 169
             376:   21(fvec3) VectorShuffle 375 375 0 1 2
             377:   20(float) Dot 374 376
                              Store 273 377
             378:   20(float) Load 273
             379:   20(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 378
                              Store 273 379
             380:   20(float) Load 273
             381:   21(fvec3) CompositeConstruct 380 380 380
             382:   48(fvec4) Load 169
             383:   21(fvec3) VectorShuffle 382 382 0 1 2
             384:   21(fvec3) FMul 381 383
             385:   48(fvec4) Load 169
             386:   48(fvec4) VectorShuffle 385 384 4 5 6 3
                              Store 169 386
             387:   48(fvec4) Load 240
             388:   21(fvec3) VectorShuffle 387 387 0 1 2
             389:   48(fvec4) Load 169
             390:   21(fvec3) VectorShuffle 389 389 0 1 2
             391:   20(float) Dot 388 390
                              Store 273 391
             392:   20(float) Load 273
             393:   20(float) FNegate 392
             394:   20(float) Load 273
             395:   20(float) FMul 393 394
             396:   20(float) FAdd 395 88
                              Store 273 396
             397:   20(float) Load 273
             398:   20(float) ExtInst 1(GLSL.std.450) 31(Sqrt) 397
                              Store 273 398
             399:   20(float) Load 273
             400:     56(ptr) AccessChain 53 175 79
             401:   20(float) Load 400
             402:   20(float) FMul 399 401
                              Store 273 402
             403:   48(fvec4) Load 240
             404:   21(fvec3) VectorShuffle 403 403 0 1 2
             405:   21(fvec3) FNegate 404
             406:   20(float) Load 273
             407:   21(fvec3) CompositeConstruct 406 406 406
             408:   21(fvec3) FMul 405 407
             409:   48(fvec4) Load 76
             410:   21(fvec3) VectorShuffle 409 409 0 1 2
             411:   21(fvec3) FAdd 408 410
             412:   48(fvec4) Load 240
             413:   48(fvec4) VectorShuffle 412 411 4 5 6 3
                              Store 240 413
             414:     56(ptr) AccessChain 53 175 79
             415:   20(float) Load 414
             416:   114(bool) FOrdNotEqual 415 119
                              Store 116 416
             417:   114(bool) Load 116
                              SelectionMerge 421 None
                              BranchConditional 417 420 424
             420:               Label
             422:   48(fvec4)   Load 240
             423:   21(fvec3)   VectorShuffle 422 422 0 1 2
                                Store 419 423
                                Branch 421
             424:               Label
             425:   48(fvec4)   Load 76
             426:   21(fvec3)   VectorShuffle 425 425 0 1 2
                                Store 419 426
                                Branch 421
             421:             Label
             427:   21(fvec3) Load 419
             428:   48(fvec4) Load 240
             429:   48(fvec4) VectorShuffle 428 427 4 5 6 3
                              Store 240 429
             430:   48(fvec4) Load 240
             431:   48(fvec4) VectorShuffle 430 430 1 1 1 1
             432:    104(ptr) AccessChain 53 184 175
             433:   48(fvec4) Load 432
             434:   48(fvec4) FMul 431 433
                              Store 76 434
             435:    104(ptr) AccessChain 53 184 15
             436:   48(fvec4) Load 435
             437:   48(fvec4) Load 240
             438:   48(fvec4) VectorShuffle 437 437 0 0 0 0
             439:   48(fvec4) FMul 436 438
             440:   48(fvec4) Load 76
             441:   48(fvec4) FAdd 439 440
                              Store 76 441
             442:    104(ptr) AccessChain 53 184 184
             443:   48(fvec4) Load 442
             444:   48(fvec4) Load 240
             445:   48(fvec4) VectorShuffle 444 444 2 2 2 2
             446:   48(fvec4) FMul 443 445
             447:   48(fvec4) Load 76
             448:   48(fvec4) FAdd 446 447
                              Store 240 448
             449:    104(ptr) AccessChain 53 184 54
             450:   48(fvec4) Load 449
             451:   48(fvec4) Load 342
             452:   48(fvec4) VectorShuffle 451 451 3 3 3 3
             453:   48(fvec4) FMul 450 452
             454:   48(fvec4) Load 240
             455:   48(fvec4) FAdd 453 454
                              Store 240 455
             456:     39(ptr) AccessChain 240 84
             457:   20(float) Load 456
             458:     39(ptr) AccessChain 240 79
             459:   20(float) Load 458
             460:   20(float) ExtInst 1(GLSL.std.450) 37(FMin) 457 459
             461:     39(ptr) AccessChain 76 38
                              Store 461 460
             462:     39(ptr) AccessChain 240 79
             463:   20(float) Load 462
             464:   20(float) FNegate 463
             465:     39(ptr) AccessChain 76 38
             466:   20(float) Load 465
             467:   20(float) FAdd 464 466
             468:     39(ptr) AccessChain 76 38
                              Store 468 467
             473:     56(ptr) AccessChain 53 175 55
             474:   20(float) Load 473
             475:     39(ptr) AccessChain 76 38
             476:   20(float) Load 475
             477:   20(float) FMul 474 476
             478:     39(ptr) AccessChain 240 79
             479:   20(float) Load 478
             480:   20(float) FAdd 477 479
             482:    481(ptr) AccessChain 472 15 79
                              Store 482 480
             483:   48(fvec4) Load 240
             484:   21(fvec3) VectorShuffle 483 483 0 1 3
             485:    146(ptr) AccessChain 472 15
             486:   48(fvec4) Load 485
             487:   48(fvec4) VectorShuffle 486 484 4 5 2 6
                              Store 485 487
             488:    481(ptr) AccessChain 472 15 55
             489:   20(float) Load 488
             490:   20(float) FNegate 489
             491:    481(ptr) AccessChain 472 15 55
                              Store 491 490
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 102

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 11 40 46 99
                              ExecutionMode 4 OriginUpperLeft
                              Name 40  "vs_TEXCOORD1"
                              Name 46  "vs_TEXCOORD3"
                              Decorate 11 BuiltIn FragCoord
                              Decorate 27 RelaxedPrecision
                              Decorate 30 RelaxedPrecision
                              Decorate 30 DescriptorSet 0
                              Decorate 30 Binding 2
                              Decorate 31 RelaxedPrecision
                              Decorate 34 RelaxedPrecision
                              Decorate 34 DescriptorSet 0
                              Decorate 34 Binding 0
                              Decorate 35 RelaxedPrecision
                              Decorate 40(vs_TEXCOORD1) Location 0
                              Decorate 43 RelaxedPrecision
                              Decorate 44 RelaxedPrecision
                              Decorate 45 RelaxedPrecision
                              Decorate 46(vs_TEXCOORD3) RelaxedPrecision
                              Decorate 46(vs_TEXCOORD3) Location 1
                              Decorate 48 RelaxedPrecision
                              Decorate 49 RelaxedPrecision
                              Decorate 50 RelaxedPrecision
                              Decorate 51 RelaxedPrecision
                              Decorate 53 RelaxedPrecision
                              Decorate 56 RelaxedPrecision
                              Decorate 68 RelaxedPrecision
                              Decorate 68 DescriptorSet 0
                              Decorate 68 Binding 3
                              Decorate 69 RelaxedPrecision
                              Decorate 70 RelaxedPrecision
                              Decorate 70 DescriptorSet 0
                              Decorate 70 Binding 1
                              Decorate 71 RelaxedPrecision
                              Decorate 76 RelaxedPrecision
                              Decorate 77 RelaxedPrecision
                              Decorate 78 RelaxedPrecision
                              Decorate 80 RelaxedPrecision
                              Decorate 84 RelaxedPrecision
                              Decorate 99 RelaxedPrecision
                              Decorate 99 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Function 7(fvec4)
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              12:             TypeVector 6(float) 3
              15:    6(float) Constant 1065353216
              16:             TypeInt 32 0
              17:     16(int) Constant 3
              18:             TypePointer Input 6(float)
              26:             TypePointer Private 6(float)
              27:     26(ptr) Variable Private
              28:             TypeImage 6(float) 2D sampled format:Unknown
              29:             TypePointer UniformConstant 28
              30:     29(ptr) Variable UniformConstant
              32:             TypeSampler
              33:             TypePointer UniformConstant 32
              34:     33(ptr) Variable UniformConstant
              36:             TypeSampledImage 28
              38:             TypeVector 6(float) 2
              39:             TypePointer Input 38(fvec2)
40(vs_TEXCOORD1):     39(ptr) Variable Input
              44:     26(ptr) Variable Private
46(vs_TEXCOORD3):     10(ptr) Variable Input
              50:     26(ptr) Variable Private
              52:    6(float) Constant 1064304640
              54:             TypePointer Private 12(fvec3)
              55:     54(ptr) Variable Private
              57:     16(int) Constant 2
              61:    6(float) Constant 1048576000
              62:   38(fvec2) ConstantComposite 61 61
              66:             TypeImage 6(float) 3D sampled format:Unknown
              67:             TypePointer UniformConstant 66
              68:     67(ptr) Variable UniformConstant
              70:     33(ptr) Variable UniformConstant
              72:             TypeSampledImage 66
              77:     26(ptr) Variable Private
              79:    6(float) Constant 3156465418
              81:             TypeBool
              82:             TypePointer Private 81(bool)
              83:     82(ptr) Variable Private
              85:    6(float) Constant 0
              88:             TypeInt 32 1
              89:     88(int) Constant 0
              90:     88(int) Constant 1
              92:     88(int) Constant 4294967295
              98:             TypePointer Output 7(fvec4)
              99:     98(ptr) Variable Output
             100:    7(fvec4) ConstantComposite 85 85 85 85
               4:           2 Function None 3
               5:             Label
               9:      8(ptr) Variable Function
              13:    7(fvec4) Load 11
              14:   12(fvec3) VectorShuffle 13 13 0 1 2
              19:     18(ptr) AccessChain 11 17
              20:    6(float) Load 19
              21:    6(float) FDiv 15 20
              22:    6(float) CompositeExtract 14 0
              23:    6(float) CompositeExtract 14 1
              24:    6(float) CompositeExtract 14 2
              25:    7(fvec4) CompositeConstruct 22 23 24 21
                              Store 9 25
              31:          28 Load 30
              35:          32 Load 34
              37:          36 SampledImage 31 35
              41:   38(fvec2) Load 40(vs_TEXCOORD1)
              42:    7(fvec4) ImageSampleImplicitLod 37 41
              43:    6(float) CompositeExtract 42 3
                              Store 27 43
              45:    6(float) Load 27
              47:     18(ptr) AccessChain 46(vs_TEXCOORD3) 17
              48:    6(float) Load 47
              49:    6(float) FMul 45 48
                              Store 44 49
              51:    6(float) Load 44
              53:    6(float) FMul 51 52
                              Store 50 53
              56:    6(float) Load 50
              58:     26(ptr) AccessChain 55 57
                              Store 58 56
              59:    7(fvec4) Load 9
              60:   38(fvec2) VectorShuffle 59 59 0 1
              63:   38(fvec2) FMul 60 62
              64:   12(fvec3) Load 55
              65:   12(fvec3) VectorShuffle 64 63 3 4 2
                              Store 55 65
              69:          66 Load 68
              71:          32 Load 70
              73:          72 SampledImage 69 71
              74:   12(fvec3) Load 55
              75:    7(fvec4) ImageSampleImplicitLod 73 74
              76:    6(float) CompositeExtract 75 3
                              Store 27 76
              78:    6(float) Load 27
              80:    6(float) FAdd 78 79
                              Store 77 80
              84:    6(float) Load 77
              86:    81(bool) FOrdLessThan 84 85
                              Store 83 86
              87:    81(bool) Load 83
              91:     88(int) Select 87 90 89
              93:     88(int) IMul 91 92
              94:    81(bool) INotEqual 93 89
                              SelectionMerge 96 None
                              BranchConditional 94 95 96
              95:               Label
                                Kill
              96:             Label
                              Store 99 100
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SHADOWS_CUBE 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 37 math, 7 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"

Constant Buffer "UnityLighting" (768 bytes) on slot 0 {
  Vector4 _WorldSpaceLightPos0 at 0
}
Constant Buffer "UnityShadows" (416 bytes) on slot 1 {
  Vector4 unity_LightShadowBias at 80
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 272
}
Constant Buffer "UnityDrawCallInfo" (16 bytes) on slot 3 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// COLOR                    0   xyzw        2     NONE   float       
// TEXCOORD                 0   xy          3     NONE   float       
// SV_InstanceID            0   x           4   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
//
      vs_5_0
      dcl_globalFlags refactoringAllowed
      dcl_constantbuffer CB0[1], immediateIndexed
      dcl_constantbuffer CB1[6], immediateIndexed
      dcl_constantbuffer CB2[21], immediateIndexed
      dcl_constantbuffer CB3[1], immediateIndexed
      dcl_resource_structured t0, 56
      dcl_input v0.xyzw
      dcl_input v1.xyz
      dcl_input_sgv v4.x, instance_id
      dcl_output_siv o0.xyzw, position
      dcl_temps 7
   0: iadd r0.x, v4.x, cb3[0].x
   1: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r1.xyz, r0.x, l(24), t0.yzxx
   2: mov r2.z, r1.y
   3: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r3.xyz, r0.x, l(0), t0.yxzx
   4: mov r2.x, r3.z
   5: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r0.yzw, r0.x, l(12), t0.xxyz
   6: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r4.xyz, r0.x, l(36), t0.xyzx
   7: mov r2.y, r0.w
   8: mov r3.z, r1.x
   9: mov r1.x, r3.y
  10: mov r1.y, r0.y
  11: mov r3.y, r0.z
  12: mul r0.xyz, r2.zxyz, r1.yzxy
  13: mad r0.xyz, r1.zxyz, r2.yzxy, -r0.xyzx
  14: mul r5.xyz, r2.yzxy, r3.zxyz
  15: mad r5.xyz, r3.yzxy, r2.zxyz, -r5.xyzx
  16: dp3 r0.w, r1.xyzx, r5.xyzx
  17: rcp r0.w, r0.w
  18: mul r0.xyz, r0.wwww, r0.xyzx
  19: dp3 r0.y, v1.xyzx, r0.xyzx
  20: mul r6.xyz, r1.zxyz, r3.yzxy
  21: mad r6.xyz, r1.yzxy, r3.zxyz, -r6.xyzx
  22: mul r6.xyz, r0.wwww, r6.xyzx
  23: mul r5.xyz, r0.wwww, r5.xyzx
  24: dp3 r0.x, v1.xyzx, r5.xyzx
  25: dp3 r0.z, v1.xyzx, r6.xyzx
  26: dp3 r0.w, r0.xyzx, r0.xyzx
  27: rsq r0.w, r0.w
  28: mul r0.xyz, r0.wwww, r0.xyzx
  29: mov r1.w, r4.x
  30: dp4 r1.x, r1.xyzw, v0.xyzw
  31: mov r3.w, r4.y
  32: mov r2.w, r4.z
  33: dp4 r1.z, r2.xyzw, v0.xyzw
  34: dp4 r1.y, r3.xyzw, v0.xyzw
  35: mad r2.xyz, -r1.xyzx, cb0[0].wwww, cb0[0].xyzx
  36: dp3 r0.w, r2.xyzx, r2.xyzx
  37: rsq r0.w, r0.w
  38: mul r2.xyz, r0.wwww, r2.xyzx
  39: dp3 r0.w, r0.xyzx, r2.xyzx
  40: mad r0.w, -r0.w, r0.w, l(1.000000)
  41: sqrt r0.w, r0.w
  42: mul r0.w, r0.w, cb1[5].z
  43: mad r0.xyz, -r0.xyzx, r0.wwww, r1.xyzx
  44: ne r0.w, cb1[5].z, l(0.000000)
  45: movc r0.xyz, r0.wwww, r0.xyzx, r1.xyzx
  46: mul r1.xyzw, r0.yyyy, cb2[18].xyzw
  47: mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
  48: mad r0.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
  49: mad r0.xyzw, cb2[20].xyzw, v0.wwww, r0.xyzw
  50: min r1.x, r0.w, r0.z
  51: add r1.x, -r0.z, r1.x
  52: mad o0.z, cb1[5].y, r1.x, r0.z
  53: mov o0.xyw, r0.xyxw
  54: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_5_0
      dcl_globalFlags refactoringAllowed
      dcl_output o0.xyzw
   0: mov o0.xyzw, l(0,0,0,0)
   1: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SHADOWS_CUBE 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Constant Buffer "$Globals" (100 bytes) {
  Matrix4x4 unity_MatrixVP at 32
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  ScalarInt unity_BaseInstanceID at 96
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat1.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 0]));
    u_xlat2.z = u_xlat1.y;
    u_xlat3.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 2]));
    u_xlat2.x = u_xlat3.z;
    u_xlat7.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 2]));
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 2]));
    u_xlat2.y = u_xlat7.z;
    u_xlat3.z = u_xlat1.x;
    u_xlat1.x = u_xlat3.y;
    u_xlat1.y = u_xlat7.x;
    u_xlat3.y = u_xlat7.y;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat0.xyz);
    u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat5.xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat21 = float(1.0) / float(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.y = dot(in_NORMAL0.xyz, u_xlat0.xyz);
    u_xlat6.xyz = u_xlat1.zxy * u_xlat3.yzx;
    u_xlat6.xyz = u_xlat1.yzx * u_xlat3.zxy + (-u_xlat6.xyz);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat5.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat5.xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, u_xlat6.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat1.w = u_xlat4.x;
    u_xlat1.x = dot(u_xlat1, in_POSITION0);
    u_xlat3.w = u_xlat4.y;
    u_xlat2.w = u_xlat4.z;
    u_xlat1.z = dot(u_xlat2, in_POSITION0);
    u_xlat1.y = dot(u_xlat3, in_POSITION0);
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat21 = (-u_xlat21) * u_xlat21 + 1.0;
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = u_xlat21 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat21) + u_xlat1.xyz;
    u_xlatb21 = unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb21)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.x = max((-u_xlat0.w), u_xlat0.z);
    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es

precision highp float;
precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SHADOWS_CUBE 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"

Constant Buffer "VGlobals" (96 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 32
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_LightShadowBias;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float3 u_xlat4;
    float3 u_xlat5;
    float3 u_xlat6;
    float3 u_xlat7;
    float u_xlat21;
    bool u_xlatb21;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x18 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x18 >> 2) + 0]));
    u_xlat2.z = u_xlat1.y;
    u_xlat3.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x0 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x0 >> 2) + 2]));
    u_xlat2.x = u_xlat3.z;
    u_xlat7.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0xc >> 2) + 2]));
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x24 >> 2) + 2]));
    u_xlat2.y = u_xlat7.z;
    u_xlat3.z = u_xlat1.x;
    u_xlat1.x = u_xlat3.y;
    u_xlat1.y = u_xlat7.x;
    u_xlat3.y = u_xlat7.y;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat1.yzx;
    u_xlat0.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat0.xyz));
    u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy;
    u_xlat5.xyz = fma(u_xlat3.yzx, u_xlat2.zxy, (-u_xlat5.xyz));
    u_xlat21 = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat21 = float(1.0) / float(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.y = dot(input.NORMAL0.xyz, u_xlat0.xyz);
    u_xlat6.xyz = u_xlat1.zxy * u_xlat3.yzx;
    u_xlat6.xyz = fma(u_xlat1.yzx, u_xlat3.zxy, (-u_xlat6.xyz));
    u_xlat6.xyz = float3(u_xlat21) * u_xlat6.xyz;
    u_xlat5.xyz = float3(u_xlat21) * u_xlat5.xyz;
    u_xlat0.x = dot(input.NORMAL0.xyz, u_xlat5.xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, u_xlat6.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat1.w = u_xlat4.x;
    u_xlat1.x = dot(u_xlat1, input.POSITION0);
    u_xlat3.w = u_xlat4.y;
    u_xlat2.w = u_xlat4.z;
    u_xlat1.z = dot(u_xlat2, input.POSITION0);
    u_xlat1.y = dot(u_xlat3, input.POSITION0);
    u_xlat2.xyz = fma((-u_xlat1.xyz), VGlobals._WorldSpaceLightPos0.www, VGlobals._WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat2.xyz = float3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat21 = fma((-u_xlat21), u_xlat21, 1.0);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = u_xlat21 * VGlobals.unity_LightShadowBias.z;
    u_xlat0.xyz = fma((-u_xlat0.xyz), float3(u_xlat21), u_xlat1.xyz);
    u_xlatb21 = VGlobals.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb21)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], input.POSITION0.wwww, u_xlat0);
    u_xlat1.x = min(u_xlat0.w, u_xlat0.z);
    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
    output.mtl_Position.z = fma(VGlobals.unity_LightShadowBias.y, u_xlat1.x, u_xlat0.z);
    output.mtl_Position.xyw = u_xlat0.xyw;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_Target0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SHADOWS_CUBE 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Constant Buffer "$Globals" (100 bytes) {
  Matrix4x4 unity_MatrixVP at 32
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  ScalarInt unity_BaseInstanceID at 96
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require
#ifdef GL_ARB_shader_storage_buffer_object
#extension GL_ARB_shader_storage_buffer_object : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat1.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 0]));
    u_xlat2.z = u_xlat1.y;
    u_xlat3.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 2]));
    u_xlat2.x = u_xlat3.z;
    u_xlat7.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 2]));
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 2]));
    u_xlat2.y = u_xlat7.z;
    u_xlat3.z = u_xlat1.x;
    u_xlat1.x = u_xlat3.y;
    u_xlat1.y = u_xlat7.x;
    u_xlat3.y = u_xlat7.y;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat0.xyz);
    u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat5.xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat21 = float(1.0) / float(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.y = dot(in_NORMAL0.xyz, u_xlat0.xyz);
    u_xlat6.xyz = u_xlat1.zxy * u_xlat3.yzx;
    u_xlat6.xyz = u_xlat1.yzx * u_xlat3.zxy + (-u_xlat6.xyz);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat5.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat5.xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, u_xlat6.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat1.w = u_xlat4.x;
    u_xlat1.x = dot(u_xlat1, in_POSITION0);
    u_xlat3.w = u_xlat4.y;
    u_xlat2.w = u_xlat4.z;
    u_xlat1.z = dot(u_xlat2, in_POSITION0);
    u_xlat1.y = dot(u_xlat3, in_POSITION0);
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat21 = (-u_xlat21) * u_xlat21 + 1.0;
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = u_xlat21 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat21) + u_xlat1.xyz;
    u_xlatb21 = unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb21)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.x = max((-u_xlat0.w), u_xlat0.z);
    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

layout(location = 0) out vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SHADOWS_CUBE 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Normal"
Uses vertex data channel "Vertex"

Constant Buffer "UnityDrawCallInfo" (8 bytes) on set: 1, binding: 1, used in: Vertex  {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "VGlobals2083989622" (96 bytes) on set: 1, binding: 0, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 32
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
}

Set Buffer  "unity_ParticleInstanceData" to set: 0, binding: 0, used in: Vertex 
Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 399

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 10 180 236 377
                              Decorate 10 BuiltIn InstanceIndex
                              MemberDecorate 12 0 Offset 0
                              MemberDecorate 12 1 Offset 4
                              Decorate 12 Block
                              Decorate 14 DescriptorSet 1
                              Decorate 14 Binding 1
                              Decorate 26 ArrayStride 4
                              MemberDecorate 27 0 Offset 0
                              Decorate 28 ArrayStride 56
                              MemberDecorate 29 0 NonWritable
                              MemberDecorate 29 0 Offset 0
                              Decorate 29 BufferBlock
                              Decorate 31 DescriptorSet 0
                              Decorate 31 Binding 0
                              Decorate 180 Location 1
                              Decorate 236 Location 0
                              Decorate 258 ArrayStride 16
                              MemberDecorate 259 0 Offset 0
                              MemberDecorate 259 1 Offset 16
                              MemberDecorate 259 2 Offset 32
                              Decorate 259 Block
                              Decorate 261 DescriptorSet 1
                              Decorate 261 Binding 0
                              MemberDecorate 375 0 BuiltIn Position
                              MemberDecorate 375 1 BuiltIn PointSize
                              MemberDecorate 375 2 BuiltIn ClipDistance
                              Decorate 375 Block
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeInt 32 1
               7:             TypePointer Private 6(int)
               8:      7(ptr) Variable Private
               9:             TypePointer Input 6(int)
              10:      9(ptr) Variable Input
              12:             TypeStruct 6(int) 6(int)
              13:             TypePointer Uniform 12(struct)
              14:     13(ptr) Variable Uniform
              15:      6(int) Constant 0
              16:             TypePointer Uniform 6(int)
              20:             TypeFloat 32
              21:             TypeVector 20(float) 4
              22:             TypePointer Private 21(fvec4)
              23:     22(ptr) Variable Private
              24:             TypeInt 32 0
              25:     24(int) Constant 14
              26:             TypeArray 24(int) 25
              27:             TypeStruct 26
              28:             TypeRuntimeArray 27(struct)
              29:             TypeStruct 28
              30:             TypePointer Uniform 29(struct)
              31:     30(ptr) Variable Uniform
              33:      6(int) Constant 7
              34:             TypePointer Uniform 24(int)
              39:      6(int) Constant 8
              44:      6(int) Constant 6
              48:             TypeVector 20(float) 3
              52:     22(ptr) Variable Private
              53:     24(int) Constant 1
              54:             TypePointer Private 20(float)
              57:     24(int) Constant 2
              59:     22(ptr) Variable Private
              61:      6(int) Constant 1
              70:      6(int) Constant 2
              79:     24(int) Constant 0
              81:             TypePointer Private 48(fvec3)
              82:     81(ptr) Variable Private
              84:      6(int) Constant 3
              89:      6(int) Constant 4
              94:      6(int) Constant 5
              99:     81(ptr) Variable Private
             101:      6(int) Constant 9
             106:      6(int) Constant 10
             111:      6(int) Constant 11
             131:     22(ptr) Variable Private
             150:     81(ptr) Variable Private
             164:     54(ptr) Variable Private
             169:   20(float) Constant 1065353216
             179:             TypePointer Input 48(fvec3)
             180:    179(ptr) Variable Input
             186:     81(ptr) Variable Private
             232:     24(int) Constant 3
             235:             TypePointer Input 21(fvec4)
             236:    235(ptr) Variable Input
             257:     24(int) Constant 4
             258:             TypeArray 21(fvec4) 257
             259:             TypeStruct 21(fvec4) 21(fvec4) 258
             260:             TypePointer Uniform 259(struct)
             261:    260(ptr) Variable Uniform
             262:             TypePointer Uniform 21(fvec4)
             300:             TypePointer Uniform 20(float)
             315:             TypeBool
             316:             TypePointer Private 315(bool)
             317:    316(ptr) Variable Private
             320:   20(float) Constant 0
             323:             TypePointer Function 48(fvec3)
             374:             TypeArray 20(float) 53
             375:             TypeStruct 21(fvec4) 20(float) 374
             376:             TypePointer Output 375(struct)
             377:    376(ptr) Variable Output
             386:             TypePointer Output 20(float)
             390:             TypePointer Output 21(fvec4)
               4:           2 Function None 3
               5:             Label
             324:    323(ptr) Variable Function
              11:      6(int) Load 10
              17:     16(ptr) AccessChain 14 15
              18:      6(int) Load 17
              19:      6(int) IAdd 11 18
                              Store 8 19
              32:      6(int) Load 8
              35:     34(ptr) AccessChain 31 15 32 15 33
              36:     24(int) Load 35
              37:   20(float) Bitcast 36
              38:      6(int) Load 8
              40:     34(ptr) AccessChain 31 15 38 15 39
              41:     24(int) Load 40
              42:   20(float) Bitcast 41
              43:      6(int) Load 8
              45:     34(ptr) AccessChain 31 15 43 15 44
              46:     24(int) Load 45
              47:   20(float) Bitcast 46
              49:   48(fvec3) CompositeConstruct 37 42 47
              50:   21(fvec4) Load 23
              51:   21(fvec4) VectorShuffle 50 49 4 5 6 3
                              Store 23 51
              55:     54(ptr) AccessChain 23 53
              56:   20(float) Load 55
              58:     54(ptr) AccessChain 52 57
                              Store 58 56
              60:      6(int) Load 8
              62:     34(ptr) AccessChain 31 15 60 15 61
              63:     24(int) Load 62
              64:   20(float) Bitcast 63
              65:      6(int) Load 8
              66:     34(ptr) AccessChain 31 15 65 15 15
              67:     24(int) Load 66
              68:   20(float) Bitcast 67
              69:      6(int) Load 8
              71:     34(ptr) AccessChain 31 15 69 15 70
              72:     24(int) Load 71
              73:   20(float) Bitcast 72
              74:   48(fvec3) CompositeConstruct 64 68 73
              75:   21(fvec4) Load 59
              76:   21(fvec4) VectorShuffle 75 74 4 5 6 3
                              Store 59 76
              77:     54(ptr) AccessChain 59 57
              78:   20(float) Load 77
              80:     54(ptr) AccessChain 52 79
                              Store 80 78
              83:      6(int) Load 8
              85:     34(ptr) AccessChain 31 15 83 15 84
              86:     24(int) Load 85
              87:   20(float) Bitcast 86
              88:      6(int) Load 8
              90:     34(ptr) AccessChain 31 15 88 15 89
              91:     24(int) Load 90
              92:   20(float) Bitcast 91
              93:      6(int) Load 8
              95:     34(ptr) AccessChain 31 15 93 15 94
              96:     24(int) Load 95
              97:   20(float) Bitcast 96
              98:   48(fvec3) CompositeConstruct 87 92 97
                              Store 82 98
             100:      6(int) Load 8
             102:     34(ptr) AccessChain 31 15 100 15 101
             103:     24(int) Load 102
             104:   20(float) Bitcast 103
             105:      6(int) Load 8
             107:     34(ptr) AccessChain 31 15 105 15 106
             108:     24(int) Load 107
             109:   20(float) Bitcast 108
             110:      6(int) Load 8
             112:     34(ptr) AccessChain 31 15 110 15 111
             113:     24(int) Load 112
             114:   20(float) Bitcast 113
             115:   48(fvec3) CompositeConstruct 104 109 114
                              Store 99 115
             116:     54(ptr) AccessChain 82 57
             117:   20(float) Load 116
             118:     54(ptr) AccessChain 52 53
                              Store 118 117
             119:     54(ptr) AccessChain 23 79
             120:   20(float) Load 119
             121:     54(ptr) AccessChain 59 57
                              Store 121 120
             122:     54(ptr) AccessChain 59 53
             123:   20(float) Load 122
             124:     54(ptr) AccessChain 23 79
                              Store 124 123
             125:     54(ptr) AccessChain 82 79
             126:   20(float) Load 125
             127:     54(ptr) AccessChain 23 53
                              Store 127 126
             128:     54(ptr) AccessChain 82 53
             129:   20(float) Load 128
             130:     54(ptr) AccessChain 59 53
                              Store 130 129
             132:   21(fvec4) Load 52
             133:   48(fvec3) VectorShuffle 132 132 2 0 1
             134:   21(fvec4) Load 23
             135:   48(fvec3) VectorShuffle 134 134 1 2 0
             136:   48(fvec3) FMul 133 135
             137:   21(fvec4) Load 131
             138:   21(fvec4) VectorShuffle 137 136 4 5 6 3
                              Store 131 138
             139:   21(fvec4) Load 23
             140:   48(fvec3) VectorShuffle 139 139 2 0 1
             141:   21(fvec4) Load 52
             142:   48(fvec3) VectorShuffle 141 141 1 2 0
             143:   48(fvec3) FMul 140 142
             144:   21(fvec4) Load 131
             145:   48(fvec3) VectorShuffle 144 144 0 1 2
             146:   48(fvec3) FNegate 145
             147:   48(fvec3) FAdd 143 146
             148:   21(fvec4) Load 131
             149:   21(fvec4) VectorShuffle 148 147 4 5 6 3
                              Store 131 149
             151:   21(fvec4) Load 52
             152:   48(fvec3) VectorShuffle 151 151 1 2 0
             153:   21(fvec4) Load 59
             154:   48(fvec3) VectorShuffle 153 153 2 0 1
             155:   48(fvec3) FMul 152 154
                              Store 150 155
             156:   21(fvec4) Load 59
             157:   48(fvec3) VectorShuffle 156 156 1 2 0
             158:   21(fvec4) Load 52
             159:   48(fvec3) VectorShuffle 158 158 2 0 1
             160:   48(fvec3) FMul 157 159
             161:   48(fvec3) Load 150
             162:   48(fvec3) FNegate 161
             163:   48(fvec3) FAdd 160 162
                              Store 150 163
             165:   21(fvec4) Load 23
             166:   48(fvec3) VectorShuffle 165 165 0 1 2
             167:   48(fvec3) Load 150
             168:   20(float) Dot 166 167
                              Store 164 168
             170:   20(float) Load 164
             171:   20(float) FDiv 169 170
                              Store 164 171
             172:   20(float) Load 164
             173:   48(fvec3) CompositeConstruct 172 172 172
             174:   21(fvec4) Load 131
             175:   48(fvec3) VectorShuffle 174 174 0 1 2
             176:   48(fvec3) FMul 173 175
             177:   21(fvec4) Load 131
             178:   21(fvec4) VectorShuffle 177 176 4 5 6 3
                              Store 131 178
             181:   48(fvec3) Load 180
             182:   21(fvec4) Load 131
             183:   48(fvec3) VectorShuffle 182 182 0 1 2
             184:   20(float) Dot 181 183
             185:     54(ptr) AccessChain 131 53
                              Store 185 184
             187:   21(fvec4) Load 23
             188:   48(fvec3) VectorShuffle 187 187 2 0 1
             189:   21(fvec4) Load 59
             190:   48(fvec3) VectorShuffle 189 189 1 2 0
             191:   48(fvec3) FMul 188 190
                              Store 186 191
             192:   21(fvec4) Load 23
             193:   48(fvec3) VectorShuffle 192 192 1 2 0
             194:   21(fvec4) Load 59
             195:   48(fvec3) VectorShuffle 194 194 2 0 1
             196:   48(fvec3) FMul 193 195
             197:   48(fvec3) Load 186
             198:   48(fvec3) FNegate 197
             199:   48(fvec3) FAdd 196 198
                              Store 186 199
             200:   20(float) Load 164
             201:   48(fvec3) CompositeConstruct 200 200 200
             202:   48(fvec3) Load 186
             203:   48(fvec3) FMul 201 202
                              Store 186 203
             204:   20(float) Load 164
             205:   48(fvec3) CompositeConstruct 204 204 204
             206:   48(fvec3) Load 150
             207:   48(fvec3) FMul 205 206
                              Store 150 207
             208:   48(fvec3) Load 180
             209:   48(fvec3) Load 150
             210:   20(float) Dot 208 209
             211:     54(ptr) AccessChain 131 79
                              Store 211 210
             212:   48(fvec3) Load 180
             213:   48(fvec3) Load 186
             214:   20(float) Dot 212 213
             215:     54(ptr) AccessChain 131 57
                              Store 215 214
             216:   21(fvec4) Load 131
             217:   48(fvec3) VectorShuffle 216 216 0 1 2
             218:   21(fvec4) Load 131
             219:   48(fvec3) VectorShuffle 218 218 0 1 2
             220:   20(float) Dot 217 219
                              Store 164 220
             221:   20(float) Load 164
             222:   20(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 221
                              Store 164 222
             223:   20(float) Load 164
             224:   48(fvec3) CompositeConstruct 223 223 223
             225:   21(fvec4) Load 131
             226:   48(fvec3) VectorShuffle 225 225 0 1 2
             227:   48(fvec3) FMul 224 226
             228:   21(fvec4) Load 131
             229:   21(fvec4) VectorShuffle 228 227 4 5 6 3
                              Store 131 229
             230:     54(ptr) AccessChain 99 79
             231:   20(float) Load 230
             233:     54(ptr) AccessChain 23 232
                              Store 233 231
             234:   21(fvec4) Load 23
             237:   21(fvec4) Load 236
             238:   20(float) Dot 234 237
             239:     54(ptr) AccessChain 23 79
                              Store 239 238
             240:     54(ptr) AccessChain 99 53
             241:   20(float) Load 240
             242:     54(ptr) AccessChain 59 232
                              Store 242 241
             243:     54(ptr) AccessChain 99 57
             244:   20(float) Load 243
             245:     54(ptr) AccessChain 52 232
                              Store 245 244
             246:   21(fvec4) Load 52
             247:   21(fvec4) Load 236
             248:   20(float) Dot 246 247
             249:     54(ptr) AccessChain 23 57
                              Store 249 248
             250:   21(fvec4) Load 59
             251:   21(fvec4) Load 236
             252:   20(float) Dot 250 251
             253:     54(ptr) AccessChain 23 53
                              Store 253 252
             254:   21(fvec4) Load 23
             255:   48(fvec3) VectorShuffle 254 254 0 1 2
             256:   48(fvec3) FNegate 255
             263:    262(ptr) AccessChain 261 15
             264:   21(fvec4) Load 263
             265:   48(fvec3) VectorShuffle 264 264 3 3 3
             266:   48(fvec3) FMul 256 265
             267:    262(ptr) AccessChain 261 15
             268:   21(fvec4) Load 267
             269:   48(fvec3) VectorShuffle 268 268 0 1 2
             270:   48(fvec3) FAdd 266 269
             271:   21(fvec4) Load 52
             272:   21(fvec4) VectorShuffle 271 270 4 5 6 3
                              Store 52 272
             273:   21(fvec4) Load 52
             274:   48(fvec3) VectorShuffle 273 273 0 1 2
             275:   21(fvec4) Load 52
             276:   48(fvec3) VectorShuffle 275 275 0 1 2
             277:   20(float) Dot 274 276
                              Store 164 277
             278:   20(float) Load 164
             279:   20(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 278
                              Store 164 279
             280:   20(float) Load 164
             281:   48(fvec3) CompositeConstruct 280 280 280
             282:   21(fvec4) Load 52
             283:   48(fvec3) VectorShuffle 282 282 0 1 2
             284:   48(fvec3) FMul 281 283
             285:   21(fvec4) Load 52
             286:   21(fvec4) VectorShuffle 285 284 4 5 6 3
                              Store 52 286
             287:   21(fvec4) Load 131
             288:   48(fvec3) VectorShuffle 287 287 0 1 2
             289:   21(fvec4) Load 52
             290:   48(fvec3) VectorShuffle 289 289 0 1 2
             291:   20(float) Dot 288 290
                              Store 164 291
             292:   20(float) Load 164
             293:   20(float) FNegate 292
             294:   20(float) Load 164
             295:   20(float) FMul 293 294
             296:   20(float) FAdd 295 169
                              Store 164 296
             297:   20(float) Load 164
             298:   20(float) ExtInst 1(GLSL.std.450) 31(Sqrt) 297
                              Store 164 298
             299:   20(float) Load 164
             301:    300(ptr) AccessChain 261 61 57
             302:   20(float) Load 301
             303:   20(float) FMul 299 302
                              Store 164 303
             304:   21(fvec4) Load 131
             305:   48(fvec3) VectorShuffle 304 304 0 1 2
             306:   48(fvec3) FNegate 305
             307:   20(float) Load 164
             308:   48(fvec3) CompositeConstruct 307 307 307
             309:   48(fvec3) FMul 306 308
             310:   21(fvec4) Load 23
             311:   48(fvec3) VectorShuffle 310 310 0 1 2
             312:   48(fvec3) FAdd 309 311
             313:   21(fvec4) Load 131
             314:   21(fvec4) VectorShuffle 313 312 4 5 6 3
                              Store 131 314
             318:    300(ptr) AccessChain 261 61 57
             319:   20(float) Load 318
             321:   315(bool) FOrdNotEqual 319 320
                              Store 317 321
             322:   315(bool) Load 317
                              SelectionMerge 326 None
                              BranchConditional 322 325 329
             325:               Label
             327:   21(fvec4)   Load 131
             328:   48(fvec3)   VectorShuffle 327 327 0 1 2
                                Store 324 328
                                Branch 326
             329:               Label
             330:   21(fvec4)   Load 23
             331:   48(fvec3)   VectorShuffle 330 330 0 1 2
                                Store 324 331
                                Branch 326
             326:             Label
             332:   48(fvec3) Load 324
             333:   21(fvec4) Load 131
             334:   21(fvec4) VectorShuffle 333 332 4 5 6 3
                              Store 131 334
             335:   21(fvec4) Load 131
             336:   21(fvec4) VectorShuffle 335 335 1 1 1 1
             337:    262(ptr) AccessChain 261 70 61
             338:   21(fvec4) Load 337
             339:   21(fvec4) FMul 336 338
                              Store 23 339
             340:    262(ptr) AccessChain 261 70 15
             341:   21(fvec4) Load 340
             342:   21(fvec4) Load 131
             343:   21(fvec4) VectorShuffle 342 342 0 0 0 0
             344:   21(fvec4) FMul 341 343
             345:   21(fvec4) Load 23
             346:   21(fvec4) FAdd 344 345
                              Store 23 346
             347:    262(ptr) AccessChain 261 70 70
             348:   21(fvec4) Load 347
             349:   21(fvec4) Load 131
             350:   21(fvec4) VectorShuffle 349 349 2 2 2 2
             351:   21(fvec4) FMul 348 350
             352:   21(fvec4) Load 23
             353:   21(fvec4) FAdd 351 352
                              Store 131 353
             354:    262(ptr) AccessChain 261 70 84
             355:   21(fvec4) Load 354
             356:   21(fvec4) Load 236
             357:   21(fvec4) VectorShuffle 356 356 3 3 3 3
             358:   21(fvec4) FMul 355 357
             359:   21(fvec4) Load 131
             360:   21(fvec4) FAdd 358 359
                              Store 131 360
             361:     54(ptr) AccessChain 131 232
             362:   20(float) Load 361
             363:     54(ptr) AccessChain 131 57
             364:   20(float) Load 363
             365:   20(float) ExtInst 1(GLSL.std.450) 37(FMin) 362 364
             366:     54(ptr) AccessChain 23 79
                              Store 366 365
             367:     54(ptr) AccessChain 131 57
             368:   20(float) Load 367
             369:   20(float) FNegate 368
             370:     54(ptr) AccessChain 23 79
             371:   20(float) Load 370
             372:   20(float) FAdd 369 371
             373:     54(ptr) AccessChain 23 79
                              Store 373 372
             378:    300(ptr) AccessChain 261 61 53
             379:   20(float) Load 378
             380:     54(ptr) AccessChain 23 79
             381:   20(float) Load 380
             382:   20(float) FMul 379 381
             383:     54(ptr) AccessChain 131 57
             384:   20(float) Load 383
             385:   20(float) FAdd 382 384
             387:    386(ptr) AccessChain 377 15 57
                              Store 387 385
             388:   21(fvec4) Load 131
             389:   48(fvec3) VectorShuffle 388 388 0 1 3
             391:    390(ptr) AccessChain 377 15
             392:   21(fvec4) Load 391
             393:   21(fvec4) VectorShuffle 392 389 4 5 2 6
                              Store 391 393
             394:    386(ptr) AccessChain 377 15 53
             395:   20(float) Load 394
             396:   20(float) FNegate 395
             397:    386(ptr) AccessChain 377 15 53
                              Store 397 396
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 13

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 9
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 9 RelaxedPrecision
                              Decorate 9 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Output 7(fvec4)
               9:      8(ptr) Variable Output
              10:    6(float) Constant 0
              11:    7(fvec4) ConstantComposite 10 10 10 10
               4:           2 Function None 3
               5:             Label
                              Store 9 11
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SHADOWS_DEPTH 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 52 math, 7 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "$Globals" (96 bytes) on slot 0 {
  Vector4 unity_ParticleUVShiftData at 32
  Vector4 _MainTex_ST at 64
}
Constant Buffer "UnityLighting" (768 bytes) on slot 1 {
  Vector4 _WorldSpaceLightPos0 at 0
}
Constant Buffer "UnityShadows" (416 bytes) on slot 2 {
  Vector4 unity_LightShadowBias at 80
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 3 {
  Matrix4x4 unity_MatrixVP at 272
}
Constant Buffer "UnityDrawCallInfo" (16 bytes) on slot 4 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
// SV_InstanceID            0   x           4   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 1   xy          0     NONE   float   xy  
// TEXCOORD                 3   xyzw        1     NONE   float   xyzw
// SV_POSITION              0   xyzw        2      POS   float   xyzw
//
      vs_5_0
      dcl_globalFlags refactoringAllowed
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_constantbuffer CB1[1], immediateIndexed
      dcl_constantbuffer CB2[6], immediateIndexed
      dcl_constantbuffer CB3[21], immediateIndexed
      dcl_constantbuffer CB4[1], immediateIndexed
      dcl_resource_structured t0, 56
      dcl_input v0.xyzw
      dcl_input v1.xyz
      dcl_input v2.xyzw
      dcl_input v3.xy
      dcl_input_sgv v4.x, instance_id
      dcl_output o0.xy
      dcl_output o1.xyzw
      dcl_output_siv o2.xyzw, position
      dcl_temps 7
   0: iadd r0.x, v4.x, cb4[0].x
   1: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r0.y, r0.x, l(52), t0.xxxx
   2: round_ni r0.y, r0.y
   3: div r0.z, r0.y, cb0[2].y
   4: round_ni r0.z, r0.z
   5: mad r0.y, -r0.z, cb0[2].y, r0.y
   6: round_ni r0.y, r0.y
   7: mul r1.x, r0.y, cb0[2].z
   8: add r0.y, -cb0[2].w, l(1.000000)
   9: mad r1.y, -r0.z, cb0[2].w, r0.y
  10: mad r0.yz, v3.xxyx, cb0[2].zzwz, r1.xxyx
  11: ne r0.w, cb0[2].x, l(0.000000)
  12: movc r0.yz, r0.wwww, r0.yyzy, v3.xxyx
  13: mad o0.xy, r0.yzyy, cb0[4].xyxx, cb0[4].zwzz
  14: mov o1.xyzw, v2.xyzw
  15: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r1.xyz, r0.x, l(24), t0.yzxx
  16: mov r2.z, r1.y
  17: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r3.xyz, r0.x, l(0), t0.yxzx
  18: mov r2.x, r3.z
  19: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r0.yzw, r0.x, l(12), t0.xxyz
  20: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r4.xyz, r0.x, l(36), t0.xyzx
  21: mov r2.y, r0.w
  22: mov r3.z, r1.x
  23: mov r1.x, r3.y
  24: mov r1.y, r0.y
  25: mov r3.y, r0.z
  26: mul r0.xyz, r2.zxyz, r1.yzxy
  27: mad r0.xyz, r1.zxyz, r2.yzxy, -r0.xyzx
  28: mul r5.xyz, r2.yzxy, r3.zxyz
  29: mad r5.xyz, r3.yzxy, r2.zxyz, -r5.xyzx
  30: dp3 r0.w, r1.xyzx, r5.xyzx
  31: rcp r0.w, r0.w
  32: mul r0.xyz, r0.wwww, r0.xyzx
  33: dp3 r0.y, v1.xyzx, r0.xyzx
  34: mul r6.xyz, r1.zxyz, r3.yzxy
  35: mad r6.xyz, r1.yzxy, r3.zxyz, -r6.xyzx
  36: mul r6.xyz, r0.wwww, r6.xyzx
  37: mul r5.xyz, r0.wwww, r5.xyzx
  38: dp3 r0.x, v1.xyzx, r5.xyzx
  39: dp3 r0.z, v1.xyzx, r6.xyzx
  40: dp3 r0.w, r0.xyzx, r0.xyzx
  41: rsq r0.w, r0.w
  42: mul r0.xyz, r0.wwww, r0.xyzx
  43: mov r1.w, r4.x
  44: dp4 r1.x, r1.xyzw, v0.xyzw
  45: mov r3.w, r4.y
  46: mov r2.w, r4.z
  47: dp4 r1.z, r2.xyzw, v0.xyzw
  48: dp4 r1.y, r3.xyzw, v0.xyzw
  49: mad r2.xyz, -r1.xyzx, cb1[0].wwww, cb1[0].xyzx
  50: dp3 r0.w, r2.xyzx, r2.xyzx
  51: rsq r0.w, r0.w
  52: mul r2.xyz, r0.wwww, r2.xyzx
  53: dp3 r0.w, r0.xyzx, r2.xyzx
  54: mad r0.w, -r0.w, r0.w, l(1.000000)
  55: sqrt r0.w, r0.w
  56: mul r0.w, r0.w, cb2[5].z
  57: mad r0.xyz, -r0.xyzx, r0.wwww, r1.xyzx
  58: ne r0.w, cb2[5].z, l(0.000000)
  59: movc r0.xyz, r0.wwww, r0.xyzx, r1.xyzx
  60: mul r1.xyzw, r0.yyyy, cb3[18].xyzw
  61: mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
  62: mad r0.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
  63: mad r0.xyzw, cb3[20].xyzw, v0.wwww, r0.xyzw
  64: div r1.x, cb2[5].x, r0.w
  65: min r1.x, r1.x, l(0.000000)
  66: max r1.x, r1.x, l(-1.000000)
  67: add r0.z, r0.z, r1.x
  68: min r1.x, r0.w, r0.z
  69: mov o2.xyw, r0.xyxw
  70: add r0.x, -r0.z, r1.x
  71: mad o2.z, cb2[5].y, r0.x, r0.z
  72: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 5 math, 1 temp registers, 2 textures
Set 2D Texture "_MainTex" to slot 0
Set 3D Texture "_DitherMaskLOD" to slot 1

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 1   xy          0     NONE   float   xy  
// TEXCOORD                 3   xyzw        1     NONE   float      w
// SV_Position              0   xyzw        2      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_5_0
      dcl_globalFlags refactoringAllowed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture3d (float,float,float,float) t1
      dcl_input_ps linear v0.xy
      dcl_input_ps linear v1.w
      dcl_input_ps_siv linear noperspective v2.xy, position
      dcl_output o0.xyzw
      dcl_temps 1
   0: sample_indexable(texture2d)(float,float,float,float) r0.x, v0.xyxx, t0.wxyz, s0
   1: mul r0.x, r0.x, v1.w
   2: mul r0.z, r0.x, l(0.937500)
   3: mul r0.xy, v2.xyxx, l(0.250000, 0.250000, 0.000000, 0.000000)
   4: sample_indexable(texture3d)(float,float,float,float) r0.x, r0.xyzx, t1.wxyz, s1
   5: add r0.x, r0.x, l(-0.010000)
   6: lt r0.x, r0.x, l(0.000000)
   7: discard_nz r0.x
   8: mov o0.xyzw, l(0,0,0,0)
   9: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SHADOWS_DEPTH 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Set 2D Texture "_MainTex" to slot 0
Set 3D Texture "_DitherMaskLOD" to slot 1

Constant Buffer "$Globals" (144 bytes) {
  Matrix4x4 unity_MatrixVP at 32
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  ScalarInt unity_BaseInstanceID at 96
  Vector4 unity_ParticleUVShiftData at 112
  Vector4 _MainTex_ST at 128
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	vec4 _MainTex_ST;
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
layout(location = 0) out highp vec2 vs_TEXCOORD1;
layout(location = 1) out mediump vec4 vs_TEXCOORD3;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
float u_xlat14;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat7.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(52 >> 2) + 0]);
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat14 = u_xlat7.x / unity_ParticleUVShiftData.y;
    u_xlat14 = floor(u_xlat14);
    u_xlat7.x = (-u_xlat14) * unity_ParticleUVShiftData.y + u_xlat7.x;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat1.x = u_xlat7.x * unity_ParticleUVShiftData.z;
    u_xlat7.x = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat14) * unity_ParticleUVShiftData.w + u_xlat7.x;
    u_xlat7.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb21 = unity_ParticleUVShiftData.x!=0.0;
    u_xlat7.xy = (bool(u_xlatb21)) ? u_xlat7.xy : in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = u_xlat7.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3 = in_COLOR0;
    u_xlat1.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 0]));
    u_xlat2.z = u_xlat1.y;
    u_xlat3.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 2]));
    u_xlat2.x = u_xlat3.z;
    u_xlat7.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 2]));
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 2]));
    u_xlat2.y = u_xlat7.z;
    u_xlat3.z = u_xlat1.x;
    u_xlat1.x = u_xlat3.y;
    u_xlat1.y = u_xlat7.x;
    u_xlat3.y = u_xlat7.y;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat0.xyz);
    u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat5.xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat21 = float(1.0) / float(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.y = dot(in_NORMAL0.xyz, u_xlat0.xyz);
    u_xlat6.xyz = u_xlat1.zxy * u_xlat3.yzx;
    u_xlat6.xyz = u_xlat1.yzx * u_xlat3.zxy + (-u_xlat6.xyz);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat5.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat5.xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, u_xlat6.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat1.w = u_xlat4.x;
    u_xlat1.x = dot(u_xlat1, in_POSITION0);
    u_xlat3.w = u_xlat4.y;
    u_xlat2.w = u_xlat4.z;
    u_xlat1.z = dot(u_xlat2, in_POSITION0);
    u_xlat1.y = dot(u_xlat3, in_POSITION0);
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat21 = (-u_xlat21) * u_xlat21 + 1.0;
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = u_xlat21 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat21) + u_xlat1.xyz;
    u_xlatb21 = unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb21)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat14 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = max((-u_xlat0.w), u_xlat14);
    gl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat14) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat14;
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler3D _DitherMaskLOD;
layout(location = 0) in highp vec2 vs_TEXCOORD1;
layout(location = 1) in mediump vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_1;
mediump float u_xlat16_2;
mediump float u_xlat16_7;
void main()
{
vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    u_xlat16_1 = u_xlat16_0 * vs_TEXCOORD3.w;
    u_xlat16_7 = u_xlat16_1 * 0.9375;
    u_xlat1.z = u_xlat16_7;
    u_xlat1.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
    u_xlat16_0 = texture(_DitherMaskLOD, u_xlat1.xyz).w;
    u_xlat16_2 = u_xlat16_0 + -0.00999999978;
    u_xlatb0 = u_xlat16_2<0.0;
    if(u_xlatb0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SHADOWS_DEPTH 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (128 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 32
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  Vector4 unity_ParticleUVShiftData at 96
  Vector4 _MainTex_ST at 112
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_LightShadowBias;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 mtl_Position [[ position ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float3 u_xlat4;
    float3 u_xlat5;
    float3 u_xlat6;
    float3 u_xlat7;
    float u_xlat14;
    float u_xlat21;
    bool u_xlatb21;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat7.x = as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x34 >> 2) + 0]);
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat14 = u_xlat7.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat14 = floor(u_xlat14);
    u_xlat7.x = fma((-u_xlat14), VGlobals.unity_ParticleUVShiftData.y, u_xlat7.x);
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat1.x = u_xlat7.x * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat7.x = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = fma((-u_xlat14), VGlobals.unity_ParticleUVShiftData.w, u_xlat7.x);
    u_xlat7.xy = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat1.xy);
    u_xlatb21 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat7.xy = (bool(u_xlatb21)) ? u_xlat7.xy : input.TEXCOORD0.xy;
    output.TEXCOORD1.xy = fma(u_xlat7.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD3 = input.COLOR0;
    u_xlat1.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x18 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x18 >> 2) + 0]));
    u_xlat2.z = u_xlat1.y;
    u_xlat3.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x0 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x0 >> 2) + 2]));
    u_xlat2.x = u_xlat3.z;
    u_xlat7.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0xc >> 2) + 2]));
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x24 >> 2) + 2]));
    u_xlat2.y = u_xlat7.z;
    u_xlat3.z = u_xlat1.x;
    u_xlat1.x = u_xlat3.y;
    u_xlat1.y = u_xlat7.x;
    u_xlat3.y = u_xlat7.y;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat1.yzx;
    u_xlat0.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat0.xyz));
    u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy;
    u_xlat5.xyz = fma(u_xlat3.yzx, u_xlat2.zxy, (-u_xlat5.xyz));
    u_xlat21 = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat21 = float(1.0) / float(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.y = dot(input.NORMAL0.xyz, u_xlat0.xyz);
    u_xlat6.xyz = u_xlat1.zxy * u_xlat3.yzx;
    u_xlat6.xyz = fma(u_xlat1.yzx, u_xlat3.zxy, (-u_xlat6.xyz));
    u_xlat6.xyz = float3(u_xlat21) * u_xlat6.xyz;
    u_xlat5.xyz = float3(u_xlat21) * u_xlat5.xyz;
    u_xlat0.x = dot(input.NORMAL0.xyz, u_xlat5.xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, u_xlat6.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat1.w = u_xlat4.x;
    u_xlat1.x = dot(u_xlat1, input.POSITION0);
    u_xlat3.w = u_xlat4.y;
    u_xlat2.w = u_xlat4.z;
    u_xlat1.z = dot(u_xlat2, input.POSITION0);
    u_xlat1.y = dot(u_xlat3, input.POSITION0);
    u_xlat2.xyz = fma((-u_xlat1.xyz), VGlobals._WorldSpaceLightPos0.www, VGlobals._WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat2.xyz = float3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat21 = fma((-u_xlat21), u_xlat21, 1.0);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = u_xlat21 * VGlobals.unity_LightShadowBias.z;
    u_xlat0.xyz = fma((-u_xlat0.xyz), float3(u_xlat21), u_xlat1.xyz);
    u_xlatb21 = VGlobals.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb21)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], input.POSITION0.wwww, u_xlat0);
    u_xlat1.x = VGlobals.unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = min(u_xlat1.x, 0.0);
    u_xlat1.x = max(u_xlat1.x, -1.0);
    u_xlat14 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = min(u_xlat0.w, u_xlat14);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat14) + u_xlat1.x;
    output.mtl_Position.z = fma(VGlobals.unity_LightShadowBias.y, u_xlat0.x, u_xlat14);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 3D Texture "_DitherMaskLOD" to slot 1

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_DitherMaskLOD [[ sampler (1) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture3d<float, access::sample > _DitherMaskLOD [[ texture(1) ]] ,
    float4 mtl_FragCoord [[ position ]],
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 hlslcc_FragCoord = float4(mtl_FragCoord.xyz, 1.0/mtl_FragCoord.w);
    float3 u_xlat0;
    bool u_xlatb0;
    u_xlat0.x = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).w;
    u_xlat0.x = u_xlat0.x * input.TEXCOORD3.w;
    u_xlat0.z = u_xlat0.x * 0.9375;
    u_xlat0.xy = hlslcc_FragCoord.xy * float2(0.25, 0.25);
    u_xlat0.x = _DitherMaskLOD.sample(sampler_DitherMaskLOD, u_xlat0.xyz).w;
    u_xlat0.x = u_xlat0.x + -0.00999999978;
    u_xlatb0 = u_xlat0.x<0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    output.SV_Target0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SHADOWS_DEPTH 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Set 2D Texture "_MainTex" to slot 0
Set 3D Texture "_DitherMaskLOD" to slot 1

Constant Buffer "$Globals" (144 bytes) {
  Matrix4x4 unity_MatrixVP at 32
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  ScalarInt unity_BaseInstanceID at 96
  Vector4 unity_ParticleUVShiftData at 112
  Vector4 _MainTex_ST at 128
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require
#ifdef GL_ARB_shader_storage_buffer_object
#extension GL_ARB_shader_storage_buffer_object : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	vec4 _MainTex_ST;
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
layout(location = 0) out vec2 vs_TEXCOORD1;
layout(location = 1) out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
float u_xlat14;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat7.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(52 >> 2) + 0]);
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat14 = u_xlat7.x / unity_ParticleUVShiftData.y;
    u_xlat14 = floor(u_xlat14);
    u_xlat7.x = (-u_xlat14) * unity_ParticleUVShiftData.y + u_xlat7.x;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat1.x = u_xlat7.x * unity_ParticleUVShiftData.z;
    u_xlat7.x = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat14) * unity_ParticleUVShiftData.w + u_xlat7.x;
    u_xlat7.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb21 = unity_ParticleUVShiftData.x!=0.0;
    u_xlat7.xy = (bool(u_xlatb21)) ? u_xlat7.xy : in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = u_xlat7.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3 = in_COLOR0;
    u_xlat1.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 0]));
    u_xlat2.z = u_xlat1.y;
    u_xlat3.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 2]));
    u_xlat2.x = u_xlat3.z;
    u_xlat7.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 2]));
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 2]));
    u_xlat2.y = u_xlat7.z;
    u_xlat3.z = u_xlat1.x;
    u_xlat1.x = u_xlat3.y;
    u_xlat1.y = u_xlat7.x;
    u_xlat3.y = u_xlat7.y;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat0.xyz);
    u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat5.xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat21 = float(1.0) / float(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.y = dot(in_NORMAL0.xyz, u_xlat0.xyz);
    u_xlat6.xyz = u_xlat1.zxy * u_xlat3.yzx;
    u_xlat6.xyz = u_xlat1.yzx * u_xlat3.zxy + (-u_xlat6.xyz);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat5.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat5.xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, u_xlat6.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat1.w = u_xlat4.x;
    u_xlat1.x = dot(u_xlat1, in_POSITION0);
    u_xlat3.w = u_xlat4.y;
    u_xlat2.w = u_xlat4.z;
    u_xlat1.z = dot(u_xlat2, in_POSITION0);
    u_xlat1.y = dot(u_xlat3, in_POSITION0);
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat21 = (-u_xlat21) * u_xlat21 + 1.0;
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = u_xlat21 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat21) + u_xlat1.xyz;
    u_xlatb21 = unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb21)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat14 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = max((-u_xlat0.w), u_xlat14);
    gl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat14) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat14;
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler3D _DitherMaskLOD;
layout(location = 0) in  vec2 vs_TEXCOORD1;
layout(location = 1) in  vec4 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
float u_xlat10_0;
bool u_xlatb0;
void main()
{
vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    u_xlat0.x = u_xlat10_0 * vs_TEXCOORD3.w;
    u_xlat0.z = u_xlat0.x * 0.9375;
    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
    u_xlat10_0 = texture(_DitherMaskLOD, u_xlat0.xyz).w;
    u_xlat0.x = u_xlat10_0 + -0.00999999978;
    u_xlatb0 = u_xlat0.x<0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SHADOWS_DEPTH 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "TexCoord0"
Uses vertex data channel "Color"
Uses vertex data channel "Normal"
Uses vertex data channel "Vertex"

Set 3D Texture "_DitherMaskLOD" to set: 0, binding: 3, used in: Fragment  using sampler in set: 0, binding: 1, used in: Fragment 
Set 2D Texture "_MainTex" to set: 0, binding: 2, used in: Fragment  using sampler in set: 0, binding: 0, used in: Fragment 

Constant Buffer "UnityDrawCallInfo" (8 bytes) on set: 1, binding: 1, used in: Vertex  {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "VGlobals957945234" (128 bytes) on set: 1, binding: 0, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 32
  Vector4 _MainTex_ST at 112
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  Vector4 unity_ParticleUVShiftData at 96
}

Set Buffer  "unity_ParticleInstanceData" to set: 0, binding: 4, used in: Vertex 
Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 510

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 10 102 134 147 149 288 342 484
                              Name 134  "vs_TEXCOORD1"
                              Name 147  "vs_TEXCOORD3"
                              Decorate 10 BuiltIn InstanceIndex
                              MemberDecorate 12 0 Offset 0
                              MemberDecorate 12 1 Offset 4
                              Decorate 12 Block
                              Decorate 14 DescriptorSet 1
                              Decorate 14 Binding 1
                              Decorate 26 ArrayStride 4
                              MemberDecorate 27 0 Offset 0
                              Decorate 28 ArrayStride 56
                              MemberDecorate 29 0 NonWritable
                              MemberDecorate 29 0 Offset 0
                              Decorate 29 BufferBlock
                              Decorate 31 DescriptorSet 0
                              Decorate 31 Binding 4
                              Decorate 50 ArrayStride 16
                              MemberDecorate 51 0 Offset 0
                              MemberDecorate 51 1 Offset 16
                              MemberDecorate 51 2 Offset 32
                              MemberDecorate 51 3 Offset 96
                              MemberDecorate 51 4 Offset 112
                              Decorate 51 Block
                              Decorate 53 DescriptorSet 1
                              Decorate 53 Binding 0
                              Decorate 102 Location 3
                              Decorate 134(vs_TEXCOORD1) Location 0
                              Decorate 147(vs_TEXCOORD3) RelaxedPrecision
                              Decorate 147(vs_TEXCOORD3) Location 1
                              Decorate 149 RelaxedPrecision
                              Decorate 149 Location 2
                              Decorate 150 RelaxedPrecision
                              Decorate 288 Location 1
                              Decorate 342 Location 0
                              MemberDecorate 482 0 BuiltIn Position
                              MemberDecorate 482 1 BuiltIn PointSize
                              MemberDecorate 482 2 BuiltIn ClipDistance
                              Decorate 482 Block
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeInt 32 1
               7:             TypePointer Private 6(int)
               8:      7(ptr) Variable Private
               9:             TypePointer Input 6(int)
              10:      9(ptr) Variable Input
              12:             TypeStruct 6(int) 6(int)
              13:             TypePointer Uniform 12(struct)
              14:     13(ptr) Variable Uniform
              15:      6(int) Constant 0
              16:             TypePointer Uniform 6(int)
              20:             TypeFloat 32
              21:             TypeVector 20(float) 3
              22:             TypePointer Private 21(fvec3)
              23:     22(ptr) Variable Private
              24:             TypeInt 32 0
              25:     24(int) Constant 14
              26:             TypeArray 24(int) 25
              27:             TypeStruct 26
              28:             TypeRuntimeArray 27(struct)
              29:             TypeStruct 28
              30:             TypePointer Uniform 29(struct)
              31:     30(ptr) Variable Uniform
              33:      6(int) Constant 13
              34:             TypePointer Uniform 24(int)
              38:     24(int) Constant 0
              39:             TypePointer Private 20(float)
              45:     39(ptr) Variable Private
              48:             TypeVector 20(float) 4
              49:     24(int) Constant 4
              50:             TypeArray 48(fvec4) 49
              51:             TypeStruct 48(fvec4) 48(fvec4) 50 48(fvec4) 48(fvec4)
              52:             TypePointer Uniform 51(struct)
              53:     52(ptr) Variable Uniform
              54:      6(int) Constant 3
              55:     24(int) Constant 1
              56:             TypePointer Uniform 20(float)
              75:             TypePointer Private 48(fvec4)
              76:     75(ptr) Variable Private
              79:     24(int) Constant 2
              84:     24(int) Constant 3
              88:   20(float) Constant 1065353216
             100:             TypeVector 20(float) 2
             101:             TypePointer Input 100(fvec2)
             102:    101(ptr) Variable Input
             104:             TypePointer Uniform 48(fvec4)
             114:             TypeBool
             115:             TypePointer Private 114(bool)
             116:    115(ptr) Variable Private
             119:   20(float) Constant 0
             122:             TypePointer Function 100(fvec2)
             133:             TypePointer Output 100(fvec2)
134(vs_TEXCOORD1):    133(ptr) Variable Output
             137:      6(int) Constant 4
             146:             TypePointer Output 48(fvec4)
147(vs_TEXCOORD3):    146(ptr) Variable Output
             148:             TypePointer Input 48(fvec4)
             149:    148(ptr) Variable Input
             152:      6(int) Constant 7
             157:      6(int) Constant 8
             162:      6(int) Constant 6
             169:     75(ptr) Variable Private
             173:     75(ptr) Variable Private
             175:      6(int) Constant 1
             184:      6(int) Constant 2
             203:      6(int) Constant 5
             208:     22(ptr) Variable Private
             210:      6(int) Constant 9
             215:      6(int) Constant 10
             220:      6(int) Constant 11
             240:     75(ptr) Variable Private
             259:     22(ptr) Variable Private
             273:     39(ptr) Variable Private
             287:             TypePointer Input 21(fvec3)
             288:    287(ptr) Variable Input
             294:     22(ptr) Variable Private
             342:    148(ptr) Variable Input
             418:             TypePointer Function 21(fvec3)
             468:   20(float) Constant 3212836864
             481:             TypeArray 20(float) 55
             482:             TypeStruct 48(fvec4) 20(float) 481
             483:             TypePointer Output 482(struct)
             484:    483(ptr) Variable Output
             503:             TypePointer Output 20(float)
               4:           2 Function None 3
               5:             Label
             123:    122(ptr) Variable Function
             419:    418(ptr) Variable Function
              11:      6(int) Load 10
              17:     16(ptr) AccessChain 14 15
              18:      6(int) Load 17
              19:      6(int) IAdd 11 18
                              Store 8 19
              32:      6(int) Load 8
              35:     34(ptr) AccessChain 31 15 32 15 33
              36:     24(int) Load 35
              37:   20(float) Bitcast 36
              40:     39(ptr) AccessChain 23 38
                              Store 40 37
              41:     39(ptr) AccessChain 23 38
              42:   20(float) Load 41
              43:   20(float) ExtInst 1(GLSL.std.450) 8(Floor) 42
              44:     39(ptr) AccessChain 23 38
                              Store 44 43
              46:     39(ptr) AccessChain 23 38
              47:   20(float) Load 46
              57:     56(ptr) AccessChain 53 54 55
              58:   20(float) Load 57
              59:   20(float) FDiv 47 58
                              Store 45 59
              60:   20(float) Load 45
              61:   20(float) ExtInst 1(GLSL.std.450) 8(Floor) 60
                              Store 45 61
              62:   20(float) Load 45
              63:   20(float) FNegate 62
              64:     56(ptr) AccessChain 53 54 55
              65:   20(float) Load 64
              66:   20(float) FMul 63 65
              67:     39(ptr) AccessChain 23 38
              68:   20(float) Load 67
              69:   20(float) FAdd 66 68
              70:     39(ptr) AccessChain 23 38
                              Store 70 69
              71:     39(ptr) AccessChain 23 38
              72:   20(float) Load 71
              73:   20(float) ExtInst 1(GLSL.std.450) 8(Floor) 72
              74:     39(ptr) AccessChain 23 38
                              Store 74 73
              77:     39(ptr) AccessChain 23 38
              78:   20(float) Load 77
              80:     56(ptr) AccessChain 53 54 79
              81:   20(float) Load 80
              82:   20(float) FMul 78 81
              83:     39(ptr) AccessChain 76 38
                              Store 83 82
              85:     56(ptr) AccessChain 53 54 84
              86:   20(float) Load 85
              87:   20(float) FNegate 86
              89:   20(float) FAdd 87 88
              90:     39(ptr) AccessChain 23 38
                              Store 90 89
              91:   20(float) Load 45
              92:   20(float) FNegate 91
              93:     56(ptr) AccessChain 53 54 84
              94:   20(float) Load 93
              95:   20(float) FMul 92 94
              96:     39(ptr) AccessChain 23 38
              97:   20(float) Load 96
              98:   20(float) FAdd 95 97
              99:     39(ptr) AccessChain 76 55
                              Store 99 98
             103:  100(fvec2) Load 102
             105:    104(ptr) AccessChain 53 54
             106:   48(fvec4) Load 105
             107:  100(fvec2) VectorShuffle 106 106 2 3
             108:  100(fvec2) FMul 103 107
             109:   48(fvec4) Load 76
             110:  100(fvec2) VectorShuffle 109 109 0 1
             111:  100(fvec2) FAdd 108 110
             112:   21(fvec3) Load 23
             113:   21(fvec3) VectorShuffle 112 111 3 4 2
                              Store 23 113
             117:     56(ptr) AccessChain 53 54 38
             118:   20(float) Load 117
             120:   114(bool) FOrdNotEqual 118 119
                              Store 116 120
             121:   114(bool) Load 116
                              SelectionMerge 125 None
                              BranchConditional 121 124 128
             124:               Label
             126:   21(fvec3)   Load 23
             127:  100(fvec2)   VectorShuffle 126 126 0 1
                                Store 123 127
                                Branch 125
             128:               Label
             129:  100(fvec2)   Load 102
                                Store 123 129
                                Branch 125
             125:             Label
             130:  100(fvec2) Load 123
             131:   21(fvec3) Load 23
             132:   21(fvec3) VectorShuffle 131 130 3 4 2
                              Store 23 132
             135:   21(fvec3) Load 23
             136:  100(fvec2) VectorShuffle 135 135 0 1
             138:    104(ptr) AccessChain 53 137
             139:   48(fvec4) Load 138
             140:  100(fvec2) VectorShuffle 139 139 0 1
             141:  100(fvec2) FMul 136 140
             142:    104(ptr) AccessChain 53 137
             143:   48(fvec4) Load 142
             144:  100(fvec2) VectorShuffle 143 143 2 3
             145:  100(fvec2) FAdd 141 144
                              Store 134(vs_TEXCOORD1) 145
             150:   48(fvec4) Load 149
                              Store 147(vs_TEXCOORD3) 150
             151:      6(int) Load 8
             153:     34(ptr) AccessChain 31 15 151 15 152
             154:     24(int) Load 153
             155:   20(float) Bitcast 154
             156:      6(int) Load 8
             158:     34(ptr) AccessChain 31 15 156 15 157
             159:     24(int) Load 158
             160:   20(float) Bitcast 159
             161:      6(int) Load 8
             163:     34(ptr) AccessChain 31 15 161 15 162
             164:     24(int) Load 163
             165:   20(float) Bitcast 164
             166:   21(fvec3) CompositeConstruct 155 160 165
             167:   48(fvec4) Load 76
             168:   48(fvec4) VectorShuffle 167 166 4 5 6 3
                              Store 76 168
             170:     39(ptr) AccessChain 76 55
             171:   20(float) Load 170
             172:     39(ptr) AccessChain 169 79
                              Store 172 171
             174:      6(int) Load 8
             176:     34(ptr) AccessChain 31 15 174 15 175
             177:     24(int) Load 176
             178:   20(float) Bitcast 177
             179:      6(int) Load 8
             180:     34(ptr) AccessChain 31 15 179 15 15
             181:     24(int) Load 180
             182:   20(float) Bitcast 181
             183:      6(int) Load 8
             185:     34(ptr) AccessChain 31 15 183 15 184
             186:     24(int) Load 185
             187:   20(float) Bitcast 186
             188:   21(fvec3) CompositeConstruct 178 182 187
             189:   48(fvec4) Load 173
             190:   48(fvec4) VectorShuffle 189 188 4 5 6 3
                              Store 173 190
             191:     39(ptr) AccessChain 173 79
             192:   20(float) Load 191
             193:     39(ptr) AccessChain 169 38
                              Store 193 192
             194:      6(int) Load 8
             195:     34(ptr) AccessChain 31 15 194 15 54
             196:     24(int) Load 195
             197:   20(float) Bitcast 196
             198:      6(int) Load 8
             199:     34(ptr) AccessChain 31 15 198 15 137
             200:     24(int) Load 199
             201:   20(float) Bitcast 200
             202:      6(int) Load 8
             204:     34(ptr) AccessChain 31 15 202 15 203
             205:     24(int) Load 204
             206:   20(float) Bitcast 205
             207:   21(fvec3) CompositeConstruct 197 201 206
                              Store 23 207
             209:      6(int) Load 8
             211:     34(ptr) AccessChain 31 15 209 15 210
             212:     24(int) Load 211
             213:   20(float) Bitcast 212
             214:      6(int) Load 8
             216:     34(ptr) AccessChain 31 15 214 15 215
             217:     24(int) Load 216
             218:   20(float) Bitcast 217
             219:      6(int) Load 8
             221:     34(ptr) AccessChain 31 15 219 15 220
             222:     24(int) Load 221
             223:   20(float) Bitcast 222
             224:   21(fvec3) CompositeConstruct 213 218 223
                              Store 208 224
             225:     39(ptr) AccessChain 23 79
             226:   20(float) Load 225
             227:     39(ptr) AccessChain 169 55
                              Store 227 226
             228:     39(ptr) AccessChain 76 38
             229:   20(float) Load 228
             230:     39(ptr) AccessChain 173 79
                              Store 230 229
             231:     39(ptr) AccessChain 173 55
             232:   20(float) Load 231
             233:     39(ptr) AccessChain 76 38
                              Store 233 232
             234:     39(ptr) AccessChain 23 38
             235:   20(float) Load 234
             236:     39(ptr) AccessChain 76 55
                              Store 236 235
             237:     39(ptr) AccessChain 23 55
             238:   20(float) Load 237
             239:     39(ptr) AccessChain 173 55
                              Store 239 238
             241:   48(fvec4) Load 169
             242:   21(fvec3) VectorShuffle 241 241 2 0 1
             243:   48(fvec4) Load 76
             244:   21(fvec3) VectorShuffle 243 243 1 2 0
             245:   21(fvec3) FMul 242 244
             246:   48(fvec4) Load 240
             247:   48(fvec4) VectorShuffle 246 245 4 5 6 3
                              Store 240 247
             248:   48(fvec4) Load 76
             249:   21(fvec3) VectorShuffle 248 248 2 0 1
             250:   48(fvec4) Load 169
             251:   21(fvec3) VectorShuffle 250 250 1 2 0
             252:   21(fvec3) FMul 249 251
             253:   48(fvec4) Load 240
             254:   21(fvec3) VectorShuffle 253 253 0 1 2
             255:   21(fvec3) FNegate 254
             256:   21(fvec3) FAdd 252 255
             257:   48(fvec4) Load 240
             258:   48(fvec4) VectorShuffle 257 256 4 5 6 3
                              Store 240 258
             260:   48(fvec4) Load 169
             261:   21(fvec3) VectorShuffle 260 260 1 2 0
             262:   48(fvec4) Load 173
             263:   21(fvec3) VectorShuffle 262 262 2 0 1
             264:   21(fvec3) FMul 261 263
                              Store 259 264
             265:   48(fvec4) Load 173
             266:   21(fvec3) VectorShuffle 265 265 1 2 0
             267:   48(fvec4) Load 169
             268:   21(fvec3) VectorShuffle 267 267 2 0 1
             269:   21(fvec3) FMul 266 268
             270:   21(fvec3) Load 259
             271:   21(fvec3) FNegate 270
             272:   21(fvec3) FAdd 269 271
                              Store 259 272
             274:   48(fvec4) Load 76
             275:   21(fvec3) VectorShuffle 274 274 0 1 2
             276:   21(fvec3) Load 259
             277:   20(float) Dot 275 276
                              Store 273 277
             278:   20(float) Load 273
             279:   20(float) FDiv 88 278
                              Store 273 279
             280:   20(float) Load 273
             281:   21(fvec3) CompositeConstruct 280 280 280
             282:   48(fvec4) Load 240
             283:   21(fvec3) VectorShuffle 282 282 0 1 2
             284:   21(fvec3) FMul 281 283
             285:   48(fvec4) Load 240
             286:   48(fvec4) VectorShuffle 285 284 4 5 6 3
                              Store 240 286
             289:   21(fvec3) Load 288
             290:   48(fvec4) Load 240
             291:   21(fvec3) VectorShuffle 290 290 0 1 2
             292:   20(float) Dot 289 291
             293:     39(ptr) AccessChain 240 55
                              Store 293 292
             295:   48(fvec4) Load 76
             296:   21(fvec3) VectorShuffle 295 295 2 0 1
             297:   48(fvec4) Load 173
             298:   21(fvec3) VectorShuffle 297 297 1 2 0
             299:   21(fvec3) FMul 296 298
                              Store 294 299
             300:   48(fvec4) Load 76
             301:   21(fvec3) VectorShuffle 300 300 1 2 0
             302:   48(fvec4) Load 173
             303:   21(fvec3) VectorShuffle 302 302 2 0 1
             304:   21(fvec3) FMul 301 303
             305:   21(fvec3) Load 294
             306:   21(fvec3) FNegate 305
             307:   21(fvec3) FAdd 304 306
                              Store 294 307
             308:   20(float) Load 273
             309:   21(fvec3) CompositeConstruct 308 308 308
             310:   21(fvec3) Load 294
             311:   21(fvec3) FMul 309 310
                              Store 294 311
             312:   20(float) Load 273
             313:   21(fvec3) CompositeConstruct 312 312 312
             314:   21(fvec3) Load 259
             315:   21(fvec3) FMul 313 314
                              Store 259 315
             316:   21(fvec3) Load 288
             317:   21(fvec3) Load 259
             318:   20(float) Dot 316 317
             319:     39(ptr) AccessChain 240 38
                              Store 319 318
             320:   21(fvec3) Load 288
             321:   21(fvec3) Load 294
             322:   20(float) Dot 320 321
             323:     39(ptr) AccessChain 240 79
                              Store 323 322
             324:   48(fvec4) Load 240
             325:   21(fvec3) VectorShuffle 324 324 0 1 2
             326:   48(fvec4) Load 240
             327:   21(fvec3) VectorShuffle 326 326 0 1 2
             328:   20(float) Dot 325 327
                              Store 273 328
             329:   20(float) Load 273
             330:   20(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 329
                              Store 273 330
             331:   20(float) Load 273
             332:   21(fvec3) CompositeConstruct 331 331 331
             333:   48(fvec4) Load 240
             334:   21(fvec3) VectorShuffle 333 333 0 1 2
             335:   21(fvec3) FMul 332 334
             336:   48(fvec4) Load 240
             337:   48(fvec4) VectorShuffle 336 335 4 5 6 3
                              Store 240 337
             338:     39(ptr) AccessChain 208 38
             339:   20(float) Load 338
             340:     39(ptr) AccessChain 76 84
                              Store 340 339
             341:   48(fvec4) Load 76
             343:   48(fvec4) Load 342
             344:   20(float) Dot 341 343
             345:     39(ptr) AccessChain 76 38
                              Store 345 344
             346:     39(ptr) AccessChain 208 55
             347:   20(float) Load 346
             348:     39(ptr) AccessChain 173 84
                              Store 348 347
             349:     39(ptr) AccessChain 208 79
             350:   20(float) Load 349
             351:     39(ptr) AccessChain 169 84
                              Store 351 350
             352:   48(fvec4) Load 169
             353:   48(fvec4) Load 342
             354:   20(float) Dot 352 353
             355:     39(ptr) AccessChain 76 79
                              Store 355 354
             356:   48(fvec4) Load 173
             357:   48(fvec4) Load 342
             358:   20(float) Dot 356 357
             359:     39(ptr) AccessChain 76 55
                              Store 359 358
             360:   48(fvec4) Load 76
             361:   21(fvec3) VectorShuffle 360 360 0 1 2
             362:   21(fvec3) FNegate 361
             363:    104(ptr) AccessChain 53 15
             364:   48(fvec4) Load 363
             365:   21(fvec3) VectorShuffle 364 364 3 3 3
             366:   21(fvec3) FMul 362 365
             367:    104(ptr) AccessChain 53 15
             368:   48(fvec4) Load 367
             369:   21(fvec3) VectorShuffle 368 368 0 1 2
             370:   21(fvec3) FAdd 366 369
             371:   48(fvec4) Load 169
             372:   48(fvec4) VectorShuffle 371 370 4 5 6 3
                              Store 169 372
             373:   48(fvec4) Load 169
             374:   21(fvec3) VectorShuffle 373 373 0 1 2
             375:   48(fvec4) Load 169
             376:   21(fvec3) VectorShuffle 375 375 0 1 2
             377:   20(float) Dot 374 376
                              Store 273 377
             378:   20(float) Load 273
             379:   20(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 378
                              Store 273 379
             380:   20(float) Load 273
             381:   21(fvec3) CompositeConstruct 380 380 380
             382:   48(fvec4) Load 169
             383:   21(fvec3) VectorShuffle 382 382 0 1 2
             384:   21(fvec3) FMul 381 383
             385:   48(fvec4) Load 169
             386:   48(fvec4) VectorShuffle 385 384 4 5 6 3
                              Store 169 386
             387:   48(fvec4) Load 240
             388:   21(fvec3) VectorShuffle 387 387 0 1 2
             389:   48(fvec4) Load 169
             390:   21(fvec3) VectorShuffle 389 389 0 1 2
             391:   20(float) Dot 388 390
                              Store 273 391
             392:   20(float) Load 273
             393:   20(float) FNegate 392
             394:   20(float) Load 273
             395:   20(float) FMul 393 394
             396:   20(float) FAdd 395 88
                              Store 273 396
             397:   20(float) Load 273
             398:   20(float) ExtInst 1(GLSL.std.450) 31(Sqrt) 397
                              Store 273 398
             399:   20(float) Load 273
             400:     56(ptr) AccessChain 53 175 79
             401:   20(float) Load 400
             402:   20(float) FMul 399 401
                              Store 273 402
             403:   48(fvec4) Load 240
             404:   21(fvec3) VectorShuffle 403 403 0 1 2
             405:   21(fvec3) FNegate 404
             406:   20(float) Load 273
             407:   21(fvec3) CompositeConstruct 406 406 406
             408:   21(fvec3) FMul 405 407
             409:   48(fvec4) Load 76
             410:   21(fvec3) VectorShuffle 409 409 0 1 2
             411:   21(fvec3) FAdd 408 410
             412:   48(fvec4) Load 240
             413:   48(fvec4) VectorShuffle 412 411 4 5 6 3
                              Store 240 413
             414:     56(ptr) AccessChain 53 175 79
             415:   20(float) Load 414
             416:   114(bool) FOrdNotEqual 415 119
                              Store 116 416
             417:   114(bool) Load 116
                              SelectionMerge 421 None
                              BranchConditional 417 420 424
             420:               Label
             422:   48(fvec4)   Load 240
             423:   21(fvec3)   VectorShuffle 422 422 0 1 2
                                Store 419 423
                                Branch 421
             424:               Label
             425:   48(fvec4)   Load 76
             426:   21(fvec3)   VectorShuffle 425 425 0 1 2
                                Store 419 426
                                Branch 421
             421:             Label
             427:   21(fvec3) Load 419
             428:   48(fvec4) Load 240
             429:   48(fvec4) VectorShuffle 428 427 4 5 6 3
                              Store 240 429
             430:   48(fvec4) Load 240
             431:   48(fvec4) VectorShuffle 430 430 1 1 1 1
             432:    104(ptr) AccessChain 53 184 175
             433:   48(fvec4) Load 432
             434:   48(fvec4) FMul 431 433
                              Store 76 434
             435:    104(ptr) AccessChain 53 184 15
             436:   48(fvec4) Load 435
             437:   48(fvec4) Load 240
             438:   48(fvec4) VectorShuffle 437 437 0 0 0 0
             439:   48(fvec4) FMul 436 438
             440:   48(fvec4) Load 76
             441:   48(fvec4) FAdd 439 440
                              Store 76 441
             442:    104(ptr) AccessChain 53 184 184
             443:   48(fvec4) Load 442
             444:   48(fvec4) Load 240
             445:   48(fvec4) VectorShuffle 444 444 2 2 2 2
             446:   48(fvec4) FMul 443 445
             447:   48(fvec4) Load 76
             448:   48(fvec4) FAdd 446 447
                              Store 240 448
             449:    104(ptr) AccessChain 53 184 54
             450:   48(fvec4) Load 449
             451:   48(fvec4) Load 342
             452:   48(fvec4) VectorShuffle 451 451 3 3 3 3
             453:   48(fvec4) FMul 450 452
             454:   48(fvec4) Load 240
             455:   48(fvec4) FAdd 453 454
                              Store 240 455
             456:     56(ptr) AccessChain 53 175 38
             457:   20(float) Load 456
             458:     39(ptr) AccessChain 240 84
             459:   20(float) Load 458
             460:   20(float) FDiv 457 459
             461:     39(ptr) AccessChain 76 38
                              Store 461 460
             462:     39(ptr) AccessChain 76 38
             463:   20(float) Load 462
             464:   20(float) ExtInst 1(GLSL.std.450) 37(FMin) 463 119
             465:     39(ptr) AccessChain 76 38
                              Store 465 464
             466:     39(ptr) AccessChain 76 38
             467:   20(float) Load 466
             469:   20(float) ExtInst 1(GLSL.std.450) 40(FMax) 467 468
             470:     39(ptr) AccessChain 76 38
                              Store 470 469
             471:     39(ptr) AccessChain 240 79
             472:   20(float) Load 471
             473:     39(ptr) AccessChain 76 38
             474:   20(float) Load 473
             475:   20(float) FAdd 472 474
                              Store 45 475
             476:     39(ptr) AccessChain 240 84
             477:   20(float) Load 476
             478:   20(float) Load 45
             479:   20(float) ExtInst 1(GLSL.std.450) 37(FMin) 477 478
             480:     39(ptr) AccessChain 76 38
                              Store 480 479
             485:   48(fvec4) Load 240
             486:   21(fvec3) VectorShuffle 485 485 0 1 3
             487:    146(ptr) AccessChain 484 15
             488:   48(fvec4) Load 487
             489:   48(fvec4) VectorShuffle 488 486 4 5 2 6
                              Store 487 489
             490:   20(float) Load 45
             491:   20(float) FNegate 490
             492:     39(ptr) AccessChain 76 38
             493:   20(float) Load 492
             494:   20(float) FAdd 491 493
             495:     39(ptr) AccessChain 240 38
                              Store 495 494
             496:     56(ptr) AccessChain 53 175 55
             497:   20(float) Load 496
             498:     39(ptr) AccessChain 240 38
             499:   20(float) Load 498
             500:   20(float) FMul 497 499
             501:   20(float) Load 45
             502:   20(float) FAdd 500 501
             504:    503(ptr) AccessChain 484 15 79
                              Store 504 502
             505:    503(ptr) AccessChain 484 15 55
             506:   20(float) Load 505
             507:   20(float) FNegate 506
             508:    503(ptr) AccessChain 484 15 55
                              Store 508 507
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 102

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 11 40 46 99
                              ExecutionMode 4 OriginUpperLeft
                              Name 40  "vs_TEXCOORD1"
                              Name 46  "vs_TEXCOORD3"
                              Decorate 11 BuiltIn FragCoord
                              Decorate 27 RelaxedPrecision
                              Decorate 30 RelaxedPrecision
                              Decorate 30 DescriptorSet 0
                              Decorate 30 Binding 2
                              Decorate 31 RelaxedPrecision
                              Decorate 34 RelaxedPrecision
                              Decorate 34 DescriptorSet 0
                              Decorate 34 Binding 0
                              Decorate 35 RelaxedPrecision
                              Decorate 40(vs_TEXCOORD1) Location 0
                              Decorate 43 RelaxedPrecision
                              Decorate 44 RelaxedPrecision
                              Decorate 45 RelaxedPrecision
                              Decorate 46(vs_TEXCOORD3) RelaxedPrecision
                              Decorate 46(vs_TEXCOORD3) Location 1
                              Decorate 48 RelaxedPrecision
                              Decorate 49 RelaxedPrecision
                              Decorate 50 RelaxedPrecision
                              Decorate 51 RelaxedPrecision
                              Decorate 53 RelaxedPrecision
                              Decorate 56 RelaxedPrecision
                              Decorate 68 RelaxedPrecision
                              Decorate 68 DescriptorSet 0
                              Decorate 68 Binding 3
                              Decorate 69 RelaxedPrecision
                              Decorate 70 RelaxedPrecision
                              Decorate 70 DescriptorSet 0
                              Decorate 70 Binding 1
                              Decorate 71 RelaxedPrecision
                              Decorate 76 RelaxedPrecision
                              Decorate 77 RelaxedPrecision
                              Decorate 78 RelaxedPrecision
                              Decorate 80 RelaxedPrecision
                              Decorate 84 RelaxedPrecision
                              Decorate 99 RelaxedPrecision
                              Decorate 99 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Function 7(fvec4)
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              12:             TypeVector 6(float) 3
              15:    6(float) Constant 1065353216
              16:             TypeInt 32 0
              17:     16(int) Constant 3
              18:             TypePointer Input 6(float)
              26:             TypePointer Private 6(float)
              27:     26(ptr) Variable Private
              28:             TypeImage 6(float) 2D sampled format:Unknown
              29:             TypePointer UniformConstant 28
              30:     29(ptr) Variable UniformConstant
              32:             TypeSampler
              33:             TypePointer UniformConstant 32
              34:     33(ptr) Variable UniformConstant
              36:             TypeSampledImage 28
              38:             TypeVector 6(float) 2
              39:             TypePointer Input 38(fvec2)
40(vs_TEXCOORD1):     39(ptr) Variable Input
              44:     26(ptr) Variable Private
46(vs_TEXCOORD3):     10(ptr) Variable Input
              50:     26(ptr) Variable Private
              52:    6(float) Constant 1064304640
              54:             TypePointer Private 12(fvec3)
              55:     54(ptr) Variable Private
              57:     16(int) Constant 2
              61:    6(float) Constant 1048576000
              62:   38(fvec2) ConstantComposite 61 61
              66:             TypeImage 6(float) 3D sampled format:Unknown
              67:             TypePointer UniformConstant 66
              68:     67(ptr) Variable UniformConstant
              70:     33(ptr) Variable UniformConstant
              72:             TypeSampledImage 66
              77:     26(ptr) Variable Private
              79:    6(float) Constant 3156465418
              81:             TypeBool
              82:             TypePointer Private 81(bool)
              83:     82(ptr) Variable Private
              85:    6(float) Constant 0
              88:             TypeInt 32 1
              89:     88(int) Constant 0
              90:     88(int) Constant 1
              92:     88(int) Constant 4294967295
              98:             TypePointer Output 7(fvec4)
              99:     98(ptr) Variable Output
             100:    7(fvec4) ConstantComposite 85 85 85 85
               4:           2 Function None 3
               5:             Label
               9:      8(ptr) Variable Function
              13:    7(fvec4) Load 11
              14:   12(fvec3) VectorShuffle 13 13 0 1 2
              19:     18(ptr) AccessChain 11 17
              20:    6(float) Load 19
              21:    6(float) FDiv 15 20
              22:    6(float) CompositeExtract 14 0
              23:    6(float) CompositeExtract 14 1
              24:    6(float) CompositeExtract 14 2
              25:    7(fvec4) CompositeConstruct 22 23 24 21
                              Store 9 25
              31:          28 Load 30
              35:          32 Load 34
              37:          36 SampledImage 31 35
              41:   38(fvec2) Load 40(vs_TEXCOORD1)
              42:    7(fvec4) ImageSampleImplicitLod 37 41
              43:    6(float) CompositeExtract 42 3
                              Store 27 43
              45:    6(float) Load 27
              47:     18(ptr) AccessChain 46(vs_TEXCOORD3) 17
              48:    6(float) Load 47
              49:    6(float) FMul 45 48
                              Store 44 49
              51:    6(float) Load 44
              53:    6(float) FMul 51 52
                              Store 50 53
              56:    6(float) Load 50
              58:     26(ptr) AccessChain 55 57
                              Store 58 56
              59:    7(fvec4) Load 9
              60:   38(fvec2) VectorShuffle 59 59 0 1
              63:   38(fvec2) FMul 60 62
              64:   12(fvec3) Load 55
              65:   12(fvec3) VectorShuffle 64 63 3 4 2
                              Store 55 65
              69:          66 Load 68
              71:          32 Load 70
              73:          72 SampledImage 69 71
              74:   12(fvec3) Load 55
              75:    7(fvec4) ImageSampleImplicitLod 73 74
              76:    6(float) CompositeExtract 75 3
                              Store 27 76
              78:    6(float) Load 27
              80:    6(float) FAdd 78 79
                              Store 77 80
              84:    6(float) Load 77
              86:    81(bool) FOrdLessThan 84 85
                              Store 83 86
              87:    81(bool) Load 83
              91:     88(int) Select 87 90 89
              93:     88(int) IMul 91 92
              94:    81(bool) INotEqual 93 89
                              SelectionMerge 96 None
                              BranchConditional 94 95 96
              95:               Label
                                Kill
              96:             Label
                              Store 99 100
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SHADOWS_DEPTH 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 52 math, 7 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "$Globals" (96 bytes) on slot 0 {
  Vector4 unity_ParticleUVShiftData at 32
  Vector4 _MainTex_ST at 64
}
Constant Buffer "UnityLighting" (768 bytes) on slot 1 {
  Vector4 _WorldSpaceLightPos0 at 0
}
Constant Buffer "UnityShadows" (416 bytes) on slot 2 {
  Vector4 unity_LightShadowBias at 80
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 3 {
  Matrix4x4 unity_MatrixVP at 272
}
Constant Buffer "UnityDrawCallInfo" (16 bytes) on slot 4 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
// SV_InstanceID            0   x           4   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 1   xy          0     NONE   float   xy  
// TEXCOORD                 3   xyzw        1     NONE   float   xyzw
// SV_POSITION              0   xyzw        2      POS   float   xyzw
//
      vs_5_0
      dcl_globalFlags refactoringAllowed
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_constantbuffer CB1[1], immediateIndexed
      dcl_constantbuffer CB2[6], immediateIndexed
      dcl_constantbuffer CB3[21], immediateIndexed
      dcl_constantbuffer CB4[1], immediateIndexed
      dcl_resource_structured t0, 56
      dcl_input v0.xyzw
      dcl_input v1.xyz
      dcl_input v2.xyzw
      dcl_input v3.xy
      dcl_input_sgv v4.x, instance_id
      dcl_output o0.xy
      dcl_output o1.xyzw
      dcl_output_siv o2.xyzw, position
      dcl_temps 7
   0: iadd r0.x, v4.x, cb4[0].x
   1: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r0.y, r0.x, l(52), t0.xxxx
   2: round_ni r0.y, r0.y
   3: div r0.z, r0.y, cb0[2].y
   4: round_ni r0.z, r0.z
   5: mad r0.y, -r0.z, cb0[2].y, r0.y
   6: round_ni r0.y, r0.y
   7: mul r1.x, r0.y, cb0[2].z
   8: add r0.y, -cb0[2].w, l(1.000000)
   9: mad r1.y, -r0.z, cb0[2].w, r0.y
  10: mad r0.yz, v3.xxyx, cb0[2].zzwz, r1.xxyx
  11: ne r0.w, cb0[2].x, l(0.000000)
  12: movc r0.yz, r0.wwww, r0.yyzy, v3.xxyx
  13: mad o0.xy, r0.yzyy, cb0[4].xyxx, cb0[4].zwzz
  14: mov o1.xyzw, v2.xyzw
  15: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r1.xyz, r0.x, l(24), t0.yzxx
  16: mov r2.z, r1.y
  17: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r3.xyz, r0.x, l(0), t0.yxzx
  18: mov r2.x, r3.z
  19: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r0.yzw, r0.x, l(12), t0.xxyz
  20: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r4.xyz, r0.x, l(36), t0.xyzx
  21: mov r2.y, r0.w
  22: mov r3.z, r1.x
  23: mov r1.x, r3.y
  24: mov r1.y, r0.y
  25: mov r3.y, r0.z
  26: mul r0.xyz, r2.zxyz, r1.yzxy
  27: mad r0.xyz, r1.zxyz, r2.yzxy, -r0.xyzx
  28: mul r5.xyz, r2.yzxy, r3.zxyz
  29: mad r5.xyz, r3.yzxy, r2.zxyz, -r5.xyzx
  30: dp3 r0.w, r1.xyzx, r5.xyzx
  31: rcp r0.w, r0.w
  32: mul r0.xyz, r0.wwww, r0.xyzx
  33: dp3 r0.y, v1.xyzx, r0.xyzx
  34: mul r6.xyz, r1.zxyz, r3.yzxy
  35: mad r6.xyz, r1.yzxy, r3.zxyz, -r6.xyzx
  36: mul r6.xyz, r0.wwww, r6.xyzx
  37: mul r5.xyz, r0.wwww, r5.xyzx
  38: dp3 r0.x, v1.xyzx, r5.xyzx
  39: dp3 r0.z, v1.xyzx, r6.xyzx
  40: dp3 r0.w, r0.xyzx, r0.xyzx
  41: rsq r0.w, r0.w
  42: mul r0.xyz, r0.wwww, r0.xyzx
  43: mov r1.w, r4.x
  44: dp4 r1.x, r1.xyzw, v0.xyzw
  45: mov r3.w, r4.y
  46: mov r2.w, r4.z
  47: dp4 r1.z, r2.xyzw, v0.xyzw
  48: dp4 r1.y, r3.xyzw, v0.xyzw
  49: mad r2.xyz, -r1.xyzx, cb1[0].wwww, cb1[0].xyzx
  50: dp3 r0.w, r2.xyzx, r2.xyzx
  51: rsq r0.w, r0.w
  52: mul r2.xyz, r0.wwww, r2.xyzx
  53: dp3 r0.w, r0.xyzx, r2.xyzx
  54: mad r0.w, -r0.w, r0.w, l(1.000000)
  55: sqrt r0.w, r0.w
  56: mul r0.w, r0.w, cb2[5].z
  57: mad r0.xyz, -r0.xyzx, r0.wwww, r1.xyzx
  58: ne r0.w, cb2[5].z, l(0.000000)
  59: movc r0.xyz, r0.wwww, r0.xyzx, r1.xyzx
  60: mul r1.xyzw, r0.yyyy, cb3[18].xyzw
  61: mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
  62: mad r0.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
  63: mad r0.xyzw, cb3[20].xyzw, v0.wwww, r0.xyzw
  64: div r1.x, cb2[5].x, r0.w
  65: min r1.x, r1.x, l(0.000000)
  66: max r1.x, r1.x, l(-1.000000)
  67: add r0.z, r0.z, r1.x
  68: min r1.x, r0.w, r0.z
  69: mov o2.xyw, r0.xyxw
  70: add r0.x, -r0.z, r1.x
  71: mad o2.z, cb2[5].y, r0.x, r0.z
  72: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 5 math, 1 temp registers, 2 textures
Set 2D Texture "_MainTex" to slot 0
Set 3D Texture "_DitherMaskLOD" to slot 1

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 1   xy          0     NONE   float   xy  
// TEXCOORD                 3   xyzw        1     NONE   float      w
// SV_Position              0   xyzw        2      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_5_0
      dcl_globalFlags refactoringAllowed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture3d (float,float,float,float) t1
      dcl_input_ps linear v0.xy
      dcl_input_ps linear v1.w
      dcl_input_ps_siv linear noperspective v2.xy, position
      dcl_output o0.xyzw
      dcl_temps 1
   0: sample_indexable(texture2d)(float,float,float,float) r0.x, v0.xyxx, t0.wxyz, s0
   1: mul r0.x, r0.x, v1.w
   2: mul r0.z, r0.x, l(0.937500)
   3: mul r0.xy, v2.xyxx, l(0.250000, 0.250000, 0.000000, 0.000000)
   4: sample_indexable(texture3d)(float,float,float,float) r0.x, r0.xyzx, t1.wxyz, s1
   5: add r0.x, r0.x, l(-0.010000)
   6: lt r0.x, r0.x, l(0.000000)
   7: discard_nz r0.x
   8: mov o0.xyzw, l(0,0,0,0)
   9: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SHADOWS_DEPTH 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Set 2D Texture "_MainTex" to slot 0
Set 3D Texture "_DitherMaskLOD" to slot 1

Constant Buffer "$Globals" (144 bytes) {
  Matrix4x4 unity_MatrixVP at 32
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  ScalarInt unity_BaseInstanceID at 96
  Vector4 unity_ParticleUVShiftData at 112
  Vector4 _MainTex_ST at 128
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	vec4 _MainTex_ST;
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
layout(location = 0) out highp vec2 vs_TEXCOORD1;
layout(location = 1) out mediump vec4 vs_TEXCOORD3;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
float u_xlat14;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat7.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(52 >> 2) + 0]);
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat14 = u_xlat7.x / unity_ParticleUVShiftData.y;
    u_xlat14 = floor(u_xlat14);
    u_xlat7.x = (-u_xlat14) * unity_ParticleUVShiftData.y + u_xlat7.x;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat1.x = u_xlat7.x * unity_ParticleUVShiftData.z;
    u_xlat7.x = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat14) * unity_ParticleUVShiftData.w + u_xlat7.x;
    u_xlat7.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb21 = unity_ParticleUVShiftData.x!=0.0;
    u_xlat7.xy = (bool(u_xlatb21)) ? u_xlat7.xy : in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = u_xlat7.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3 = in_COLOR0;
    u_xlat1.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 0]));
    u_xlat2.z = u_xlat1.y;
    u_xlat3.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 2]));
    u_xlat2.x = u_xlat3.z;
    u_xlat7.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 2]));
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 2]));
    u_xlat2.y = u_xlat7.z;
    u_xlat3.z = u_xlat1.x;
    u_xlat1.x = u_xlat3.y;
    u_xlat1.y = u_xlat7.x;
    u_xlat3.y = u_xlat7.y;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat0.xyz);
    u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat5.xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat21 = float(1.0) / float(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.y = dot(in_NORMAL0.xyz, u_xlat0.xyz);
    u_xlat6.xyz = u_xlat1.zxy * u_xlat3.yzx;
    u_xlat6.xyz = u_xlat1.yzx * u_xlat3.zxy + (-u_xlat6.xyz);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat5.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat5.xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, u_xlat6.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat1.w = u_xlat4.x;
    u_xlat1.x = dot(u_xlat1, in_POSITION0);
    u_xlat3.w = u_xlat4.y;
    u_xlat2.w = u_xlat4.z;
    u_xlat1.z = dot(u_xlat2, in_POSITION0);
    u_xlat1.y = dot(u_xlat3, in_POSITION0);
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat21 = (-u_xlat21) * u_xlat21 + 1.0;
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = u_xlat21 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat21) + u_xlat1.xyz;
    u_xlatb21 = unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb21)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat14 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = max((-u_xlat0.w), u_xlat14);
    gl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat14) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat14;
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler3D _DitherMaskLOD;
layout(location = 0) in highp vec2 vs_TEXCOORD1;
layout(location = 1) in mediump vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_1;
mediump float u_xlat16_2;
mediump float u_xlat16_7;
void main()
{
vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    u_xlat16_1 = u_xlat16_0 * vs_TEXCOORD3.w;
    u_xlat16_7 = u_xlat16_1 * 0.9375;
    u_xlat1.z = u_xlat16_7;
    u_xlat1.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
    u_xlat16_0 = texture(_DitherMaskLOD, u_xlat1.xyz).w;
    u_xlat16_2 = u_xlat16_0 + -0.00999999978;
    u_xlatb0 = u_xlat16_2<0.0;
    if(u_xlatb0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SHADOWS_DEPTH 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (128 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 32
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  Vector4 unity_ParticleUVShiftData at 96
  Vector4 _MainTex_ST at 112
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_LightShadowBias;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 mtl_Position [[ position ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float3 u_xlat4;
    float3 u_xlat5;
    float3 u_xlat6;
    float3 u_xlat7;
    float u_xlat14;
    float u_xlat21;
    bool u_xlatb21;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat7.x = as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x34 >> 2) + 0]);
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat14 = u_xlat7.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat14 = floor(u_xlat14);
    u_xlat7.x = fma((-u_xlat14), VGlobals.unity_ParticleUVShiftData.y, u_xlat7.x);
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat1.x = u_xlat7.x * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat7.x = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = fma((-u_xlat14), VGlobals.unity_ParticleUVShiftData.w, u_xlat7.x);
    u_xlat7.xy = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat1.xy);
    u_xlatb21 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat7.xy = (bool(u_xlatb21)) ? u_xlat7.xy : input.TEXCOORD0.xy;
    output.TEXCOORD1.xy = fma(u_xlat7.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD3 = input.COLOR0;
    u_xlat1.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x18 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x18 >> 2) + 0]));
    u_xlat2.z = u_xlat1.y;
    u_xlat3.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x0 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x0 >> 2) + 2]));
    u_xlat2.x = u_xlat3.z;
    u_xlat7.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0xc >> 2) + 2]));
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x24 >> 2) + 2]));
    u_xlat2.y = u_xlat7.z;
    u_xlat3.z = u_xlat1.x;
    u_xlat1.x = u_xlat3.y;
    u_xlat1.y = u_xlat7.x;
    u_xlat3.y = u_xlat7.y;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat1.yzx;
    u_xlat0.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat0.xyz));
    u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy;
    u_xlat5.xyz = fma(u_xlat3.yzx, u_xlat2.zxy, (-u_xlat5.xyz));
    u_xlat21 = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat21 = float(1.0) / float(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.y = dot(input.NORMAL0.xyz, u_xlat0.xyz);
    u_xlat6.xyz = u_xlat1.zxy * u_xlat3.yzx;
    u_xlat6.xyz = fma(u_xlat1.yzx, u_xlat3.zxy, (-u_xlat6.xyz));
    u_xlat6.xyz = float3(u_xlat21) * u_xlat6.xyz;
    u_xlat5.xyz = float3(u_xlat21) * u_xlat5.xyz;
    u_xlat0.x = dot(input.NORMAL0.xyz, u_xlat5.xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, u_xlat6.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat1.w = u_xlat4.x;
    u_xlat1.x = dot(u_xlat1, input.POSITION0);
    u_xlat3.w = u_xlat4.y;
    u_xlat2.w = u_xlat4.z;
    u_xlat1.z = dot(u_xlat2, input.POSITION0);
    u_xlat1.y = dot(u_xlat3, input.POSITION0);
    u_xlat2.xyz = fma((-u_xlat1.xyz), VGlobals._WorldSpaceLightPos0.www, VGlobals._WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat2.xyz = float3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat21 = fma((-u_xlat21), u_xlat21, 1.0);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = u_xlat21 * VGlobals.unity_LightShadowBias.z;
    u_xlat0.xyz = fma((-u_xlat0.xyz), float3(u_xlat21), u_xlat1.xyz);
    u_xlatb21 = VGlobals.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb21)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], input.POSITION0.wwww, u_xlat0);
    u_xlat1.x = VGlobals.unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = min(u_xlat1.x, 0.0);
    u_xlat1.x = max(u_xlat1.x, -1.0);
    u_xlat14 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = min(u_xlat0.w, u_xlat14);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat14) + u_xlat1.x;
    output.mtl_Position.z = fma(VGlobals.unity_LightShadowBias.y, u_xlat0.x, u_xlat14);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 3D Texture "_DitherMaskLOD" to slot 1

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_DitherMaskLOD [[ sampler (1) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture3d<float, access::sample > _DitherMaskLOD [[ texture(1) ]] ,
    float4 mtl_FragCoord [[ position ]],
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 hlslcc_FragCoord = float4(mtl_FragCoord.xyz, 1.0/mtl_FragCoord.w);
    float3 u_xlat0;
    bool u_xlatb0;
    u_xlat0.x = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).w;
    u_xlat0.x = u_xlat0.x * input.TEXCOORD3.w;
    u_xlat0.z = u_xlat0.x * 0.9375;
    u_xlat0.xy = hlslcc_FragCoord.xy * float2(0.25, 0.25);
    u_xlat0.x = _DitherMaskLOD.sample(sampler_DitherMaskLOD, u_xlat0.xyz).w;
    u_xlat0.x = u_xlat0.x + -0.00999999978;
    u_xlatb0 = u_xlat0.x<0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    output.SV_Target0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SHADOWS_DEPTH 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Set 2D Texture "_MainTex" to slot 0
Set 3D Texture "_DitherMaskLOD" to slot 1

Constant Buffer "$Globals" (144 bytes) {
  Matrix4x4 unity_MatrixVP at 32
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  ScalarInt unity_BaseInstanceID at 96
  Vector4 unity_ParticleUVShiftData at 112
  Vector4 _MainTex_ST at 128
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require
#ifdef GL_ARB_shader_storage_buffer_object
#extension GL_ARB_shader_storage_buffer_object : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	vec4 _MainTex_ST;
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
layout(location = 0) out vec2 vs_TEXCOORD1;
layout(location = 1) out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
float u_xlat14;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat7.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(52 >> 2) + 0]);
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat14 = u_xlat7.x / unity_ParticleUVShiftData.y;
    u_xlat14 = floor(u_xlat14);
    u_xlat7.x = (-u_xlat14) * unity_ParticleUVShiftData.y + u_xlat7.x;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat1.x = u_xlat7.x * unity_ParticleUVShiftData.z;
    u_xlat7.x = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat14) * unity_ParticleUVShiftData.w + u_xlat7.x;
    u_xlat7.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb21 = unity_ParticleUVShiftData.x!=0.0;
    u_xlat7.xy = (bool(u_xlatb21)) ? u_xlat7.xy : in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = u_xlat7.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3 = in_COLOR0;
    u_xlat1.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(24 >> 2) + 0]));
    u_xlat2.z = u_xlat1.y;
    u_xlat3.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(0 >> 2) + 2]));
    u_xlat2.x = u_xlat3.z;
    u_xlat7.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(12 >> 2) + 2]));
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati0].value[(36 >> 2) + 2]));
    u_xlat2.y = u_xlat7.z;
    u_xlat3.z = u_xlat1.x;
    u_xlat1.x = u_xlat3.y;
    u_xlat1.y = u_xlat7.x;
    u_xlat3.y = u_xlat7.y;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat0.xyz);
    u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat5.xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat21 = float(1.0) / float(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.y = dot(in_NORMAL0.xyz, u_xlat0.xyz);
    u_xlat6.xyz = u_xlat1.zxy * u_xlat3.yzx;
    u_xlat6.xyz = u_xlat1.yzx * u_xlat3.zxy + (-u_xlat6.xyz);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat5.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat5.xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, u_xlat6.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat1.w = u_xlat4.x;
    u_xlat1.x = dot(u_xlat1, in_POSITION0);
    u_xlat3.w = u_xlat4.y;
    u_xlat2.w = u_xlat4.z;
    u_xlat1.z = dot(u_xlat2, in_POSITION0);
    u_xlat1.y = dot(u_xlat3, in_POSITION0);
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat21 = (-u_xlat21) * u_xlat21 + 1.0;
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = u_xlat21 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat21) + u_xlat1.xyz;
    u_xlatb21 = unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb21)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat14 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = max((-u_xlat0.w), u_xlat14);
    gl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat14) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat14;
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler3D _DitherMaskLOD;
layout(location = 0) in  vec2 vs_TEXCOORD1;
layout(location = 1) in  vec4 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
float u_xlat10_0;
bool u_xlatb0;
void main()
{
vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    u_xlat0.x = u_xlat10_0 * vs_TEXCOORD3.w;
    u_xlat0.z = u_xlat0.x * 0.9375;
    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
    u_xlat10_0 = texture(_DitherMaskLOD, u_xlat0.xyz).w;
    u_xlat0.x = u_xlat10_0 + -0.00999999978;
    u_xlatb0 = u_xlat0.x<0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SHADOWS_DEPTH 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "TexCoord0"
Uses vertex data channel "Color"
Uses vertex data channel "Normal"
Uses vertex data channel "Vertex"

Set 3D Texture "_DitherMaskLOD" to set: 0, binding: 3, used in: Fragment  using sampler in set: 0, binding: 1, used in: Fragment 
Set 2D Texture "_MainTex" to set: 0, binding: 2, used in: Fragment  using sampler in set: 0, binding: 0, used in: Fragment 

Constant Buffer "UnityDrawCallInfo" (8 bytes) on set: 1, binding: 1, used in: Vertex  {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "VGlobals957945234" (128 bytes) on set: 1, binding: 0, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 32
  Vector4 _MainTex_ST at 112
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  Vector4 unity_ParticleUVShiftData at 96
}

Set Buffer  "unity_ParticleInstanceData" to set: 0, binding: 4, used in: Vertex 
Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 510

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 10 102 134 147 149 288 342 484
                              Name 134  "vs_TEXCOORD1"
                              Name 147  "vs_TEXCOORD3"
                              Decorate 10 BuiltIn InstanceIndex
                              MemberDecorate 12 0 Offset 0
                              MemberDecorate 12 1 Offset 4
                              Decorate 12 Block
                              Decorate 14 DescriptorSet 1
                              Decorate 14 Binding 1
                              Decorate 26 ArrayStride 4
                              MemberDecorate 27 0 Offset 0
                              Decorate 28 ArrayStride 56
                              MemberDecorate 29 0 NonWritable
                              MemberDecorate 29 0 Offset 0
                              Decorate 29 BufferBlock
                              Decorate 31 DescriptorSet 0
                              Decorate 31 Binding 4
                              Decorate 50 ArrayStride 16
                              MemberDecorate 51 0 Offset 0
                              MemberDecorate 51 1 Offset 16
                              MemberDecorate 51 2 Offset 32
                              MemberDecorate 51 3 Offset 96
                              MemberDecorate 51 4 Offset 112
                              Decorate 51 Block
                              Decorate 53 DescriptorSet 1
                              Decorate 53 Binding 0
                              Decorate 102 Location 3
                              Decorate 134(vs_TEXCOORD1) Location 0
                              Decorate 147(vs_TEXCOORD3) RelaxedPrecision
                              Decorate 147(vs_TEXCOORD3) Location 1
                              Decorate 149 RelaxedPrecision
                              Decorate 149 Location 2
                              Decorate 150 RelaxedPrecision
                              Decorate 288 Location 1
                              Decorate 342 Location 0
                              MemberDecorate 482 0 BuiltIn Position
                              MemberDecorate 482 1 BuiltIn PointSize
                              MemberDecorate 482 2 BuiltIn ClipDistance
                              Decorate 482 Block
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeInt 32 1
               7:             TypePointer Private 6(int)
               8:      7(ptr) Variable Private
               9:             TypePointer Input 6(int)
              10:      9(ptr) Variable Input
              12:             TypeStruct 6(int) 6(int)
              13:             TypePointer Uniform 12(struct)
              14:     13(ptr) Variable Uniform
              15:      6(int) Constant 0
              16:             TypePointer Uniform 6(int)
              20:             TypeFloat 32
              21:             TypeVector 20(float) 3
              22:             TypePointer Private 21(fvec3)
              23:     22(ptr) Variable Private
              24:             TypeInt 32 0
              25:     24(int) Constant 14
              26:             TypeArray 24(int) 25
              27:             TypeStruct 26
              28:             TypeRuntimeArray 27(struct)
              29:             TypeStruct 28
              30:             TypePointer Uniform 29(struct)
              31:     30(ptr) Variable Uniform
              33:      6(int) Constant 13
              34:             TypePointer Uniform 24(int)
              38:     24(int) Constant 0
              39:             TypePointer Private 20(float)
              45:     39(ptr) Variable Private
              48:             TypeVector 20(float) 4
              49:     24(int) Constant 4
              50:             TypeArray 48(fvec4) 49
              51:             TypeStruct 48(fvec4) 48(fvec4) 50 48(fvec4) 48(fvec4)
              52:             TypePointer Uniform 51(struct)
              53:     52(ptr) Variable Uniform
              54:      6(int) Constant 3
              55:     24(int) Constant 1
              56:             TypePointer Uniform 20(float)
              75:             TypePointer Private 48(fvec4)
              76:     75(ptr) Variable Private
              79:     24(int) Constant 2
              84:     24(int) Constant 3
              88:   20(float) Constant 1065353216
             100:             TypeVector 20(float) 2
             101:             TypePointer Input 100(fvec2)
             102:    101(ptr) Variable Input
             104:             TypePointer Uniform 48(fvec4)
             114:             TypeBool
             115:             TypePointer Private 114(bool)
             116:    115(ptr) Variable Private
             119:   20(float) Constant 0
             122:             TypePointer Function 100(fvec2)
             133:             TypePointer Output 100(fvec2)
134(vs_TEXCOORD1):    133(ptr) Variable Output
             137:      6(int) Constant 4
             146:             TypePointer Output 48(fvec4)
147(vs_TEXCOORD3):    146(ptr) Variable Output
             148:             TypePointer Input 48(fvec4)
             149:    148(ptr) Variable Input
             152:      6(int) Constant 7
             157:      6(int) Constant 8
             162:      6(int) Constant 6
             169:     75(ptr) Variable Private
             173:     75(ptr) Variable Private
             175:      6(int) Constant 1
             184:      6(int) Constant 2
             203:      6(int) Constant 5
             208:     22(ptr) Variable Private
             210:      6(int) Constant 9
             215:      6(int) Constant 10
             220:      6(int) Constant 11
             240:     75(ptr) Variable Private
             259:     22(ptr) Variable Private
             273:     39(ptr) Variable Private
             287:             TypePointer Input 21(fvec3)
             288:    287(ptr) Variable Input
             294:     22(ptr) Variable Private
             342:    148(ptr) Variable Input
             418:             TypePointer Function 21(fvec3)
             468:   20(float) Constant 3212836864
             481:             TypeArray 20(float) 55
             482:             TypeStruct 48(fvec4) 20(float) 481
             483:             TypePointer Output 482(struct)
             484:    483(ptr) Variable Output
             503:             TypePointer Output 20(float)
               4:           2 Function None 3
               5:             Label
             123:    122(ptr) Variable Function
             419:    418(ptr) Variable Function
              11:      6(int) Load 10
              17:     16(ptr) AccessChain 14 15
              18:      6(int) Load 17
              19:      6(int) IAdd 11 18
                              Store 8 19
              32:      6(int) Load 8
              35:     34(ptr) AccessChain 31 15 32 15 33
              36:     24(int) Load 35
              37:   20(float) Bitcast 36
              40:     39(ptr) AccessChain 23 38
                              Store 40 37
              41:     39(ptr) AccessChain 23 38
              42:   20(float) Load 41
              43:   20(float) ExtInst 1(GLSL.std.450) 8(Floor) 42
              44:     39(ptr) AccessChain 23 38
                              Store 44 43
              46:     39(ptr) AccessChain 23 38
              47:   20(float) Load 46
              57:     56(ptr) AccessChain 53 54 55
              58:   20(float) Load 57
              59:   20(float) FDiv 47 58
                              Store 45 59
              60:   20(float) Load 45
              61:   20(float) ExtInst 1(GLSL.std.450) 8(Floor) 60
                              Store 45 61
              62:   20(float) Load 45
              63:   20(float) FNegate 62
              64:     56(ptr) AccessChain 53 54 55
              65:   20(float) Load 64
              66:   20(float) FMul 63 65
              67:     39(ptr) AccessChain 23 38
              68:   20(float) Load 67
              69:   20(float) FAdd 66 68
              70:     39(ptr) AccessChain 23 38
                              Store 70 69
              71:     39(ptr) AccessChain 23 38
              72:   20(float) Load 71
              73:   20(float) ExtInst 1(GLSL.std.450) 8(Floor) 72
              74:     39(ptr) AccessChain 23 38
                              Store 74 73
              77:     39(ptr) AccessChain 23 38
              78:   20(float) Load 77
              80:     56(ptr) AccessChain 53 54 79
              81:   20(float) Load 80
              82:   20(float) FMul 78 81
              83:     39(ptr) AccessChain 76 38
                              Store 83 82
              85:     56(ptr) AccessChain 53 54 84
              86:   20(float) Load 85
              87:   20(float) FNegate 86
              89:   20(float) FAdd 87 88
              90:     39(ptr) AccessChain 23 38
                              Store 90 89
              91:   20(float) Load 45
              92:   20(float) FNegate 91
              93:     56(ptr) AccessChain 53 54 84
              94:   20(float) Load 93
              95:   20(float) FMul 92 94
              96:     39(ptr) AccessChain 23 38
              97:   20(float) Load 96
              98:   20(float) FAdd 95 97
              99:     39(ptr) AccessChain 76 55
                              Store 99 98
             103:  100(fvec2) Load 102
             105:    104(ptr) AccessChain 53 54
             106:   48(fvec4) Load 105
             107:  100(fvec2) VectorShuffle 106 106 2 3
             108:  100(fvec2) FMul 103 107
             109:   48(fvec4) Load 76
             110:  100(fvec2) VectorShuffle 109 109 0 1
             111:  100(fvec2) FAdd 108 110
             112:   21(fvec3) Load 23
             113:   21(fvec3) VectorShuffle 112 111 3 4 2
                              Store 23 113
             117:     56(ptr) AccessChain 53 54 38
             118:   20(float) Load 117
             120:   114(bool) FOrdNotEqual 118 119
                              Store 116 120
             121:   114(bool) Load 116
                              SelectionMerge 125 None
                              BranchConditional 121 124 128
             124:               Label
             126:   21(fvec3)   Load 23
             127:  100(fvec2)   VectorShuffle 126 126 0 1
                                Store 123 127
                                Branch 125
             128:               Label
             129:  100(fvec2)   Load 102
                                Store 123 129
                                Branch 125
             125:             Label
             130:  100(fvec2) Load 123
             131:   21(fvec3) Load 23
             132:   21(fvec3) VectorShuffle 131 130 3 4 2
                              Store 23 132
             135:   21(fvec3) Load 23
             136:  100(fvec2) VectorShuffle 135 135 0 1
             138:    104(ptr) AccessChain 53 137
             139:   48(fvec4) Load 138
             140:  100(fvec2) VectorShuffle 139 139 0 1
             141:  100(fvec2) FMul 136 140
             142:    104(ptr) AccessChain 53 137
             143:   48(fvec4) Load 142
             144:  100(fvec2) VectorShuffle 143 143 2 3
             145:  100(fvec2) FAdd 141 144
                              Store 134(vs_TEXCOORD1) 145
             150:   48(fvec4) Load 149
                              Store 147(vs_TEXCOORD3) 150
             151:      6(int) Load 8
             153:     34(ptr) AccessChain 31 15 151 15 152
             154:     24(int) Load 153
             155:   20(float) Bitcast 154
             156:      6(int) Load 8
             158:     34(ptr) AccessChain 31 15 156 15 157
             159:     24(int) Load 158
             160:   20(float) Bitcast 159
             161:      6(int) Load 8
             163:     34(ptr) AccessChain 31 15 161 15 162
             164:     24(int) Load 163
             165:   20(float) Bitcast 164
             166:   21(fvec3) CompositeConstruct 155 160 165
             167:   48(fvec4) Load 76
             168:   48(fvec4) VectorShuffle 167 166 4 5 6 3
                              Store 76 168
             170:     39(ptr) AccessChain 76 55
             171:   20(float) Load 170
             172:     39(ptr) AccessChain 169 79
                              Store 172 171
             174:      6(int) Load 8
             176:     34(ptr) AccessChain 31 15 174 15 175
             177:     24(int) Load 176
             178:   20(float) Bitcast 177
             179:      6(int) Load 8
             180:     34(ptr) AccessChain 31 15 179 15 15
             181:     24(int) Load 180
             182:   20(float) Bitcast 181
             183:      6(int) Load 8
             185:     34(ptr) AccessChain 31 15 183 15 184
             186:     24(int) Load 185
             187:   20(float) Bitcast 186
             188:   21(fvec3) CompositeConstruct 178 182 187
             189:   48(fvec4) Load 173
             190:   48(fvec4) VectorShuffle 189 188 4 5 6 3
                              Store 173 190
             191:     39(ptr) AccessChain 173 79
             192:   20(float) Load 191
             193:     39(ptr) AccessChain 169 38
                              Store 193 192
             194:      6(int) Load 8
             195:     34(ptr) AccessChain 31 15 194 15 54
             196:     24(int) Load 195
             197:   20(float) Bitcast 196
             198:      6(int) Load 8
             199:     34(ptr) AccessChain 31 15 198 15 137
             200:     24(int) Load 199
             201:   20(float) Bitcast 200
             202:      6(int) Load 8
             204:     34(ptr) AccessChain 31 15 202 15 203
             205:     24(int) Load 204
             206:   20(float) Bitcast 205
             207:   21(fvec3) CompositeConstruct 197 201 206
                              Store 23 207
             209:      6(int) Load 8
             211:     34(ptr) AccessChain 31 15 209 15 210
             212:     24(int) Load 211
             213:   20(float) Bitcast 212
             214:      6(int) Load 8
             216:     34(ptr) AccessChain 31 15 214 15 215
             217:     24(int) Load 216
             218:   20(float) Bitcast 217
             219:      6(int) Load 8
             221:     34(ptr) AccessChain 31 15 219 15 220
             222:     24(int) Load 221
             223:   20(float) Bitcast 222
             224:   21(fvec3) CompositeConstruct 213 218 223
                              Store 208 224
             225:     39(ptr) AccessChain 23 79
             226:   20(float) Load 225
             227:     39(ptr) AccessChain 169 55
                              Store 227 226
             228:     39(ptr) AccessChain 76 38
             229:   20(float) Load 228
             230:     39(ptr) AccessChain 173 79
                              Store 230 229
             231:     39(ptr) AccessChain 173 55
             232:   20(float) Load 231
             233:     39(ptr) AccessChain 76 38
                              Store 233 232
             234:     39(ptr) AccessChain 23 38
             235:   20(float) Load 234
             236:     39(ptr) AccessChain 76 55
                              Store 236 235
             237:     39(ptr) AccessChain 23 55
             238:   20(float) Load 237
             239:     39(ptr) AccessChain 173 55
                              Store 239 238
             241:   48(fvec4) Load 169
             242:   21(fvec3) VectorShuffle 241 241 2 0 1
             243:   48(fvec4) Load 76
             244:   21(fvec3) VectorShuffle 243 243 1 2 0
             245:   21(fvec3) FMul 242 244
             246:   48(fvec4) Load 240
             247:   48(fvec4) VectorShuffle 246 245 4 5 6 3
                              Store 240 247
             248:   48(fvec4) Load 76
             249:   21(fvec3) VectorShuffle 248 248 2 0 1
             250:   48(fvec4) Load 169
             251:   21(fvec3) VectorShuffle 250 250 1 2 0
             252:   21(fvec3) FMul 249 251
             253:   48(fvec4) Load 240
             254:   21(fvec3) VectorShuffle 253 253 0 1 2
             255:   21(fvec3) FNegate 254
             256:   21(fvec3) FAdd 252 255
             257:   48(fvec4) Load 240
             258:   48(fvec4) VectorShuffle 257 256 4 5 6 3
                              Store 240 258
             260:   48(fvec4) Load 169
             261:   21(fvec3) VectorShuffle 260 260 1 2 0
             262:   48(fvec4) Load 173
             263:   21(fvec3) VectorShuffle 262 262 2 0 1
             264:   21(fvec3) FMul 261 263
                              Store 259 264
             265:   48(fvec4) Load 173
             266:   21(fvec3) VectorShuffle 265 265 1 2 0
             267:   48(fvec4) Load 169
             268:   21(fvec3) VectorShuffle 267 267 2 0 1
             269:   21(fvec3) FMul 266 268
             270:   21(fvec3) Load 259
             271:   21(fvec3) FNegate 270
             272:   21(fvec3) FAdd 269 271
                              Store 259 272
             274:   48(fvec4) Load 76
             275:   21(fvec3) VectorShuffle 274 274 0 1 2
             276:   21(fvec3) Load 259
             277:   20(float) Dot 275 276
                              Store 273 277
             278:   20(float) Load 273
             279:   20(float) FDiv 88 278
                              Store 273 279
             280:   20(float) Load 273
             281:   21(fvec3) CompositeConstruct 280 280 280
             282:   48(fvec4) Load 240
             283:   21(fvec3) VectorShuffle 282 282 0 1 2
             284:   21(fvec3) FMul 281 283
             285:   48(fvec4) Load 240
             286:   48(fvec4) VectorShuffle 285 284 4 5 6 3
                              Store 240 286
             289:   21(fvec3) Load 288
             290:   48(fvec4) Load 240
             291:   21(fvec3) VectorShuffle 290 290 0 1 2
             292:   20(float) Dot 289 291
             293:     39(ptr) AccessChain 240 55
                              Store 293 292
             295:   48(fvec4) Load 76
             296:   21(fvec3) VectorShuffle 295 295 2 0 1
             297:   48(fvec4) Load 173
             298:   21(fvec3) VectorShuffle 297 297 1 2 0
             299:   21(fvec3) FMul 296 298
                              Store 294 299
             300:   48(fvec4) Load 76
             301:   21(fvec3) VectorShuffle 300 300 1 2 0
             302:   48(fvec4) Load 173
             303:   21(fvec3) VectorShuffle 302 302 2 0 1
             304:   21(fvec3) FMul 301 303
             305:   21(fvec3) Load 294
             306:   21(fvec3) FNegate 305
             307:   21(fvec3) FAdd 304 306
                              Store 294 307
             308:   20(float) Load 273
             309:   21(fvec3) CompositeConstruct 308 308 308
             310:   21(fvec3) Load 294
             311:   21(fvec3) FMul 309 310
                              Store 294 311
             312:   20(float) Load 273
             313:   21(fvec3) CompositeConstruct 312 312 312
             314:   21(fvec3) Load 259
             315:   21(fvec3) FMul 313 314
                              Store 259 315
             316:   21(fvec3) Load 288
             317:   21(fvec3) Load 259
             318:   20(float) Dot 316 317
             319:     39(ptr) AccessChain 240 38
                              Store 319 318
             320:   21(fvec3) Load 288
             321:   21(fvec3) Load 294
             322:   20(float) Dot 320 321
             323:     39(ptr) AccessChain 240 79
                              Store 323 322
             324:   48(fvec4) Load 240
             325:   21(fvec3) VectorShuffle 324 324 0 1 2
             326:   48(fvec4) Load 240
             327:   21(fvec3) VectorShuffle 326 326 0 1 2
             328:   20(float) Dot 325 327
                              Store 273 328
             329:   20(float) Load 273
             330:   20(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 329
                              Store 273 330
             331:   20(float) Load 273
             332:   21(fvec3) CompositeConstruct 331 331 331
             333:   48(fvec4) Load 240
             334:   21(fvec3) VectorShuffle 333 333 0 1 2
             335:   21(fvec3) FMul 332 334
             336:   48(fvec4) Load 240
             337:   48(fvec4) VectorShuffle 336 335 4 5 6 3
                              Store 240 337
             338:     39(ptr) AccessChain 208 38
             339:   20(float) Load 338
             340:     39(ptr) AccessChain 76 84
                              Store 340 339
             341:   48(fvec4) Load 76
             343:   48(fvec4) Load 342
             344:   20(float) Dot 341 343
             345:     39(ptr) AccessChain 76 38
                              Store 345 344
             346:     39(ptr) AccessChain 208 55
             347:   20(float) Load 346
             348:     39(ptr) AccessChain 173 84
                              Store 348 347
             349:     39(ptr) AccessChain 208 79
             350:   20(float) Load 349
             351:     39(ptr) AccessChain 169 84
                              Store 351 350
             352:   48(fvec4) Load 169
             353:   48(fvec4) Load 342
             354:   20(float) Dot 352 353
             355:     39(ptr) AccessChain 76 79
                              Store 355 354
             356:   48(fvec4) Load 173
             357:   48(fvec4) Load 342
             358:   20(float) Dot 356 357
             359:     39(ptr) AccessChain 76 55
                              Store 359 358
             360:   48(fvec4) Load 76
             361:   21(fvec3) VectorShuffle 360 360 0 1 2
             362:   21(fvec3) FNegate 361
             363:    104(ptr) AccessChain 53 15
             364:   48(fvec4) Load 363
             365:   21(fvec3) VectorShuffle 364 364 3 3 3
             366:   21(fvec3) FMul 362 365
             367:    104(ptr) AccessChain 53 15
             368:   48(fvec4) Load 367
             369:   21(fvec3) VectorShuffle 368 368 0 1 2
             370:   21(fvec3) FAdd 366 369
             371:   48(fvec4) Load 169
             372:   48(fvec4) VectorShuffle 371 370 4 5 6 3
                              Store 169 372
             373:   48(fvec4) Load 169
             374:   21(fvec3) VectorShuffle 373 373 0 1 2
             375:   48(fvec4) Load 169
             376:   21(fvec3) VectorShuffle 375 375 0 1 2
             377:   20(float) Dot 374 376
                              Store 273 377
             378:   20(float) Load 273
             379:   20(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 378
                              Store 273 379
             380:   20(float) Load 273
             381:   21(fvec3) CompositeConstruct 380 380 380
             382:   48(fvec4) Load 169
             383:   21(fvec3) VectorShuffle 382 382 0 1 2
             384:   21(fvec3) FMul 381 383
             385:   48(fvec4) Load 169
             386:   48(fvec4) VectorShuffle 385 384 4 5 6 3
                              Store 169 386
             387:   48(fvec4) Load 240
             388:   21(fvec3) VectorShuffle 387 387 0 1 2
             389:   48(fvec4) Load 169
             390:   21(fvec3) VectorShuffle 389 389 0 1 2
             391:   20(float) Dot 388 390
                              Store 273 391
             392:   20(float) Load 273
             393:   20(float) FNegate 392
             394:   20(float) Load 273
             395:   20(float) FMul 393 394
             396:   20(float) FAdd 395 88
                              Store 273 396
             397:   20(float) Load 273
             398:   20(float) ExtInst 1(GLSL.std.450) 31(Sqrt) 397
                              Store 273 398
             399:   20(float) Load 273
             400:     56(ptr) AccessChain 53 175 79
             401:   20(float) Load 400
             402:   20(float) FMul 399 401
                              Store 273 402
             403:   48(fvec4) Load 240
             404:   21(fvec3) VectorShuffle 403 403 0 1 2
             405:   21(fvec3) FNegate 404
             406:   20(float) Load 273
             407:   21(fvec3) CompositeConstruct 406 406 406
             408:   21(fvec3) FMul 405 407
             409:   48(fvec4) Load 76
             410:   21(fvec3) VectorShuffle 409 409 0 1 2
             411:   21(fvec3) FAdd 408 410
             412:   48(fvec4) Load 240
             413:   48(fvec4) VectorShuffle 412 411 4 5 6 3
                              Store 240 413
             414:     56(ptr) AccessChain 53 175 79
             415:   20(float) Load 414
             416:   114(bool) FOrdNotEqual 415 119
                              Store 116 416
             417:   114(bool) Load 116
                              SelectionMerge 421 None
                              BranchConditional 417 420 424
             420:               Label
             422:   48(fvec4)   Load 240
             423:   21(fvec3)   VectorShuffle 422 422 0 1 2
                                Store 419 423
                                Branch 421
             424:               Label
             425:   48(fvec4)   Load 76
             426:   21(fvec3)   VectorShuffle 425 425 0 1 2
                                Store 419 426
                                Branch 421
             421:             Label
             427:   21(fvec3) Load 419
             428:   48(fvec4) Load 240
             429:   48(fvec4) VectorShuffle 428 427 4 5 6 3
                              Store 240 429
             430:   48(fvec4) Load 240
             431:   48(fvec4) VectorShuffle 430 430 1 1 1 1
             432:    104(ptr) AccessChain 53 184 175
             433:   48(fvec4) Load 432
             434:   48(fvec4) FMul 431 433
                              Store 76 434
             435:    104(ptr) AccessChain 53 184 15
             436:   48(fvec4) Load 435
             437:   48(fvec4) Load 240
             438:   48(fvec4) VectorShuffle 437 437 0 0 0 0
             439:   48(fvec4) FMul 436 438
             440:   48(fvec4) Load 76
             441:   48(fvec4) FAdd 439 440
                              Store 76 441
             442:    104(ptr) AccessChain 53 184 184
             443:   48(fvec4) Load 442
             444:   48(fvec4) Load 240
             445:   48(fvec4) VectorShuffle 444 444 2 2 2 2
             446:   48(fvec4) FMul 443 445
             447:   48(fvec4) Load 76
             448:   48(fvec4) FAdd 446 447
                              Store 240 448
             449:    104(ptr) AccessChain 53 184 54
             450:   48(fvec4) Load 449
             451:   48(fvec4) Load 342
             452:   48(fvec4) VectorShuffle 451 451 3 3 3 3
             453:   48(fvec4) FMul 450 452
             454:   48(fvec4) Load 240
             455:   48(fvec4) FAdd 453 454
                              Store 240 455
             456:     56(ptr) AccessChain 53 175 38
             457:   20(float) Load 456
             458:     39(ptr) AccessChain 240 84
             459:   20(float) Load 458
             460:   20(float) FDiv 457 459
             461:     39(ptr) AccessChain 76 38
                              Store 461 460
             462:     39(ptr) AccessChain 76 38
             463:   20(float) Load 462
             464:   20(float) ExtInst 1(GLSL.std.450) 37(FMin) 463 119
             465:     39(ptr) AccessChain 76 38
                              Store 465 464
             466:     39(ptr) AccessChain 76 38
             467:   20(float) Load 466
             469:   20(float) ExtInst 1(GLSL.std.450) 40(FMax) 467 468
             470:     39(ptr) AccessChain 76 38
                              Store 470 469
             471:     39(ptr) AccessChain 240 79
             472:   20(float) Load 471
             473:     39(ptr) AccessChain 76 38
             474:   20(float) Load 473
             475:   20(float) FAdd 472 474
                              Store 45 475
             476:     39(ptr) AccessChain 240 84
             477:   20(float) Load 476
             478:   20(float) Load 45
             479:   20(float) ExtInst 1(GLSL.std.450) 37(FMin) 477 478
             480:     39(ptr) AccessChain 76 38
                              Store 480 479
             485:   48(fvec4) Load 240
             486:   21(fvec3) VectorShuffle 485 485 0 1 3
             487:    146(ptr) AccessChain 484 15
             488:   48(fvec4) Load 487
             489:   48(fvec4) VectorShuffle 488 486 4 5 2 6
                              Store 487 489
             490:   20(float) Load 45
             491:   20(float) FNegate 490
             492:     39(ptr) AccessChain 76 38
             493:   20(float) Load 492
             494:   20(float) FAdd 491 493
             495:     39(ptr) AccessChain 240 38
                              Store 495 494
             496:     56(ptr) AccessChain 53 175 55
             497:   20(float) Load 496
             498:     39(ptr) AccessChain 240 38
             499:   20(float) Load 498
             500:   20(float) FMul 497 499
             501:   20(float) Load 45
             502:   20(float) FAdd 500 501
             504:    503(ptr) AccessChain 484 15 79
                              Store 504 502
             505:    503(ptr) AccessChain 484 15 55
             506:   20(float) Load 505
             507:   20(float) FNegate 506
             508:    503(ptr) AccessChain 484 15 55
                              Store 508 507
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 102

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 11 40 46 99
                              ExecutionMode 4 OriginUpperLeft
                              Name 40  "vs_TEXCOORD1"
                              Name 46  "vs_TEXCOORD3"
                              Decorate 11 BuiltIn FragCoord
                              Decorate 27 RelaxedPrecision
                              Decorate 30 RelaxedPrecision
                              Decorate 30 DescriptorSet 0
                              Decorate 30 Binding 2
                              Decorate 31 RelaxedPrecision
                              Decorate 34 RelaxedPrecision
                              Decorate 34 DescriptorSet 0
                              Decorate 34 Binding 0
                              Decorate 35 RelaxedPrecision
                              Decorate 40(vs_TEXCOORD1) Location 0
                              Decorate 43 RelaxedPrecision
                              Decorate 44 RelaxedPrecision
                              Decorate 45 RelaxedPrecision
                              Decorate 46(vs_TEXCOORD3) RelaxedPrecision
                              Decorate 46(vs_TEXCOORD3) Location 1
                              Decorate 48 RelaxedPrecision
                              Decorate 49 RelaxedPrecision
                              Decorate 50 RelaxedPrecision
                              Decorate 51 RelaxedPrecision
                              Decorate 53 RelaxedPrecision
                              Decorate 56 RelaxedPrecision
                              Decorate 68 RelaxedPrecision
                              Decorate 68 DescriptorSet 0
                              Decorate 68 Binding 3
                              Decorate 69 RelaxedPrecision
                              Decorate 70 RelaxedPrecision
                              Decorate 70 DescriptorSet 0
                              Decorate 70 Binding 1
                              Decorate 71 RelaxedPrecision
                              Decorate 76 RelaxedPrecision
                              Decorate 77 RelaxedPrecision
                              Decorate 78 RelaxedPrecision
                              Decorate 80 RelaxedPrecision
                              Decorate 84 RelaxedPrecision
                              Decorate 99 RelaxedPrecision
                              Decorate 99 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Function 7(fvec4)
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              12:             TypeVector 6(float) 3
              15:    6(float) Constant 1065353216
              16:             TypeInt 32 0
              17:     16(int) Constant 3
              18:             TypePointer Input 6(float)
              26:             TypePointer Private 6(float)
              27:     26(ptr) Variable Private
              28:             TypeImage 6(float) 2D sampled format:Unknown
              29:             TypePointer UniformConstant 28
              30:     29(ptr) Variable UniformConstant
              32:             TypeSampler
              33:             TypePointer UniformConstant 32
              34:     33(ptr) Variable UniformConstant
              36:             TypeSampledImage 28
              38:             TypeVector 6(float) 2
              39:             TypePointer Input 38(fvec2)
40(vs_TEXCOORD1):     39(ptr) Variable Input
              44:     26(ptr) Variable Private
46(vs_TEXCOORD3):     10(ptr) Variable Input
              50:     26(ptr) Variable Private
              52:    6(float) Constant 1064304640
              54:             TypePointer Private 12(fvec3)
              55:     54(ptr) Variable Private
              57:     16(int) Constant 2
              61:    6(float) Constant 1048576000
              62:   38(fvec2) ConstantComposite 61 61
              66:             TypeImage 6(float) 3D sampled format:Unknown
              67:             TypePointer UniformConstant 66
              68:     67(ptr) Variable UniformConstant
              70:     33(ptr) Variable UniformConstant
              72:             TypeSampledImage 66
              77:     26(ptr) Variable Private
              79:    6(float) Constant 3156465418
              81:             TypeBool
              82:             TypePointer Private 81(bool)
              83:     82(ptr) Variable Private
              85:    6(float) Constant 0
              88:             TypeInt 32 1
              89:     88(int) Constant 0
              90:     88(int) Constant 1
              92:     88(int) Constant 4294967295
              98:             TypePointer Output 7(fvec4)
              99:     98(ptr) Variable Output
             100:    7(fvec4) ConstantComposite 85 85 85 85
               4:           2 Function None 3
               5:             Label
               9:      8(ptr) Variable Function
              13:    7(fvec4) Load 11
              14:   12(fvec3) VectorShuffle 13 13 0 1 2
              19:     18(ptr) AccessChain 11 17
              20:    6(float) Load 19
              21:    6(float) FDiv 15 20
              22:    6(float) CompositeExtract 14 0
              23:    6(float) CompositeExtract 14 1
              24:    6(float) CompositeExtract 14 2
              25:    7(fvec4) CompositeConstruct 22 23 24 21
                              Store 9 25
              31:          28 Load 30
              35:          32 Load 34
              37:          36 SampledImage 31 35
              41:   38(fvec2) Load 40(vs_TEXCOORD1)
              42:    7(fvec4) ImageSampleImplicitLod 37 41
              43:    6(float) CompositeExtract 42 3
                              Store 27 43
              45:    6(float) Load 27
              47:     18(ptr) AccessChain 46(vs_TEXCOORD3) 17
              48:    6(float) Load 47
              49:    6(float) FMul 45 48
                              Store 44 49
              51:    6(float) Load 44
              53:    6(float) FMul 51 52
                              Store 50 53
              56:    6(float) Load 50
              58:     26(ptr) AccessChain 55 57
                              Store 58 56
              59:    7(fvec4) Load 9
              60:   38(fvec2) VectorShuffle 59 59 0 1
              63:   38(fvec2) FMul 60 62
              64:   12(fvec3) Load 55
              65:   12(fvec3) VectorShuffle 64 63 3 4 2
                              Store 55 65
              69:          66 Load 68
              71:          32 Load 70
              73:          72 SampledImage 69 71
              74:   12(fvec3) Load 55
              75:    7(fvec4) ImageSampleImplicitLod 73 74
              76:    6(float) CompositeExtract 75 3
                              Store 27 76
              78:    6(float) Load 27
              80:    6(float) FAdd 78 79
                              Store 77 80
              84:    6(float) Load 77
              86:    81(bool) FOrdLessThan 84 85
                              Store 83 86
              87:    81(bool) Load 83
              91:     88(int) Select 87 90 89
              93:     88(int) IMul 91 92
              94:    81(bool) INotEqual 93 89
                              SelectionMerge 96 None
                              BranchConditional 94 95 96
              95:               Label
                                Kill
              96:             Label
                              Store 99 100
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

 }


 // Stats for Vertex shader:
 //        d3d11: 22 avg math (9..33)
 // Stats for Fragment shader:
 //        d3d11: 6 avg math (2..20), 1 avg texture (1..3), 0 avg branch (0..2)
 Pass {
  Tags { "LIGHTMODE"="FORWARDBASE" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" "PreviewType"="Plane" "PerformanceChecks"="False" }
  ZWrite [_ZWrite]
  Cull [_Cull]
  Blend [_SrcBlend] [_DstBlend]
 BlendOp [_BlendOp]
  ColorMask RGB
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 9 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "$Globals" (176 bytes) on slot 0 {
  Vector4 _MainTex_ST at 64
}
Constant Buffer "UnityPerDraw" (176 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float       
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xy          2     NONE   float   xy  
//
      vs_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_constantbuffer CB1[4], immediateIndexed
      dcl_constantbuffer CB2[21], immediateIndexed
      dcl_input v0.xyz
      dcl_input v2.xyzw
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyzw
      dcl_output o2.xy
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb1[1].xyzw
   1: mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
   3: add r0.xyzw, r0.xyzw, cb1[3].xyzw
   4: mul r1.xyzw, r0.yyyy, cb2[18].xyzw
   5: mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
   6: mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
   7: mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
   8: mov o1.xyzw, v2.xyzw
   9: mad o2.xy, v3.xyxx, cb0[4].xyxx, cb0[4].zwzz
  10: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 2 math, 1 temp registers, 1 textures
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (176 bytes) on slot 0 {
  Vector4 _Color at 80
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyz 
// TEXCOORD                 1   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[6], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v1.xyz
      dcl_input_ps linear v2.xy
      dcl_output o0.xyzw
      dcl_temps 1
   0: sample r0.xyzw, v2.xyxx, t0.xyzw, s0
   1: mul r0.xyz, r0.xyzx, cb0[5].xyzx
   2: mul o0.xyz, r0.xyzx, v1.xyzx
   3: mov o0.w, l(1.000000)
   4: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles":
Shader Disassembly:
#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying highp vec4 vs_COLOR0;
varying highp vec2 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
varying highp vec4 vs_COLOR0;
varying highp vec2 vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
void main()
{
    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (16 bytes) {
  Vector4 _Color at 0
}
Constant Buffer "$Globals" (144 bytes) {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 64
  Vector4 _MainTex_ST at 128
}

Shader Disassembly:
#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _Color;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
mediump vec3 u_xlat16_1;
void main()
{
    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (144 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 64
  Vector4 _MainTex_ST at 128
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 COLOR0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "FGlobals" (16 bytes) on slot 0 {
  Vector4 _Color at 0
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Color;
};

struct Mtl_FragmentIn
{
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (16 bytes) {
  Vector4 _Color at 0
}
Constant Buffer "$Globals" (144 bytes) {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 64
  Vector4 _MainTex_ST at 128
}

Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
out vec4 vs_COLOR0;
out vec2 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Set 2D Texture "_MainTex" to set: 0, binding: 1, used in: Fragment  using sampler in set: 0, binding: 0, used in: Fragment 

Constant Buffer "PGlobals3920818074" (16 bytes) on set: 1, binding: 0, used in: Fragment  {
  Vector4 _Color at 0
}
Constant Buffer "VGlobals3920818074" (144 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 64
  Matrix4x4 unity_ObjectToWorld at 0
  Vector4 _MainTex_ST at 128
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 105

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 72 82 83 87 89
                              Name 87  "vs_TEXCOORD1"
                              Decorate 11 Location 0
                              Decorate 16 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              MemberDecorate 18 0 Offset 0
                              MemberDecorate 18 1 Offset 64
                              MemberDecorate 18 2 Offset 128
                              Decorate 18 Block
                              Decorate 20 DescriptorSet 1
                              Decorate 20 Binding 1
                              MemberDecorate 70 0 BuiltIn Position
                              MemberDecorate 70 1 BuiltIn PointSize
                              MemberDecorate 70 2 BuiltIn ClipDistance
                              Decorate 70 Block
                              Decorate 82 Location 0
                              Decorate 83 RelaxedPrecision
                              Decorate 83 Location 1
                              Decorate 84 RelaxedPrecision
                              Decorate 87(vs_TEXCOORD1) Location 1
                              Decorate 89 Location 2
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              14:             TypeInt 32 0
              15:     14(int) Constant 4
              16:             TypeArray 7(fvec4) 15
              17:             TypeArray 7(fvec4) 15
              18:             TypeStruct 16 17 7(fvec4)
              19:             TypePointer Uniform 18(struct)
              20:     19(ptr) Variable Uniform
              21:             TypeInt 32 1
              22:     21(int) Constant 0
              23:     21(int) Constant 1
              24:             TypePointer Uniform 7(fvec4)
              35:     21(int) Constant 2
              44:     21(int) Constant 3
              48:      8(ptr) Variable Private
              68:     14(int) Constant 1
              69:             TypeArray 6(float) 68
              70:             TypeStruct 7(fvec4) 6(float) 69
              71:             TypePointer Output 70(struct)
              72:     71(ptr) Variable Output
              80:             TypePointer Output 7(fvec4)
              82:     80(ptr) Variable Output
              83:     10(ptr) Variable Input
              85:             TypeVector 6(float) 2
              86:             TypePointer Output 85(fvec2)
87(vs_TEXCOORD1):     86(ptr) Variable Output
              88:             TypePointer Input 85(fvec2)
              89:     88(ptr) Variable Input
              99:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              12:    7(fvec4) Load 11
              13:    7(fvec4) VectorShuffle 12 12 1 1 1 1
              25:     24(ptr) AccessChain 20 22 23
              26:    7(fvec4) Load 25
              27:    7(fvec4) FMul 13 26
                              Store 9 27
              28:     24(ptr) AccessChain 20 22 22
              29:    7(fvec4) Load 28
              30:    7(fvec4) Load 11
              31:    7(fvec4) VectorShuffle 30 30 0 0 0 0
              32:    7(fvec4) FMul 29 31
              33:    7(fvec4) Load 9
              34:    7(fvec4) FAdd 32 33
                              Store 9 34
              36:     24(ptr) AccessChain 20 22 35
              37:    7(fvec4) Load 36
              38:    7(fvec4) Load 11
              39:    7(fvec4) VectorShuffle 38 38 2 2 2 2
              40:    7(fvec4) FMul 37 39
              41:    7(fvec4) Load 9
              42:    7(fvec4) FAdd 40 41
                              Store 9 42
              43:    7(fvec4) Load 9
              45:     24(ptr) AccessChain 20 22 44
              46:    7(fvec4) Load 45
              47:    7(fvec4) FAdd 43 46
                              Store 9 47
              49:    7(fvec4) Load 9
              50:    7(fvec4) VectorShuffle 49 49 1 1 1 1
              51:     24(ptr) AccessChain 20 23 23
              52:    7(fvec4) Load 51
              53:    7(fvec4) FMul 50 52
                              Store 48 53
              54:     24(ptr) AccessChain 20 23 22
              55:    7(fvec4) Load 54
              56:    7(fvec4) Load 9
              57:    7(fvec4) VectorShuffle 56 56 0 0 0 0
              58:    7(fvec4) FMul 55 57
              59:    7(fvec4) Load 48
              60:    7(fvec4) FAdd 58 59
                              Store 48 60
              61:     24(ptr) AccessChain 20 23 35
              62:    7(fvec4) Load 61
              63:    7(fvec4) Load 9
              64:    7(fvec4) VectorShuffle 63 63 2 2 2 2
              65:    7(fvec4) FMul 62 64
              66:    7(fvec4) Load 48
              67:    7(fvec4) FAdd 65 66
                              Store 48 67
              73:     24(ptr) AccessChain 20 23 44
              74:    7(fvec4) Load 73
              75:    7(fvec4) Load 9
              76:    7(fvec4) VectorShuffle 75 75 3 3 3 3
              77:    7(fvec4) FMul 74 76
              78:    7(fvec4) Load 48
              79:    7(fvec4) FAdd 77 78
              81:     80(ptr) AccessChain 72 22
                              Store 81 79
              84:    7(fvec4) Load 83
                              Store 82 84
              90:   85(fvec2) Load 89
              91:     24(ptr) AccessChain 20 35
              92:    7(fvec4) Load 91
              93:   85(fvec2) VectorShuffle 92 92 0 1
              94:   85(fvec2) FMul 90 93
              95:     24(ptr) AccessChain 20 35
              96:    7(fvec4) Load 95
              97:   85(fvec2) VectorShuffle 96 96 2 3
              98:   85(fvec2) FAdd 94 97
                              Store 87(vs_TEXCOORD1) 98
             100:     99(ptr) AccessChain 72 22 68
             101:    6(float) Load 100
             102:    6(float) FNegate 101
             103:     99(ptr) AccessChain 72 22 68
                              Store 103 102
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 57

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 22 42 47
                              ExecutionMode 4 OriginUpperLeft
                              Name 22  "vs_TEXCOORD1"
                              Decorate 9 RelaxedPrecision
                              Decorate 12 RelaxedPrecision
                              Decorate 12 DescriptorSet 0
                              Decorate 12 Binding 1
                              Decorate 13 RelaxedPrecision
                              Decorate 16 RelaxedPrecision
                              Decorate 16 DescriptorSet 0
                              Decorate 16 Binding 0
                              Decorate 17 RelaxedPrecision
                              Decorate 22(vs_TEXCOORD1) Location 1
                              Decorate 26 RelaxedPrecision
                              Decorate 27 RelaxedPrecision
                              Decorate 28 RelaxedPrecision
                              MemberDecorate 29 0 RelaxedPrecision
                              MemberDecorate 29 0 Offset 0
                              Decorate 29 Block
                              Decorate 31 DescriptorSet 1
                              Decorate 31 Binding 0
                              Decorate 36 RelaxedPrecision
                              Decorate 37 RelaxedPrecision
                              Decorate 38 RelaxedPrecision
                              Decorate 40 RelaxedPrecision
                              Decorate 42 Location 0
                              Decorate 47 RelaxedPrecision
                              Decorate 47 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 3
               8:             TypePointer Private 7(fvec3)
               9:      8(ptr) Variable Private
              10:             TypeImage 6(float) 2D sampled format:Unknown
              11:             TypePointer UniformConstant 10
              12:     11(ptr) Variable UniformConstant
              14:             TypeSampler
              15:             TypePointer UniformConstant 14
              16:     15(ptr) Variable UniformConstant
              18:             TypeSampledImage 10
              20:             TypeVector 6(float) 2
              21:             TypePointer Input 20(fvec2)
22(vs_TEXCOORD1):     21(ptr) Variable Input
              24:             TypeVector 6(float) 4
              27:      8(ptr) Variable Private
              29:             TypeStruct 24(fvec4)
              30:             TypePointer Uniform 29(struct)
              31:     30(ptr) Variable Uniform
              32:             TypeInt 32 1
              33:     32(int) Constant 0
              34:             TypePointer Uniform 24(fvec4)
              39:      8(ptr) Variable Private
              41:             TypePointer Input 24(fvec4)
              42:     41(ptr) Variable Input
              46:             TypePointer Output 24(fvec4)
              47:     46(ptr) Variable Output
              51:    6(float) Constant 1065353216
              52:             TypeInt 32 0
              53:     52(int) Constant 3
              54:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              13:          10 Load 12
              17:          14 Load 16
              19:          18 SampledImage 13 17
              23:   20(fvec2) Load 22(vs_TEXCOORD1)
              25:   24(fvec4) ImageSampleImplicitLod 19 23
              26:    7(fvec3) VectorShuffle 25 25 0 1 2
                              Store 9 26
              28:    7(fvec3) Load 9
              35:     34(ptr) AccessChain 31 33
              36:   24(fvec4) Load 35
              37:    7(fvec3) VectorShuffle 36 36 0 1 2
              38:    7(fvec3) FMul 28 37
                              Store 27 38
              40:    7(fvec3) Load 27
              43:   24(fvec4) Load 42
              44:    7(fvec3) VectorShuffle 43 43 0 1 2
              45:    7(fvec3) FMul 40 44
                              Store 39 45
              48:    7(fvec3) Load 39
              49:   24(fvec4) Load 47
              50:   24(fvec4) VectorShuffle 49 48 4 5 6 3
                              Store 47 50
              55:     54(ptr) AccessChain 47 53
                              Store 55 51
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 9 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "$Globals" (176 bytes) on slot 0 {
  Vector4 _MainTex_ST at 64
}
Constant Buffer "UnityPerDraw" (176 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float       
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xy          2     NONE   float   xy  
//
      vs_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_constantbuffer CB1[4], immediateIndexed
      dcl_constantbuffer CB2[21], immediateIndexed
      dcl_input v0.xyz
      dcl_input v2.xyzw
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyzw
      dcl_output o2.xy
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb1[1].xyzw
   1: mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
   3: add r0.xyzw, r0.xyzw, cb1[3].xyzw
   4: mul r1.xyzw, r0.yyyy, cb2[18].xyzw
   5: mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
   6: mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
   7: mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
   8: mov o1.xyzw, v2.xyzw
   9: mad o2.xy, v3.xyxx, cb0[4].xyxx, cb0[4].zwzz
  10: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 2 math, 1 temp registers, 1 textures
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (176 bytes) on slot 0 {
  Vector4 _Color at 80
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[6], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v1.xyzw
      dcl_input_ps linear v2.xy
      dcl_output o0.xyzw
      dcl_temps 1
   0: sample r0.xyzw, v2.xyxx, t0.xyzw, s0
   1: mul r0.xyzw, r0.xyzw, cb0[5].xyzw
   2: mul o0.xyzw, r0.xyzw, v1.xyzw
   3: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles":
Shader Disassembly:
#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying highp vec4 vs_COLOR0;
varying highp vec2 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
varying highp vec4 vs_COLOR0;
varying highp vec2 vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    SV_Target0 = u_xlat0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (16 bytes) {
  Vector4 _Color at 0
}
Constant Buffer "$Globals" (144 bytes) {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 64
  Vector4 _MainTex_ST at 128
}

Shader Disassembly:
#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _Color;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat16_0 = u_xlat16_0 * _Color;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    SV_Target0 = u_xlat0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (144 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 64
  Vector4 _MainTex_ST at 128
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 COLOR0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "FGlobals" (16 bytes) on slot 0 {
  Vector4 _Color at 0
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Color;
};

struct Mtl_FragmentIn
{
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    u_xlat0 = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy);
    u_xlat0 = u_xlat0 * FGlobals._Color;
    output.SV_Target0 = u_xlat0 * input.COLOR0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (16 bytes) {
  Vector4 _Color at 0
}
Constant Buffer "$Globals" (144 bytes) {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 64
  Vector4 _MainTex_ST at 128
}

Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
out vec4 vs_COLOR0;
out vec2 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat0 = u_xlat10_0 * _Color;
    SV_Target0 = u_xlat0 * vs_COLOR0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Set 2D Texture "_MainTex" to set: 0, binding: 1, used in: Fragment  using sampler in set: 0, binding: 0, used in: Fragment 

Constant Buffer "PGlobals2143513018" (16 bytes) on set: 1, binding: 0, used in: Fragment  {
  Vector4 _Color at 0
}
Constant Buffer "VGlobals2143513018" (144 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 64
  Matrix4x4 unity_ObjectToWorld at 0
  Vector4 _MainTex_ST at 128
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 105

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 72 82 83 87 89
                              Name 87  "vs_TEXCOORD1"
                              Decorate 11 Location 0
                              Decorate 16 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              MemberDecorate 18 0 Offset 0
                              MemberDecorate 18 1 Offset 64
                              MemberDecorate 18 2 Offset 128
                              Decorate 18 Block
                              Decorate 20 DescriptorSet 1
                              Decorate 20 Binding 1
                              MemberDecorate 70 0 BuiltIn Position
                              MemberDecorate 70 1 BuiltIn PointSize
                              MemberDecorate 70 2 BuiltIn ClipDistance
                              Decorate 70 Block
                              Decorate 82 Location 0
                              Decorate 83 RelaxedPrecision
                              Decorate 83 Location 1
                              Decorate 84 RelaxedPrecision
                              Decorate 87(vs_TEXCOORD1) Location 1
                              Decorate 89 Location 2
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              14:             TypeInt 32 0
              15:     14(int) Constant 4
              16:             TypeArray 7(fvec4) 15
              17:             TypeArray 7(fvec4) 15
              18:             TypeStruct 16 17 7(fvec4)
              19:             TypePointer Uniform 18(struct)
              20:     19(ptr) Variable Uniform
              21:             TypeInt 32 1
              22:     21(int) Constant 0
              23:     21(int) Constant 1
              24:             TypePointer Uniform 7(fvec4)
              35:     21(int) Constant 2
              44:     21(int) Constant 3
              48:      8(ptr) Variable Private
              68:     14(int) Constant 1
              69:             TypeArray 6(float) 68
              70:             TypeStruct 7(fvec4) 6(float) 69
              71:             TypePointer Output 70(struct)
              72:     71(ptr) Variable Output
              80:             TypePointer Output 7(fvec4)
              82:     80(ptr) Variable Output
              83:     10(ptr) Variable Input
              85:             TypeVector 6(float) 2
              86:             TypePointer Output 85(fvec2)
87(vs_TEXCOORD1):     86(ptr) Variable Output
              88:             TypePointer Input 85(fvec2)
              89:     88(ptr) Variable Input
              99:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              12:    7(fvec4) Load 11
              13:    7(fvec4) VectorShuffle 12 12 1 1 1 1
              25:     24(ptr) AccessChain 20 22 23
              26:    7(fvec4) Load 25
              27:    7(fvec4) FMul 13 26
                              Store 9 27
              28:     24(ptr) AccessChain 20 22 22
              29:    7(fvec4) Load 28
              30:    7(fvec4) Load 11
              31:    7(fvec4) VectorShuffle 30 30 0 0 0 0
              32:    7(fvec4) FMul 29 31
              33:    7(fvec4) Load 9
              34:    7(fvec4) FAdd 32 33
                              Store 9 34
              36:     24(ptr) AccessChain 20 22 35
              37:    7(fvec4) Load 36
              38:    7(fvec4) Load 11
              39:    7(fvec4) VectorShuffle 38 38 2 2 2 2
              40:    7(fvec4) FMul 37 39
              41:    7(fvec4) Load 9
              42:    7(fvec4) FAdd 40 41
                              Store 9 42
              43:    7(fvec4) Load 9
              45:     24(ptr) AccessChain 20 22 44
              46:    7(fvec4) Load 45
              47:    7(fvec4) FAdd 43 46
                              Store 9 47
              49:    7(fvec4) Load 9
              50:    7(fvec4) VectorShuffle 49 49 1 1 1 1
              51:     24(ptr) AccessChain 20 23 23
              52:    7(fvec4) Load 51
              53:    7(fvec4) FMul 50 52
                              Store 48 53
              54:     24(ptr) AccessChain 20 23 22
              55:    7(fvec4) Load 54
              56:    7(fvec4) Load 9
              57:    7(fvec4) VectorShuffle 56 56 0 0 0 0
              58:    7(fvec4) FMul 55 57
              59:    7(fvec4) Load 48
              60:    7(fvec4) FAdd 58 59
                              Store 48 60
              61:     24(ptr) AccessChain 20 23 35
              62:    7(fvec4) Load 61
              63:    7(fvec4) Load 9
              64:    7(fvec4) VectorShuffle 63 63 2 2 2 2
              65:    7(fvec4) FMul 62 64
              66:    7(fvec4) Load 48
              67:    7(fvec4) FAdd 65 66
                              Store 48 67
              73:     24(ptr) AccessChain 20 23 44
              74:    7(fvec4) Load 73
              75:    7(fvec4) Load 9
              76:    7(fvec4) VectorShuffle 75 75 3 3 3 3
              77:    7(fvec4) FMul 74 76
              78:    7(fvec4) Load 48
              79:    7(fvec4) FAdd 77 78
              81:     80(ptr) AccessChain 72 22
                              Store 81 79
              84:    7(fvec4) Load 83
                              Store 82 84
              90:   85(fvec2) Load 89
              91:     24(ptr) AccessChain 20 35
              92:    7(fvec4) Load 91
              93:   85(fvec2) VectorShuffle 92 92 0 1
              94:   85(fvec2) FMul 90 93
              95:     24(ptr) AccessChain 20 35
              96:    7(fvec4) Load 95
              97:   85(fvec2) VectorShuffle 96 96 2 3
              98:   85(fvec2) FAdd 94 97
                              Store 87(vs_TEXCOORD1) 98
             100:     99(ptr) AccessChain 72 22 68
             101:    6(float) Load 100
             102:    6(float) FNegate 101
             103:     99(ptr) AccessChain 72 22 68
                              Store 103 102
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 46

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 22 39 43
                              ExecutionMode 4 OriginUpperLeft
                              Name 22  "vs_TEXCOORD1"
                              Decorate 9 RelaxedPrecision
                              Decorate 12 RelaxedPrecision
                              Decorate 12 DescriptorSet 0
                              Decorate 12 Binding 1
                              Decorate 13 RelaxedPrecision
                              Decorate 16 RelaxedPrecision
                              Decorate 16 DescriptorSet 0
                              Decorate 16 Binding 0
                              Decorate 17 RelaxedPrecision
                              Decorate 22(vs_TEXCOORD1) Location 1
                              Decorate 25 RelaxedPrecision
                              Decorate 26 RelaxedPrecision
                              MemberDecorate 27 0 RelaxedPrecision
                              MemberDecorate 27 0 Offset 0
                              Decorate 27 Block
                              Decorate 29 DescriptorSet 1
                              Decorate 29 Binding 0
                              Decorate 34 RelaxedPrecision
                              Decorate 35 RelaxedPrecision
                              Decorate 37 RelaxedPrecision
                              Decorate 39 Location 0
                              Decorate 43 RelaxedPrecision
                              Decorate 43 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypeImage 6(float) 2D sampled format:Unknown
              11:             TypePointer UniformConstant 10
              12:     11(ptr) Variable UniformConstant
              14:             TypeSampler
              15:             TypePointer UniformConstant 14
              16:     15(ptr) Variable UniformConstant
              18:             TypeSampledImage 10
              20:             TypeVector 6(float) 2
              21:             TypePointer Input 20(fvec2)
22(vs_TEXCOORD1):     21(ptr) Variable Input
              25:      8(ptr) Variable Private
              27:             TypeStruct 7(fvec4)
              28:             TypePointer Uniform 27(struct)
              29:     28(ptr) Variable Uniform
              30:             TypeInt 32 1
              31:     30(int) Constant 0
              32:             TypePointer Uniform 7(fvec4)
              36:      8(ptr) Variable Private
              38:             TypePointer Input 7(fvec4)
              39:     38(ptr) Variable Input
              42:             TypePointer Output 7(fvec4)
              43:     42(ptr) Variable Output
               4:           2 Function None 3
               5:             Label
              13:          10 Load 12
              17:          14 Load 16
              19:          18 SampledImage 13 17
              23:   20(fvec2) Load 22(vs_TEXCOORD1)
              24:    7(fvec4) ImageSampleImplicitLod 19 23
                              Store 9 24
              26:    7(fvec4) Load 9
              33:     32(ptr) AccessChain 29 31
              34:    7(fvec4) Load 33
              35:    7(fvec4) FMul 26 34
                              Store 25 35
              37:    7(fvec4) Load 25
              40:    7(fvec4) Load 39
              41:    7(fvec4) FMul 37 40
                              Store 36 41
              44:    7(fvec4) Load 36
                              Store 43 44
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 9 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "$Globals" (192 bytes) on slot 0 {
  Vector4 _MainTex_ST at 64
}
Constant Buffer "UnityPerDraw" (176 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float       
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xy          2     NONE   float   xy  
//
      vs_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_constantbuffer CB1[4], immediateIndexed
      dcl_constantbuffer CB2[21], immediateIndexed
      dcl_input v0.xyz
      dcl_input v2.xyzw
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyzw
      dcl_output o2.xy
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb1[1].xyzw
   1: mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
   3: add r0.xyzw, r0.xyzw, cb1[3].xyzw
   4: mul r1.xyzw, r0.yyyy, cb2[18].xyzw
   5: mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
   6: mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
   7: mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
   8: mov o1.xyzw, v2.xyzw
   9: mad o2.xy, v3.xyxx, cb0[4].xyxx, cb0[4].zwzz
  10: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 5 math, 2 temp registers, 1 textures
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (192 bytes) on slot 0 {
  Vector4 _Color at 80
  Vector4 _ColorAddSubDiff at 176
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[12], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v1.xyzw
      dcl_input_ps linear v2.xy
      dcl_output o0.xyzw
      dcl_temps 2
   0: sample r0.xyzw, v2.xyxx, t0.xyzw, s0
   1: mul r0.xyzw, r0.xyzw, cb0[5].xyzw
   2: mad r0.xyz, v1.xyzx, cb0[11].xxxx, r0.xyzx
   3: mul o0.w, r0.w, v1.w
   4: add r1.xyz, -r0.xyzx, |r0.xyzx|
   5: mad o0.xyz, cb0[11].yyyy, r1.xyzx, r0.xyzx
   6: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles":
Shader Disassembly:
#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying highp vec4 vs_COLOR0;
varying highp vec2 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _ColorAddSubDiff;
uniform lowp sampler2D _MainTex;
varying highp vec4 vs_COLOR0;
varying highp vec2 vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat10;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat1.xyz = vs_COLOR0.xyz * _ColorAddSubDiff.xxx + u_xlat16_0.xyz;
    u_xlat10 = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.w = u_xlat10;
    u_xlat16_2.xyz = (-u_xlat1.xyz) + abs(u_xlat1.xyz);
    SV_Target0.xyz = _ColorAddSubDiff.yyy * u_xlat16_2.xyz + u_xlat1.xyz;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (32 bytes) {
  Vector4 _Color at 0
  Vector4 _ColorAddSubDiff at 16
}
Constant Buffer "$Globals" (144 bytes) {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 64
  Vector4 _MainTex_ST at 128
}

Shader Disassembly:
#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _ColorAddSubDiff;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat10;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat16_0 = u_xlat16_0 * _Color;
    u_xlat1.xyz = vs_COLOR0.xyz * _ColorAddSubDiff.xxx + u_xlat16_0.xyz;
    u_xlat10 = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.w = u_xlat10;
    u_xlat16_2.xyz = (-u_xlat1.xyz) + abs(u_xlat1.xyz);
    SV_Target0.xyz = _ColorAddSubDiff.yyy * u_xlat16_2.xyz + u_xlat1.xyz;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (144 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 64
  Vector4 _MainTex_ST at 128
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 COLOR0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "FGlobals" (32 bytes) on slot 0 {
  Vector4 _Color at 0
  Vector4 _ColorAddSubDiff at 16
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Color;
    float4 _ColorAddSubDiff;
};

struct Mtl_FragmentIn
{
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float3 u_xlat1;
    u_xlat0 = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy);
    u_xlat0 = u_xlat0 * FGlobals._Color;
    u_xlat0.xyz = fma(input.COLOR0.xyz, FGlobals._ColorAddSubDiff.xxx, u_xlat0.xyz);
    output.SV_Target0.w = u_xlat0.w * input.COLOR0.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + abs(u_xlat0.xyz);
    output.SV_Target0.xyz = fma(FGlobals._ColorAddSubDiff.yyy, u_xlat1.xyz, u_xlat0.xyz);
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (32 bytes) {
  Vector4 _Color at 0
  Vector4 _ColorAddSubDiff at 16
}
Constant Buffer "$Globals" (144 bytes) {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 64
  Vector4 _MainTex_ST at 128
}

Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
out vec4 vs_COLOR0;
out vec2 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Color;
uniform 	vec4 _ColorAddSubDiff;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat0 = u_xlat10_0 * _Color;
    u_xlat0.xyz = vs_COLOR0.xyz * _ColorAddSubDiff.xxx + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w * vs_COLOR0.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + abs(u_xlat0.xyz);
    SV_Target0.xyz = _ColorAddSubDiff.yyy * u_xlat1.xyz + u_xlat0.xyz;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Set 2D Texture "_MainTex" to set: 0, binding: 1, used in: Fragment  using sampler in set: 0, binding: 0, used in: Fragment 

Constant Buffer "PGlobals2922823817" (32 bytes) on set: 1, binding: 0, used in: Fragment  {
  Vector4 _Color at 0
  Vector4 _ColorAddSubDiff at 16
}
Constant Buffer "VGlobals2922823817" (144 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 64
  Matrix4x4 unity_ObjectToWorld at 0
  Vector4 _MainTex_ST at 128
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 105

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 72 82 83 87 89
                              Name 87  "vs_TEXCOORD1"
                              Decorate 11 Location 0
                              Decorate 16 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              MemberDecorate 18 0 Offset 0
                              MemberDecorate 18 1 Offset 64
                              MemberDecorate 18 2 Offset 128
                              Decorate 18 Block
                              Decorate 20 DescriptorSet 1
                              Decorate 20 Binding 1
                              MemberDecorate 70 0 BuiltIn Position
                              MemberDecorate 70 1 BuiltIn PointSize
                              MemberDecorate 70 2 BuiltIn ClipDistance
                              Decorate 70 Block
                              Decorate 82 Location 0
                              Decorate 83 RelaxedPrecision
                              Decorate 83 Location 1
                              Decorate 84 RelaxedPrecision
                              Decorate 87(vs_TEXCOORD1) Location 1
                              Decorate 89 Location 2
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              14:             TypeInt 32 0
              15:     14(int) Constant 4
              16:             TypeArray 7(fvec4) 15
              17:             TypeArray 7(fvec4) 15
              18:             TypeStruct 16 17 7(fvec4)
              19:             TypePointer Uniform 18(struct)
              20:     19(ptr) Variable Uniform
              21:             TypeInt 32 1
              22:     21(int) Constant 0
              23:     21(int) Constant 1
              24:             TypePointer Uniform 7(fvec4)
              35:     21(int) Constant 2
              44:     21(int) Constant 3
              48:      8(ptr) Variable Private
              68:     14(int) Constant 1
              69:             TypeArray 6(float) 68
              70:             TypeStruct 7(fvec4) 6(float) 69
              71:             TypePointer Output 70(struct)
              72:     71(ptr) Variable Output
              80:             TypePointer Output 7(fvec4)
              82:     80(ptr) Variable Output
              83:     10(ptr) Variable Input
              85:             TypeVector 6(float) 2
              86:             TypePointer Output 85(fvec2)
87(vs_TEXCOORD1):     86(ptr) Variable Output
              88:             TypePointer Input 85(fvec2)
              89:     88(ptr) Variable Input
              99:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              12:    7(fvec4) Load 11
              13:    7(fvec4) VectorShuffle 12 12 1 1 1 1
              25:     24(ptr) AccessChain 20 22 23
              26:    7(fvec4) Load 25
              27:    7(fvec4) FMul 13 26
                              Store 9 27
              28:     24(ptr) AccessChain 20 22 22
              29:    7(fvec4) Load 28
              30:    7(fvec4) Load 11
              31:    7(fvec4) VectorShuffle 30 30 0 0 0 0
              32:    7(fvec4) FMul 29 31
              33:    7(fvec4) Load 9
              34:    7(fvec4) FAdd 32 33
                              Store 9 34
              36:     24(ptr) AccessChain 20 22 35
              37:    7(fvec4) Load 36
              38:    7(fvec4) Load 11
              39:    7(fvec4) VectorShuffle 38 38 2 2 2 2
              40:    7(fvec4) FMul 37 39
              41:    7(fvec4) Load 9
              42:    7(fvec4) FAdd 40 41
                              Store 9 42
              43:    7(fvec4) Load 9
              45:     24(ptr) AccessChain 20 22 44
              46:    7(fvec4) Load 45
              47:    7(fvec4) FAdd 43 46
                              Store 9 47
              49:    7(fvec4) Load 9
              50:    7(fvec4) VectorShuffle 49 49 1 1 1 1
              51:     24(ptr) AccessChain 20 23 23
              52:    7(fvec4) Load 51
              53:    7(fvec4) FMul 50 52
                              Store 48 53
              54:     24(ptr) AccessChain 20 23 22
              55:    7(fvec4) Load 54
              56:    7(fvec4) Load 9
              57:    7(fvec4) VectorShuffle 56 56 0 0 0 0
              58:    7(fvec4) FMul 55 57
              59:    7(fvec4) Load 48
              60:    7(fvec4) FAdd 58 59
                              Store 48 60
              61:     24(ptr) AccessChain 20 23 35
              62:    7(fvec4) Load 61
              63:    7(fvec4) Load 9
              64:    7(fvec4) VectorShuffle 63 63 2 2 2 2
              65:    7(fvec4) FMul 62 64
              66:    7(fvec4) Load 48
              67:    7(fvec4) FAdd 65 66
                              Store 48 67
              73:     24(ptr) AccessChain 20 23 44
              74:    7(fvec4) Load 73
              75:    7(fvec4) Load 9
              76:    7(fvec4) VectorShuffle 75 75 3 3 3 3
              77:    7(fvec4) FMul 74 76
              78:    7(fvec4) Load 48
              79:    7(fvec4) FAdd 77 78
              81:     80(ptr) AccessChain 72 22
                              Store 81 79
              84:    7(fvec4) Load 83
                              Store 82 84
              90:   85(fvec2) Load 89
              91:     24(ptr) AccessChain 20 35
              92:    7(fvec4) Load 91
              93:   85(fvec2) VectorShuffle 92 92 0 1
              94:   85(fvec2) FMul 90 93
              95:     24(ptr) AccessChain 20 35
              96:    7(fvec4) Load 95
              97:   85(fvec2) VectorShuffle 96 96 2 3
              98:   85(fvec2) FAdd 94 97
                              Store 87(vs_TEXCOORD1) 98
             100:     99(ptr) AccessChain 72 22 68
             101:    6(float) Load 100
             102:    6(float) FNegate 101
             103:     99(ptr) AccessChain 72 22 68
                              Store 103 102
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 82

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 22 40 62
                              ExecutionMode 4 OriginUpperLeft
                              Name 22  "vs_TEXCOORD1"
                              Decorate 9 RelaxedPrecision
                              Decorate 12 RelaxedPrecision
                              Decorate 12 DescriptorSet 0
                              Decorate 12 Binding 1
                              Decorate 13 RelaxedPrecision
                              Decorate 16 RelaxedPrecision
                              Decorate 16 DescriptorSet 0
                              Decorate 16 Binding 0
                              Decorate 17 RelaxedPrecision
                              Decorate 22(vs_TEXCOORD1) Location 1
                              Decorate 25 RelaxedPrecision
                              Decorate 26 RelaxedPrecision
                              MemberDecorate 27 0 RelaxedPrecision
                              MemberDecorate 27 0 Offset 0
                              MemberDecorate 27 1 RelaxedPrecision
                              MemberDecorate 27 1 Offset 16
                              Decorate 27 Block
                              Decorate 29 DescriptorSet 1
                              Decorate 29 Binding 0
                              Decorate 34 RelaxedPrecision
                              Decorate 35 RelaxedPrecision
                              Decorate 40 Location 0
                              Decorate 45 RelaxedPrecision
                              Decorate 46 RelaxedPrecision
                              Decorate 48 RelaxedPrecision
                              Decorate 49 RelaxedPrecision
                              Decorate 56 RelaxedPrecision
                              Decorate 62 RelaxedPrecision
                              Decorate 62 Location 0
                              Decorate 66 RelaxedPrecision
                              Decorate 73 RelaxedPrecision
                              Decorate 74 RelaxedPrecision
                              Decorate 75 RelaxedPrecision
                              Decorate 76 RelaxedPrecision
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypeImage 6(float) 2D sampled format:Unknown
              11:             TypePointer UniformConstant 10
              12:     11(ptr) Variable UniformConstant
              14:             TypeSampler
              15:             TypePointer UniformConstant 14
              16:     15(ptr) Variable UniformConstant
              18:             TypeSampledImage 10
              20:             TypeVector 6(float) 2
              21:             TypePointer Input 20(fvec2)
22(vs_TEXCOORD1):     21(ptr) Variable Input
              25:      8(ptr) Variable Private
              27:             TypeStruct 7(fvec4) 7(fvec4)
              28:             TypePointer Uniform 27(struct)
              29:     28(ptr) Variable Uniform
              30:             TypeInt 32 1
              31:     30(int) Constant 0
              32:             TypePointer Uniform 7(fvec4)
              36:             TypeVector 6(float) 3
              37:             TypePointer Private 36(fvec3)
              38:     37(ptr) Variable Private
              39:             TypePointer Input 7(fvec4)
              40:     39(ptr) Variable Input
              43:     30(int) Constant 1
              51:             TypePointer Private 6(float)
              52:     51(ptr) Variable Private
              53:             TypeInt 32 0
              54:     53(int) Constant 3
              57:             TypePointer Input 6(float)
              61:             TypePointer Output 7(fvec4)
              62:     61(ptr) Variable Output
              64:             TypePointer Output 6(float)
              66:     37(ptr) Variable Private
               4:           2 Function None 3
               5:             Label
              13:          10 Load 12
              17:          14 Load 16
              19:          18 SampledImage 13 17
              23:   20(fvec2) Load 22(vs_TEXCOORD1)
              24:    7(fvec4) ImageSampleImplicitLod 19 23
                              Store 9 24
              26:    7(fvec4) Load 9
              33:     32(ptr) AccessChain 29 31
              34:    7(fvec4) Load 33
              35:    7(fvec4) FMul 26 34
                              Store 25 35
              41:    7(fvec4) Load 40
              42:   36(fvec3) VectorShuffle 41 41 0 1 2
              44:     32(ptr) AccessChain 29 43
              45:    7(fvec4) Load 44
              46:   36(fvec3) VectorShuffle 45 45 0 0 0
              47:   36(fvec3) FMul 42 46
              48:    7(fvec4) Load 25
              49:   36(fvec3) VectorShuffle 48 48 0 1 2
              50:   36(fvec3) FAdd 47 49
                              Store 38 50
              55:     51(ptr) AccessChain 25 54
              56:    6(float) Load 55
              58:     57(ptr) AccessChain 40 54
              59:    6(float) Load 58
              60:    6(float) FMul 56 59
                              Store 52 60
              63:    6(float) Load 52
              65:     64(ptr) AccessChain 62 54
                              Store 65 63
              67:   36(fvec3) Load 38
              68:   36(fvec3) FNegate 67
              69:   36(fvec3) Load 38
              70:   36(fvec3) ExtInst 1(GLSL.std.450) 4(FAbs) 69
              71:   36(fvec3) FAdd 68 70
                              Store 66 71
              72:     32(ptr) AccessChain 29 43
              73:    7(fvec4) Load 72
              74:   36(fvec3) VectorShuffle 73 73 1 1 1
              75:   36(fvec3) Load 66
              76:   36(fvec3) FMul 74 75
              77:   36(fvec3) Load 38
              78:   36(fvec3) FAdd 76 77
              79:    7(fvec4) Load 62
              80:    7(fvec4) VectorShuffle 79 78 4 5 6 3
                              Store 62 80
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: _EMISSION 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON _FADING_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 18 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "$Globals" (192 bytes) on slot 0 {
  Vector4 _MainTex_ST at 64
}
Constant Buffer "UnityPerCamera" (144 bytes) on slot 1 {
  Vector4 _ProjectionParams at 80
}
Constant Buffer "UnityPerDraw" (176 bytes) on slot 2 {
  Matrix4x4 unity_ObjectToWorld at 0
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 3 {
  Matrix4x4 unity_MatrixV at 144
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float       
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xy          2     NONE   float   xy  
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
//
      vs_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_constantbuffer CB1[6], immediateIndexed
      dcl_constantbuffer CB2[4], immediateIndexed
      dcl_constantbuffer CB3[21], immediateIndexed
      dcl_input v0.xyz
      dcl_input v2.xyzw
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyzw
      dcl_output o2.xy
      dcl_output o3.xyzw
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb2[1].xyzw
   1: mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb2[2].xyzw, v0.zzzz, r0.xyzw
   3: add r0.xyzw, r0.xyzw, cb2[3].xyzw
   4: mul r1.xyzw, r0.yyyy, cb3[18].xyzw
   5: mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
   6: mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
   7: mad r1.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
   8: mov o0.xyzw, r1.xyzw
   9: mov o1.xyzw, v2.xyzw
  10: mad o2.xy, v3.xyxx, cb0[4].xyxx, cb0[4].zwzz
  11: mul r0.y, r0.y, cb3[10].z
  12: mad r0.x, cb3[9].z, r0.x, r0.y
  13: mad r0.x, cb3[11].z, r0.z, r0.x
  14: mad r0.x, cb3[12].z, r0.w, r0.x
  15: mov o3.z, -r0.x
  16: mul r0.x, r1.y, cb1[5].x
  17: mul r0.w, r0.x, l(0.500000)
  18: mul r0.xz, r1.xxwx, l(0.500000, 0.000000, 0.500000, 0.000000)
  19: mov o3.w, r1.w
  20: add o3.xy, r0.zzzz, r0.xwxx
  21: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 10 math, 2 temp registers, 2 textures
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_EmissionMap" to slot 1

Constant Buffer "$Globals" (192 bytes) on slot 0 {
  Vector4 _Color at 80
  Vector3 _EmissionColor at 100
  Vector4 _CameraFadeParams at 144
  Vector4 _ColorAddSubDiff at 176
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xy          2     NONE   float   xy  
// TEXCOORD                 3   xyzw        3     NONE   float     z 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[12], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_input_ps linear v1.xyzw
      dcl_input_ps linear v2.xy
      dcl_input_ps linear v3.z
      dcl_output o0.xyzw
      dcl_temps 2
   0: sample r0.xyzw, v2.xyxx, t0.xyzw, s0
   1: mul r0.xyzw, r0.xyzw, cb0[5].xyzw
   2: mad r0.xyz, v1.xyzx, cb0[11].xxxx, r0.xyzx
   3: mul r0.w, r0.w, v1.w
   4: add r1.xyz, -r0.xyzx, |r0.xyzx|
   5: mad r0.xyz, cb0[11].yyyy, r1.xyzx, r0.xyzx
   6: sample r1.xyzw, v2.xyxx, t1.xyzw, s1
   7: mul r1.xyz, r1.xyzx, cb0[6].yzwy
   8: add r1.w, v3.z, -cb0[9].x
   9: mul_sat r1.w, r1.w, cb0[9].y
  10: mad o0.xyz, r1.xyzx, r1.wwww, r0.xyzx
  11: mul o0.w, r0.w, r1.w
  12: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: _EMISSION 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON _FADING_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles":
Shader Disassembly:
#ifdef VERTEX
#version 100

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying highp vec4 vs_COLOR0;
varying highp vec2 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD3.w = u_xlat1.w;
    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 _Color;
uniform 	mediump vec3 _EmissionColor;
uniform 	vec4 _CameraFadeParams;
uniform 	mediump vec4 _ColorAddSubDiff;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _EmissionMap;
varying highp vec4 vs_COLOR0;
varying highp vec2 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat13;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat1.xyz = vs_COLOR0.xyz * _ColorAddSubDiff.xxx + u_xlat16_0.xyz;
    u_xlat13 = u_xlat16_0.w * vs_COLOR0.w;
    u_xlat16_2.xyz = (-u_xlat1.xyz) + abs(u_xlat1.xyz);
    u_xlat16_2.xyz = _ColorAddSubDiff.yyy * u_xlat16_2.xyz + u_xlat1.xyz;
    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD1.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(_EmissionColor.x, _EmissionColor.y, _EmissionColor.z);
    u_xlat1.x = vs_TEXCOORD3.z + (-_CameraFadeParams.x);
    u_xlat1.x = u_xlat1.x * _CameraFadeParams.y;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat1.xxx + u_xlat16_2.xyz;
    u_xlat0.w = u_xlat1.x * u_xlat13;
    SV_Target0 = u_xlat0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: _EMISSION 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON _FADING_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_EmissionMap" to slot 1

Constant Buffer "$Globals" (64 bytes) {
  Vector4 _Color at 0
  Vector3 _EmissionColor at 16
  Vector4 _CameraFadeParams at 32
  Vector4 _ColorAddSubDiff at 48
}
Constant Buffer "$Globals" (224 bytes) {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_MatrixVP at 144
  Vector4 _ProjectionParams at 0
  Vector4 _MainTex_ST at 208
}

Shader Disassembly:
#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD3.w = u_xlat1.w;
    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _Color;
uniform 	mediump vec3 _EmissionColor;
uniform 	vec4 _CameraFadeParams;
uniform 	mediump vec4 _ColorAddSubDiff;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;
in highp vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat13;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat16_0 = u_xlat16_0 * _Color;
    u_xlat1.xyz = vs_COLOR0.xyz * _ColorAddSubDiff.xxx + u_xlat16_0.xyz;
    u_xlat13 = u_xlat16_0.w * vs_COLOR0.w;
    u_xlat16_2.xyz = (-u_xlat1.xyz) + abs(u_xlat1.xyz);
    u_xlat16_2.xyz = _ColorAddSubDiff.yyy * u_xlat16_2.xyz + u_xlat1.xyz;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(_EmissionColor.x, _EmissionColor.y, _EmissionColor.z);
    u_xlat1.x = vs_TEXCOORD3.z + (-_CameraFadeParams.x);
    u_xlat1.x = u_xlat1.x * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat1.xxx + u_xlat16_2.xyz;
    u_xlat0.w = u_xlat1.x * u_xlat13;
    SV_Target0 = u_xlat0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: _EMISSION 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON _FADING_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (224 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_MatrixVP at 144
  Vector4 _ProjectionParams at 0
  Vector4 _MainTex_ST at 208
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 COLOR0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat2;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.mtl_Position = u_xlat1;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat2 = u_xlat0.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat0.x, u_xlat2);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat0.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat0.w, u_xlat0.x);
    output.TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0.x = u_xlat1.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * float2(0.5, 0.5);
    output.TEXCOORD3.w = u_xlat1.w;
    output.TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_EmissionMap" to slot 1

Constant Buffer "FGlobals" (64 bytes) on slot 0 {
  Vector4 _Color at 0
  Vector3 _EmissionColor at 16
  Vector4 _CameraFadeParams at 32
  Vector4 _ColorAddSubDiff at 48
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Color;
    float3 _EmissionColor;
    float4 _CameraFadeParams;
    float4 _ColorAddSubDiff;
};

struct Mtl_FragmentIn
{
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_EmissionMap [[ sampler (1) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float3 u_xlat1;
    float u_xlat6;
    float u_xlat7;
    u_xlat0 = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy);
    u_xlat0 = u_xlat0 * FGlobals._Color;
    u_xlat0.xyz = fma(input.COLOR0.xyz, FGlobals._ColorAddSubDiff.xxx, u_xlat0.xyz);
    u_xlat6 = u_xlat0.w * input.COLOR0.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + abs(u_xlat0.xyz);
    u_xlat0.xyz = fma(FGlobals._ColorAddSubDiff.yyy, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD1.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._EmissionColor.xxyz.yzw;
    u_xlat7 = input.TEXCOORD3.z + (-FGlobals._CameraFadeParams.x);
    u_xlat7 = u_xlat7 * FGlobals._CameraFadeParams.y;
    u_xlat7 = clamp(u_xlat7, 0.0f, 1.0f);
    output.SV_Target0.xyz = fma(u_xlat1.xyz, float3(u_xlat7), u_xlat0.xyz);
    output.SV_Target0.w = u_xlat6 * u_xlat7;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: _EMISSION 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON _FADING_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_EmissionMap" to slot 1

Constant Buffer "$Globals" (64 bytes) {
  Vector4 _Color at 0
  Vector3 _EmissionColor at 16
  Vector4 _CameraFadeParams at 32
  Vector4 _ColorAddSubDiff at 48
}
Constant Buffer "$Globals" (224 bytes) {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_MatrixVP at 144
  Vector4 _ProjectionParams at 0
  Vector4 _MainTex_ST at 208
}

Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
out vec4 vs_COLOR0;
out vec2 vs_TEXCOORD1;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD3.w = u_xlat1.w;
    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Color;
uniform 	vec3 _EmissionColor;
uniform 	vec4 _CameraFadeParams;
uniform 	vec4 _ColorAddSubDiff;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _EmissionMap;
in  vec4 vs_COLOR0;
in  vec2 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
vec4 u_xlat10_1;
float u_xlat6;
float u_xlat7;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat0 = u_xlat10_0 * _Color;
    u_xlat0.xyz = vs_COLOR0.xyz * _ColorAddSubDiff.xxx + u_xlat0.xyz;
    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + abs(u_xlat0.xyz);
    u_xlat0.xyz = _ColorAddSubDiff.yyy * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat10_1 = texture(_EmissionMap, vs_TEXCOORD1.xy);
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_EmissionColor.x, _EmissionColor.y, _EmissionColor.z);
    u_xlat7 = vs_TEXCOORD3.z + (-_CameraFadeParams.x);
    u_xlat7 = u_xlat7 * _CameraFadeParams.y;
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat7) + u_xlat0.xyz;
    SV_Target0.w = u_xlat6 * u_xlat7;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: _EMISSION 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON _FADING_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Set 2D Texture "_EmissionMap" to set: 0, binding: 3, used in: Fragment  using sampler in set: 0, binding: 1, used in: Fragment 
Set 2D Texture "_MainTex" to set: 0, binding: 2, used in: Fragment  using sampler in set: 0, binding: 0, used in: Fragment 

Constant Buffer "PGlobals2502511186" (64 bytes) on set: 1, binding: 0, used in: Fragment  {
  Vector4 _CameraFadeParams at 32
  Vector4 _Color at 0
  Vector4 _ColorAddSubDiff at 48
  Vector3 _EmissionColor at 16
}
Constant Buffer "VGlobals2502511186" (224 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_MatrixVP at 144
  Matrix4x4 unity_ObjectToWorld at 16
  Vector4 _MainTex_ST at 208
  Vector4 _ProjectionParams at 0
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 177

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 80 84 85 89 91 139
                              Name 89  "vs_TEXCOORD1"
                              Name 139  "vs_TEXCOORD3"
                              Decorate 11 Location 0
                              Decorate 16 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 Offset 16
                              MemberDecorate 19 2 Offset 80
                              MemberDecorate 19 3 Offset 144
                              MemberDecorate 19 4 Offset 208
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 1
                              MemberDecorate 78 0 BuiltIn Position
                              MemberDecorate 78 1 BuiltIn PointSize
                              MemberDecorate 78 2 BuiltIn ClipDistance
                              Decorate 78 Block
                              Decorate 84 Location 0
                              Decorate 85 RelaxedPrecision
                              Decorate 85 Location 1
                              Decorate 86 RelaxedPrecision
                              Decorate 89(vs_TEXCOORD1) Location 1
                              Decorate 91 Location 2
                              Decorate 139(vs_TEXCOORD3) Location 2
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              14:             TypeInt 32 0
              15:     14(int) Constant 4
              16:             TypeArray 7(fvec4) 15
              17:             TypeArray 7(fvec4) 15
              18:             TypeArray 7(fvec4) 15
              19:             TypeStruct 7(fvec4) 16 17 18 7(fvec4)
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 1
              24:             TypePointer Uniform 7(fvec4)
              28:     22(int) Constant 0
              36:     22(int) Constant 2
              45:     22(int) Constant 3
              49:      8(ptr) Variable Private
              76:     14(int) Constant 1
              77:             TypeArray 6(float) 76
              78:             TypeStruct 7(fvec4) 6(float) 77
              79:             TypePointer Output 78(struct)
              80:     79(ptr) Variable Output
              82:             TypePointer Output 7(fvec4)
              84:     82(ptr) Variable Output
              85:     10(ptr) Variable Input
              87:             TypeVector 6(float) 2
              88:             TypePointer Output 87(fvec2)
89(vs_TEXCOORD1):     88(ptr) Variable Output
              90:             TypePointer Input 87(fvec2)
              91:     90(ptr) Variable Input
              93:     22(int) Constant 4
             102:             TypePointer Private 6(float)
             103:    102(ptr) Variable Private
             106:     14(int) Constant 2
             107:             TypePointer Uniform 6(float)
             113:     14(int) Constant 0
             131:     14(int) Constant 3
139(vs_TEXCOORD3):     82(ptr) Variable Output
             143:             TypePointer Output 6(float)
             153:    6(float) Constant 1056964608
             158:   87(fvec2) ConstantComposite 153 153
               4:           2 Function None 3
               5:             Label
              12:    7(fvec4) Load 11
              13:    7(fvec4) VectorShuffle 12 12 1 1 1 1
              25:     24(ptr) AccessChain 21 23 23
              26:    7(fvec4) Load 25
              27:    7(fvec4) FMul 13 26
                              Store 9 27
              29:     24(ptr) AccessChain 21 23 28
              30:    7(fvec4) Load 29
              31:    7(fvec4) Load 11
              32:    7(fvec4) VectorShuffle 31 31 0 0 0 0
              33:    7(fvec4) FMul 30 32
              34:    7(fvec4) Load 9
              35:    7(fvec4) FAdd 33 34
                              Store 9 35
              37:     24(ptr) AccessChain 21 23 36
              38:    7(fvec4) Load 37
              39:    7(fvec4) Load 11
              40:    7(fvec4) VectorShuffle 39 39 2 2 2 2
              41:    7(fvec4) FMul 38 40
              42:    7(fvec4) Load 9
              43:    7(fvec4) FAdd 41 42
                              Store 9 43
              44:    7(fvec4) Load 9
              46:     24(ptr) AccessChain 21 23 45
              47:    7(fvec4) Load 46
              48:    7(fvec4) FAdd 44 47
                              Store 9 48
              50:    7(fvec4) Load 9
              51:    7(fvec4) VectorShuffle 50 50 1 1 1 1
              52:     24(ptr) AccessChain 21 45 23
              53:    7(fvec4) Load 52
              54:    7(fvec4) FMul 51 53
                              Store 49 54
              55:     24(ptr) AccessChain 21 45 28
              56:    7(fvec4) Load 55
              57:    7(fvec4) Load 9
              58:    7(fvec4) VectorShuffle 57 57 0 0 0 0
              59:    7(fvec4) FMul 56 58
              60:    7(fvec4) Load 49
              61:    7(fvec4) FAdd 59 60
                              Store 49 61
              62:     24(ptr) AccessChain 21 45 36
              63:    7(fvec4) Load 62
              64:    7(fvec4) Load 9
              65:    7(fvec4) VectorShuffle 64 64 2 2 2 2
              66:    7(fvec4) FMul 63 65
              67:    7(fvec4) Load 49
              68:    7(fvec4) FAdd 66 67
                              Store 49 68
              69:     24(ptr) AccessChain 21 45 45
              70:    7(fvec4) Load 69
              71:    7(fvec4) Load 9
              72:    7(fvec4) VectorShuffle 71 71 3 3 3 3
              73:    7(fvec4) FMul 70 72
              74:    7(fvec4) Load 49
              75:    7(fvec4) FAdd 73 74
                              Store 49 75
              81:    7(fvec4) Load 49
              83:     82(ptr) AccessChain 80 28
                              Store 83 81
              86:    7(fvec4) Load 85
                              Store 84 86
              92:   87(fvec2) Load 91
              94:     24(ptr) AccessChain 21 93
              95:    7(fvec4) Load 94
              96:   87(fvec2) VectorShuffle 95 95 0 1
              97:   87(fvec2) FMul 92 96
              98:     24(ptr) AccessChain 21 93
              99:    7(fvec4) Load 98
             100:   87(fvec2) VectorShuffle 99 99 2 3
             101:   87(fvec2) FAdd 97 100
                              Store 89(vs_TEXCOORD1) 101
             104:    102(ptr) AccessChain 9 76
             105:    6(float) Load 104
             108:    107(ptr) AccessChain 21 36 23 106
             109:    6(float) Load 108
             110:    6(float) FMul 105 109
                              Store 103 110
             111:    107(ptr) AccessChain 21 36 28 106
             112:    6(float) Load 111
             114:    102(ptr) AccessChain 9 113
             115:    6(float) Load 114
             116:    6(float) FMul 112 115
             117:    6(float) Load 103
             118:    6(float) FAdd 116 117
             119:    102(ptr) AccessChain 9 113
                              Store 119 118
             120:    107(ptr) AccessChain 21 36 36 106
             121:    6(float) Load 120
             122:    102(ptr) AccessChain 9 106
             123:    6(float) Load 122
             124:    6(float) FMul 121 123
             125:    102(ptr) AccessChain 9 113
             126:    6(float) Load 125
             127:    6(float) FAdd 124 126
             128:    102(ptr) AccessChain 9 113
                              Store 128 127
             129:    107(ptr) AccessChain 21 36 45 106
             130:    6(float) Load 129
             132:    102(ptr) AccessChain 9 131
             133:    6(float) Load 132
             134:    6(float) FMul 130 133
             135:    102(ptr) AccessChain 9 113
             136:    6(float) Load 135
             137:    6(float) FAdd 134 136
             138:    102(ptr) AccessChain 9 113
                              Store 138 137
             140:    102(ptr) AccessChain 9 113
             141:    6(float) Load 140
             142:    6(float) FNegate 141
             144:    143(ptr) AccessChain 139(vs_TEXCOORD3) 106
                              Store 144 142
             145:    102(ptr) AccessChain 49 76
             146:    6(float) Load 145
             147:    107(ptr) AccessChain 21 28 113
             148:    6(float) Load 147
             149:    6(float) FMul 146 148
             150:    102(ptr) AccessChain 9 113
                              Store 150 149
             151:    102(ptr) AccessChain 9 113
             152:    6(float) Load 151
             154:    6(float) FMul 152 153
             155:    102(ptr) AccessChain 9 131
                              Store 155 154
             156:    7(fvec4) Load 49
             157:   87(fvec2) VectorShuffle 156 156 0 3
             159:   87(fvec2) FMul 157 158
             160:    7(fvec4) Load 9
             161:    7(fvec4) VectorShuffle 160 159 4 1 5 3
                              Store 9 161
             162:    102(ptr) AccessChain 49 131
             163:    6(float) Load 162
             164:    143(ptr) AccessChain 139(vs_TEXCOORD3) 131
                              Store 164 163
             165:    7(fvec4) Load 9
             166:   87(fvec2) VectorShuffle 165 165 2 2
             167:    7(fvec4) Load 9
             168:   87(fvec2) VectorShuffle 167 167 0 3
             169:   87(fvec2) FAdd 166 168
             170:    7(fvec4) Load 139(vs_TEXCOORD3)
             171:    7(fvec4) VectorShuffle 170 169 4 5 2 3
                              Store 139(vs_TEXCOORD3) 171
             172:    143(ptr) AccessChain 80 28 76
             173:    6(float) Load 172
             174:    6(float) FNegate 173
             175:    143(ptr) AccessChain 80 28 76
                              Store 175 174
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 137

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 22 40 98 134
                              ExecutionMode 4 OriginUpperLeft
                              Name 22  "vs_TEXCOORD1"
                              Name 98  "vs_TEXCOORD3"
                              Decorate 9 RelaxedPrecision
                              Decorate 12 RelaxedPrecision
                              Decorate 12 DescriptorSet 0
                              Decorate 12 Binding 2
                              Decorate 13 RelaxedPrecision
                              Decorate 16 RelaxedPrecision
                              Decorate 16 DescriptorSet 0
                              Decorate 16 Binding 0
                              Decorate 17 RelaxedPrecision
                              Decorate 22(vs_TEXCOORD1) Location 1
                              Decorate 25 RelaxedPrecision
                              Decorate 26 RelaxedPrecision
                              MemberDecorate 28 0 RelaxedPrecision
                              MemberDecorate 28 0 Offset 0
                              MemberDecorate 28 1 RelaxedPrecision
                              MemberDecorate 28 1 Offset 16
                              MemberDecorate 28 2 Offset 32
                              MemberDecorate 28 3 RelaxedPrecision
                              MemberDecorate 28 3 Offset 48
                              Decorate 28 Block
                              Decorate 30 DescriptorSet 1
                              Decorate 30 Binding 0
                              Decorate 35 RelaxedPrecision
                              Decorate 36 RelaxedPrecision
                              Decorate 40 Location 0
                              Decorate 45 RelaxedPrecision
                              Decorate 46 RelaxedPrecision
                              Decorate 48 RelaxedPrecision
                              Decorate 49 RelaxedPrecision
                              Decorate 56 RelaxedPrecision
                              Decorate 61 RelaxedPrecision
                              Decorate 68 RelaxedPrecision
                              Decorate 69 RelaxedPrecision
                              Decorate 70 RelaxedPrecision
                              Decorate 71 RelaxedPrecision
                              Decorate 74 RelaxedPrecision
                              Decorate 75 RelaxedPrecision
                              Decorate 75 DescriptorSet 0
                              Decorate 75 Binding 3
                              Decorate 76 RelaxedPrecision
                              Decorate 77 RelaxedPrecision
                              Decorate 77 DescriptorSet 0
                              Decorate 77 Binding 1
                              Decorate 78 RelaxedPrecision
                              Decorate 82 RelaxedPrecision
                              Decorate 83 RelaxedPrecision
                              Decorate 84 RelaxedPrecision
                              Decorate 89 RelaxedPrecision
                              Decorate 92 RelaxedPrecision
                              Decorate 95 RelaxedPrecision
                              Decorate 96 RelaxedPrecision
                              Decorate 97 RelaxedPrecision
                              Decorate 98(vs_TEXCOORD3) Location 2
                              Decorate 120 RelaxedPrecision
                              Decorate 124 RelaxedPrecision
                              Decorate 134 RelaxedPrecision
                              Decorate 134 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypeImage 6(float) 2D sampled format:Unknown
              11:             TypePointer UniformConstant 10
              12:     11(ptr) Variable UniformConstant
              14:             TypeSampler
              15:             TypePointer UniformConstant 14
              16:     15(ptr) Variable UniformConstant
              18:             TypeSampledImage 10
              20:             TypeVector 6(float) 2
              21:             TypePointer Input 20(fvec2)
22(vs_TEXCOORD1):     21(ptr) Variable Input
              25:      8(ptr) Variable Private
              27:             TypeVector 6(float) 3
              28:             TypeStruct 7(fvec4) 27(fvec3) 7(fvec4) 7(fvec4)
              29:             TypePointer Uniform 28(struct)
              30:     29(ptr) Variable Uniform
              31:             TypeInt 32 1
              32:     31(int) Constant 0
              33:             TypePointer Uniform 7(fvec4)
              37:             TypePointer Private 27(fvec3)
              38:     37(ptr) Variable Private
              39:             TypePointer Input 7(fvec4)
              40:     39(ptr) Variable Input
              43:     31(int) Constant 3
              51:             TypePointer Private 6(float)
              52:     51(ptr) Variable Private
              53:             TypeInt 32 0
              54:     53(int) Constant 3
              57:             TypePointer Input 6(float)
              61:     37(ptr) Variable Private
              74:     37(ptr) Variable Private
              75:     11(ptr) Variable UniformConstant
              77:     15(ptr) Variable UniformConstant
              83:     37(ptr) Variable Private
              85:     31(int) Constant 1
              86:     53(int) Constant 0
              87:             TypePointer Uniform 6(float)
              90:     53(int) Constant 1
              93:     53(int) Constant 2
98(vs_TEXCOORD3):     39(ptr) Variable Input
             101:     31(int) Constant 2
             115:    6(float) Constant 0
             116:    6(float) Constant 1065353216
             119:      8(ptr) Variable Private
             133:             TypePointer Output 7(fvec4)
             134:    133(ptr) Variable Output
               4:           2 Function None 3
               5:             Label
              13:          10 Load 12
              17:          14 Load 16
              19:          18 SampledImage 13 17
              23:   20(fvec2) Load 22(vs_TEXCOORD1)
              24:    7(fvec4) ImageSampleImplicitLod 19 23
                              Store 9 24
              26:    7(fvec4) Load 9
              34:     33(ptr) AccessChain 30 32
              35:    7(fvec4) Load 34
              36:    7(fvec4) FMul 26 35
                              Store 25 36
              41:    7(fvec4) Load 40
              42:   27(fvec3) VectorShuffle 41 41 0 1 2
              44:     33(ptr) AccessChain 30 43
              45:    7(fvec4) Load 44
              46:   27(fvec3) VectorShuffle 45 45 0 0 0
              47:   27(fvec3) FMul 42 46
              48:    7(fvec4) Load 25
              49:   27(fvec3) VectorShuffle 48 48 0 1 2
              50:   27(fvec3) FAdd 47 49
                              Store 38 50
              55:     51(ptr) AccessChain 25 54
              56:    6(float) Load 55
              58:     57(ptr) AccessChain 40 54
              59:    6(float) Load 58
              60:    6(float) FMul 56 59
                              Store 52 60
              62:   27(fvec3) Load 38
              63:   27(fvec3) FNegate 62
              64:   27(fvec3) Load 38
              65:   27(fvec3) ExtInst 1(GLSL.std.450) 4(FAbs) 64
              66:   27(fvec3) FAdd 63 65
                              Store 61 66
              67:     33(ptr) AccessChain 30 43
              68:    7(fvec4) Load 67
              69:   27(fvec3) VectorShuffle 68 68 1 1 1
              70:   27(fvec3) Load 61
              71:   27(fvec3) FMul 69 70
              72:   27(fvec3) Load 38
              73:   27(fvec3) FAdd 71 72
                              Store 61 73
              76:          10 Load 75
              78:          14 Load 77
              79:          18 SampledImage 76 78
              80:   20(fvec2) Load 22(vs_TEXCOORD1)
              81:    7(fvec4) ImageSampleImplicitLod 79 80
              82:   27(fvec3) VectorShuffle 81 81 0 1 2
                              Store 74 82
              84:   27(fvec3) Load 74
              88:     87(ptr) AccessChain 30 85 86
              89:    6(float) Load 88
              91:     87(ptr) AccessChain 30 85 90
              92:    6(float) Load 91
              94:     87(ptr) AccessChain 30 85 93
              95:    6(float) Load 94
              96:   27(fvec3) CompositeConstruct 89 92 95
              97:   27(fvec3) FMul 84 96
                              Store 83 97
              99:     57(ptr) AccessChain 98(vs_TEXCOORD3) 93
             100:    6(float) Load 99
             102:     87(ptr) AccessChain 30 101 86
             103:    6(float) Load 102
             104:    6(float) FNegate 103
             105:    6(float) FAdd 100 104
             106:     51(ptr) AccessChain 38 86
                              Store 106 105
             107:     51(ptr) AccessChain 38 86
             108:    6(float) Load 107
             109:     87(ptr) AccessChain 30 101 90
             110:    6(float) Load 109
             111:    6(float) FMul 108 110
             112:     51(ptr) AccessChain 38 86
                              Store 112 111
             113:     51(ptr) AccessChain 38 86
             114:    6(float) Load 113
             117:    6(float) ExtInst 1(GLSL.std.450) 43(FClamp) 114 115 116
             118:     51(ptr) AccessChain 38 86
                              Store 118 117
             120:   27(fvec3) Load 83
             121:   27(fvec3) Load 38
             122:   27(fvec3) VectorShuffle 121 121 0 0 0
             123:   27(fvec3) FMul 120 122
             124:   27(fvec3) Load 61
             125:   27(fvec3) FAdd 123 124
             126:    7(fvec4) Load 119
             127:    7(fvec4) VectorShuffle 126 125 4 5 6 3
                              Store 119 127
             128:     51(ptr) AccessChain 38 86
             129:    6(float) Load 128
             130:    6(float) Load 52
             131:    6(float) FMul 129 130
             132:     51(ptr) AccessChain 119 54
                              Store 132 131
             135:    7(fvec4) Load 119
                              Store 134 135
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 25 math, 6 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "$Globals" (208 bytes) on slot 0 {
  Vector4 unity_ParticleUVShiftData at 64
  Float unity_ParticleUseMeshColors at 80
  Vector4 _MainTex_ST at 96
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 1 {
  Matrix4x4 unity_MatrixVP at 272
}
Constant Buffer "UnityDrawCallInfo" (16 bytes) on slot 2 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float       
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
// SV_InstanceID            0   x           4   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xy          2     NONE   float   xy  
//
      vs_5_0
      dcl_globalFlags refactoringAllowed
      dcl_constantbuffer CB0[7], immediateIndexed
      dcl_constantbuffer CB1[21], immediateIndexed
      dcl_constantbuffer CB2[1], immediateIndexed
      dcl_resource_structured t0, 56
      dcl_input v0.xyz
      dcl_input v2.xyzw
      dcl_input v3.xy
      dcl_input_sgv v4.x, instance_id
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyzw
      dcl_output o2.xy
      dcl_temps 6
   0: mov r0.xyz, v0.xyzx
   1: mov r0.w, l(1.000000)
   2: iadd r1.x, v4.x, cb2[0].x
   3: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r2.xyz, r1.x, l(0), t0.zxyx
   4: mov r3.x, r2.z
   5: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r4.xyz, r1.x, l(12), t0.yxzx
   6: mov r3.y, r4.x
   7: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r1.yzw, r1.x, l(24), t0.xxyz
   8: mov r3.z, r1.z
   9: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r5.xyzw, r1.x, l(36), t0.xyzw
  10: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r1.x, r1.x, l(52), t0.xxxx
  11: round_ni r1.x, r1.x
  12: mov r3.w, r5.y
  13: dp4 r1.z, r3.xyzw, r0.xyzw
  14: mul r3.xyzw, r1.zzzz, cb1[18].xyzw
  15: mov r4.x, r2.y
  16: mov r2.y, r4.z
  17: mov r4.z, r1.y
  18: mov r2.z, r1.w
  19: mov r4.w, r5.x
  20: dp4 r1.y, r4.xyzw, r0.xyzw
  21: mad r3.xyzw, cb1[17].xyzw, r1.yyyy, r3.xyzw
  22: mov r2.w, r5.z
  23: dp4 r0.x, r2.xyzw, r0.xyzw
  24: mad r0.xyzw, cb1[19].xyzw, r0.xxxx, r3.xyzw
  25: add o0.xyzw, r0.xyzw, cb1[20].xyzw
  26: and r0.x, r5.w, l(255)
  27: utof r0.x, r0.x
  28: ubfe r1.yz, l(0, 8, 8, 0), l(0, 8, 16, 0), r5.wwww
  29: ushr r1.w, r5.w, l(24)
  30: utof r0.yzw, r1.yyzw
  31: mul r0.xyzw, r0.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
  32: add r2.xyzw, v2.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
  33: mad r2.xyzw, cb0[5].xxxx, r2.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  34: mul o1.xyzw, r0.xyzw, r2.xyzw
  35: div r0.x, r1.x, cb0[4].y
  36: round_ni r0.x, r0.x
  37: mad r0.y, -r0.x, cb0[4].y, r1.x
  38: round_ni r0.y, r0.y
  39: mul r1.x, r0.y, cb0[4].z
  40: add r0.y, -cb0[4].w, l(1.000000)
  41: mad r1.y, -r0.x, cb0[4].w, r0.y
  42: mad r0.xy, v3.xyxx, cb0[4].zwzz, r1.xyxx
  43: ne r0.z, cb0[4].x, l(0.000000)
  44: movc r0.xy, r0.zzzz, r0.xyxx, v3.xyxx
  45: mad o2.xy, r0.xyxx, cb0[6].xyxx, cb0[6].zwzz
  46: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 2 math, 1 temp registers, 1 textures
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (208 bytes) on slot 0 {
  Vector4 _Color at 112
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyz 
// TEXCOORD                 1   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_5_0
      dcl_globalFlags refactoringAllowed
      dcl_constantbuffer CB0[8], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v1.xyz
      dcl_input_ps linear v2.xy
      dcl_output o0.xyzw
      dcl_temps 1
   0: sample_indexable(texture2d)(float,float,float,float) r0.xyz, v2.xyxx, t0.xyzw, s0
   1: mul r0.xyz, r0.xyzx, cb0[7].xyzx
   2: mul o0.xyz, r0.xyzx, v1.xyzx
   3: mov o0.w, l(1.000000)
   4: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (16 bytes) {
  Vector4 _Color at 0
}
Constant Buffer "$Globals" (128 bytes) {
  Matrix4x4 unity_MatrixVP at 0
  ScalarInt unity_BaseInstanceID at 64
  Vector4 unity_ParticleUVShiftData at 80
  Float unity_ParticleUseMeshColors at 96
  Vector4 _MainTex_ST at 112
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
uniform 	vec4 _MainTex_ST;
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
layout(location = 0) out highp vec4 vs_COLOR0;
layout(location = 1) out highp vec2 vs_TEXCOORD1;
vec4 u_xlat0;
vec2 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
uvec3 u_xlatu7;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat3.x = u_xlat2.z;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat4.x;
    u_xlat7.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]));
    u_xlat3.z = u_xlat7.y;
    u_xlat5 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.w = u_xlat5.y;
    u_xlat13 = dot(u_xlat3, u_xlat0);
    u_xlat3 = vec4(u_xlat13) * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.x = u_xlat2.y;
    u_xlat2.y = u_xlat4.z;
    u_xlat4.z = u_xlat7.x;
    u_xlat2.z = u_xlat7.z;
    u_xlat4.w = u_xlat5.x;
    u_xlat7.x = dot(u_xlat4, u_xlat0);
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat7.xxxx + u_xlat3;
    u_xlat2.w = u_xlat5.z;
    u_xlat0.x = dot(u_xlat2, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.xxxx + u_xlat3;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat0 = vec4(unity_ParticleUseMeshColors) * u_xlat0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu7.x = floatBitsToUint(u_xlat5.w) & 255u;
    u_xlat2.x = float(u_xlatu7.x);
    u_xlatu7.x = bitfieldExtract(floatBitsToUint(u_xlat5.w), int(8), int(8));
    u_xlatu7.y = bitfieldExtract(floatBitsToUint(u_xlat5.w), int(16), int(8));
    u_xlatu7.z = floatBitsToUint(u_xlat5.w) >> 24u;
    u_xlat2.yzw = vec3(u_xlatu7.xyz);
    u_xlat0 = u_xlat0 * u_xlat2;
    vs_COLOR0 = u_xlat0 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat0.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat6 = (-u_xlat0.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat6 = floor(u_xlat6);
    u_xlat1.x = u_xlat6 * unity_ParticleUVShiftData.z;
    u_xlat6 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat0.x) * unity_ParticleUVShiftData.w + u_xlat6;
    u_xlat0.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb12 = unity_ParticleUVShiftData.x!=0.0;
    u_xlat0.xy = (bool(u_xlatb12)) ? u_xlat0.xy : in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _Color;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
layout(location = 0) in highp vec4 vs_COLOR0;
layout(location = 1) in highp vec2 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
mediump vec3 u_xlat16_1;
void main()
{
    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (112 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 0
  Vector4 unity_ParticleUVShiftData at 64
  Float unity_ParticleUseMeshColors at 80
  Vector4 _MainTex_ST at 96
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float unity_ParticleUseMeshColors;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 COLOR0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

template <int N> vec<uint, N> bitFieldExtractU(const vec<uint, N> width, const vec<uint, N> offset, const vec<uint, N> src)
{
	vec<bool, N> isWidthZero = (width == 0);
	vec<bool, N> needsClamp = ((width + offset) < 32);
	vec<uint, N> clampVersion = src << (32-(width+offset));
	clampVersion = clampVersion >> (32 - width);
	vec<uint, N> simpleVersion = src >> offset;
	vec<uint, N> res = select(simpleVersion, clampVersion, needsClamp);
	return select(res, vec<uint, N>(0), isWidthZero);
}; 
vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    float2 u_xlat1;
    int u_xlati1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float u_xlat6;
    float3 u_xlat7;
    uint3 u_xlatu7;
    bool u_xlatb12;
    float u_xlat13;
    u_xlat0.xyz = input.POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat2.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 1]));
    u_xlat3.x = u_xlat2.z;
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 2]));
    u_xlat3.y = u_xlat4.x;
    u_xlat7.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 2]));
    u_xlat3.z = u_xlat7.y;
    u_xlat5 = float4(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 3]));
    u_xlat1.x = as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x34 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.w = u_xlat5.y;
    u_xlat13 = dot(u_xlat3, u_xlat0);
    u_xlat3 = float4(u_xlat13) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.x = u_xlat2.y;
    u_xlat2.y = u_xlat4.z;
    u_xlat4.z = u_xlat7.x;
    u_xlat2.z = u_xlat7.z;
    u_xlat4.w = u_xlat5.x;
    u_xlat7.x = dot(u_xlat4, u_xlat0);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat7.xxxx, u_xlat3);
    u_xlat2.w = u_xlat5.z;
    u_xlat0.x = dot(u_xlat2, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.xxxx, u_xlat3);
    output.mtl_Position = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0 = input.COLOR0 + float4(-1.0, -1.0, -1.0, -1.0);
    u_xlat0 = fma(float4(VGlobals.unity_ParticleUseMeshColors), u_xlat0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlatu7.x = as_type<uint>(u_xlat5.w) & 0xffu;
    u_xlat2.x = float(u_xlatu7.x);
    u_xlatu7.xy = bitFieldExtractU(uint2(0x8u, 0x8u), uint2(0x8u, 0x10u), as_type<uint2>(u_xlat5.ww));
    u_xlatu7.z = as_type<uint>(u_xlat5.w) >> 0x18u;
    u_xlat2.yzw = float3(u_xlatu7.xyz);
    u_xlat0 = u_xlat0 * u_xlat2;
    output.COLOR0 = u_xlat0 * float4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat0.x = u_xlat1.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat6 = fma((-u_xlat0.x), VGlobals.unity_ParticleUVShiftData.y, u_xlat1.x);
    u_xlat6 = floor(u_xlat6);
    u_xlat1.x = u_xlat6 * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat6 = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = fma((-u_xlat0.x), VGlobals.unity_ParticleUVShiftData.w, u_xlat6);
    u_xlat0.xy = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat1.xy);
    u_xlatb12 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat0.xy = (bool(u_xlatb12)) ? u_xlat0.xy : input.TEXCOORD0.xy;
    output.TEXCOORD1.xy = fma(u_xlat0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "FGlobals" (16 bytes) on slot 0 {
  Vector4 _Color at 0
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Color;
};

struct Mtl_FragmentIn
{
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (16 bytes) {
  Vector4 _Color at 0
}
Constant Buffer "$Globals" (128 bytes) {
  Matrix4x4 unity_MatrixVP at 0
  ScalarInt unity_BaseInstanceID at 64
  Vector4 unity_ParticleUVShiftData at 80
  Float unity_ParticleUseMeshColors at 96
  Vector4 _MainTex_ST at 112
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require
#ifdef GL_ARB_shader_storage_buffer_object
#extension GL_ARB_shader_storage_buffer_object : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
uniform 	vec4 _MainTex_ST;
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in  vec4 in_POSITION0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
layout(location = 0) out vec4 vs_COLOR0;
layout(location = 1) out vec2 vs_TEXCOORD1;
vec4 u_xlat0;
uint u_xlatu0;
vec2 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
uvec3 u_xlatu7;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat3.x = u_xlat2.z;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat4.x;
    u_xlat7.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]));
    u_xlat3.z = u_xlat7.y;
    u_xlat5 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.w = u_xlat5.y;
    u_xlat13 = dot(u_xlat3, u_xlat0);
    u_xlat3 = vec4(u_xlat13) * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.x = u_xlat2.y;
    u_xlat2.y = u_xlat4.z;
    u_xlat4.z = u_xlat7.x;
    u_xlat2.z = u_xlat7.z;
    u_xlat4.w = u_xlat5.x;
    u_xlat7.x = dot(u_xlat4, u_xlat0);
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat7.xxxx + u_xlat3;
    u_xlat2.w = u_xlat5.z;
    u_xlat0.x = dot(u_xlat2, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.xxxx + u_xlat3;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlatu0 = floatBitsToUint(u_xlat5.w) & 255u;
    u_xlat0.x = float(u_xlatu0);
    u_xlatu7.x = bitfieldExtract(floatBitsToUint(u_xlat5.w), int(8), int(8));
    u_xlatu7.y = bitfieldExtract(floatBitsToUint(u_xlat5.w), int(16), int(8));
    u_xlatu7.z = floatBitsToUint(u_xlat5.w) >> 24u;
    u_xlat0.yzw = vec3(u_xlatu7.xyz);
    u_xlat0 = u_xlat0 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat2 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat2 = vec4(unity_ParticleUseMeshColors) * u_xlat2 + vec4(1.0, 1.0, 1.0, 1.0);
    vs_COLOR0 = u_xlat0 * u_xlat2;
    u_xlat0.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat6 = (-u_xlat0.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat6 = floor(u_xlat6);
    u_xlat1.x = u_xlat6 * unity_ParticleUVShiftData.z;
    u_xlat6 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat0.x) * unity_ParticleUVShiftData.w + u_xlat6;
    u_xlat0.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb12 = unity_ParticleUVShiftData.x!=0.0;
    u_xlat0.xy = (bool(u_xlatb12)) ? u_xlat0.xy : in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
layout(location = 0) in  vec4 vs_COLOR0;
layout(location = 1) in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat10_0;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Set 2D Texture "_MainTex" to set: 0, binding: 1, used in: Fragment  using sampler in set: 0, binding: 0, used in: Fragment 

Constant Buffer "PGlobals4065045268" (16 bytes) on set: 1, binding: 0, used in: Fragment  {
  Vector4 _Color at 0
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on set: 1, binding: 2, used in: Vertex  {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "VGlobals4065045268" (112 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 0
  Vector4 _MainTex_ST at 96
  Vector4 unity_ParticleUVShiftData at 64
  Float unity_ParticleUseMeshColors at 80
}

Set Buffer  "unity_ParticleInstanceData" to set: 0, binding: 2, used in: Vertex 
Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 359

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 26 208 215 266 312 342
                              Name 342  "vs_TEXCOORD1"
                              Decorate 11 Location 0
                              Decorate 26 BuiltIn InstanceIndex
                              MemberDecorate 28 0 Offset 0
                              MemberDecorate 28 1 Offset 4
                              Decorate 28 Block
                              Decorate 30 DescriptorSet 1
                              Decorate 30 Binding 2
                              Decorate 38 ArrayStride 4
                              MemberDecorate 39 0 Offset 0
                              Decorate 40 ArrayStride 56
                              MemberDecorate 41 0 NonWritable
                              MemberDecorate 41 0 Offset 0
                              Decorate 41 BufferBlock
                              Decorate 43 DescriptorSet 0
                              Decorate 43 Binding 2
                              Decorate 157 ArrayStride 16
                              MemberDecorate 158 0 Offset 0
                              MemberDecorate 158 1 Offset 64
                              MemberDecorate 158 2 Offset 80
                              MemberDecorate 158 3 Offset 96
                              Decorate 158 Block
                              Decorate 160 DescriptorSet 1
                              Decorate 160 Binding 1
                              MemberDecorate 206 0 BuiltIn Position
                              MemberDecorate 206 1 BuiltIn PointSize
                              MemberDecorate 206 2 BuiltIn ClipDistance
                              Decorate 206 Block
                              Decorate 215 RelaxedPrecision
                              Decorate 215 Location 1
                              Decorate 216 RelaxedPrecision
                              Decorate 219 RelaxedPrecision
                              Decorate 266 Location 0
                              Decorate 312 Location 2
                              Decorate 342(vs_TEXCOORD1) Location 1
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              12:             TypeVector 6(float) 3
              17:    6(float) Constant 1065353216
              18:             TypeInt 32 0
              19:     18(int) Constant 3
              20:             TypePointer Private 6(float)
              22:             TypeInt 32 1
              23:             TypePointer Private 22(int)
              24:     23(ptr) Variable Private
              25:             TypePointer Input 22(int)
              26:     25(ptr) Variable Input
              28:             TypeStruct 22(int) 22(int)
              29:             TypePointer Uniform 28(struct)
              30:     29(ptr) Variable Uniform
              31:     22(int) Constant 0
              32:             TypePointer Uniform 22(int)
              36:      8(ptr) Variable Private
              37:     18(int) Constant 14
              38:             TypeArray 18(int) 37
              39:             TypeStruct 38
              40:             TypeRuntimeArray 39(struct)
              41:             TypeStruct 40
              42:             TypePointer Uniform 41(struct)
              43:     42(ptr) Variable Uniform
              45:     22(int) Constant 2
              46:             TypePointer Uniform 18(int)
              55:     22(int) Constant 1
              62:      8(ptr) Variable Private
              63:     18(int) Constant 2
              66:     18(int) Constant 0
              68:      8(ptr) Variable Private
              70:     22(int) Constant 4
              75:     22(int) Constant 3
              80:     22(int) Constant 5
              89:     18(int) Constant 1
              91:             TypePointer Private 12(fvec3)
              92:     91(ptr) Variable Private
              94:     22(int) Constant 6
              99:     22(int) Constant 7
             104:     22(int) Constant 8
             112:      8(ptr) Variable Private
             114:     22(int) Constant 9
             119:     22(int) Constant 10
             124:     22(int) Constant 11
             129:     22(int) Constant 12
             134:             TypeVector 6(float) 2
             135:             TypePointer Private 134(fvec2)
             136:    135(ptr) Variable Private
             138:     22(int) Constant 13
             150:     20(ptr) Variable Private
             156:     18(int) Constant 4
             157:             TypeArray 7(fvec4) 156
             158:             TypeStruct 157 7(fvec4) 6(float) 7(fvec4)
             159:             TypePointer Uniform 158(struct)
             160:    159(ptr) Variable Uniform
             161:             TypePointer Uniform 7(fvec4)
             205:             TypeArray 6(float) 89
             206:             TypeStruct 7(fvec4) 6(float) 205
             207:             TypePointer Output 206(struct)
             208:    207(ptr) Variable Output
             213:             TypePointer Output 7(fvec4)
             215:     10(ptr) Variable Input
             217:    6(float) Constant 3212836864
             218:    7(fvec4) ConstantComposite 217 217 217 217
             220:             TypePointer Uniform 6(float)
             226:    7(fvec4) ConstantComposite 17 17 17 17
             228:             TypeVector 18(int) 3
             229:             TypePointer Private 228(ivec3)
             230:    229(ptr) Variable Private
             234:     18(int) Constant 255
             236:             TypePointer Private 18(int)
             250:     22(int) Constant 16
             256:     18(int) Constant 24
             266:    213(ptr) Variable Output
             268:    6(float) Constant 998277249
             269:    7(fvec4) ConstantComposite 268 268 268 268
             281:     20(ptr) Variable Private
             311:             TypePointer Input 134(fvec2)
             312:    311(ptr) Variable Input
             322:             TypeBool
             323:             TypePointer Private 322(bool)
             324:    323(ptr) Variable Private
             327:    6(float) Constant 0
             330:             TypePointer Function 134(fvec2)
             341:             TypePointer Output 134(fvec2)
342(vs_TEXCOORD1):    341(ptr) Variable Output
             353:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
             331:    330(ptr) Variable Function
              13:    7(fvec4) Load 11
              14:   12(fvec3) VectorShuffle 13 13 0 1 2
              15:    7(fvec4) Load 9
              16:    7(fvec4) VectorShuffle 15 14 4 5 6 3
                              Store 9 16
              21:     20(ptr) AccessChain 9 19
                              Store 21 17
              27:     22(int) Load 26
              33:     32(ptr) AccessChain 30 31
              34:     22(int) Load 33
              35:     22(int) IAdd 27 34
                              Store 24 35
              44:     22(int) Load 24
              47:     46(ptr) AccessChain 43 31 44 31 45
              48:     18(int) Load 47
              49:    6(float) Bitcast 48
              50:     22(int) Load 24
              51:     46(ptr) AccessChain 43 31 50 31 31
              52:     18(int) Load 51
              53:    6(float) Bitcast 52
              54:     22(int) Load 24
              56:     46(ptr) AccessChain 43 31 54 31 55
              57:     18(int) Load 56
              58:    6(float) Bitcast 57
              59:   12(fvec3) CompositeConstruct 49 53 58
              60:    7(fvec4) Load 36
              61:    7(fvec4) VectorShuffle 60 59 4 5 6 3
                              Store 36 61
              64:     20(ptr) AccessChain 36 63
              65:    6(float) Load 64
              67:     20(ptr) AccessChain 62 66
                              Store 67 65
              69:     22(int) Load 24
              71:     46(ptr) AccessChain 43 31 69 31 70
              72:     18(int) Load 71
              73:    6(float) Bitcast 72
              74:     22(int) Load 24
              76:     46(ptr) AccessChain 43 31 74 31 75
              77:     18(int) Load 76
              78:    6(float) Bitcast 77
              79:     22(int) Load 24
              81:     46(ptr) AccessChain 43 31 79 31 80
              82:     18(int) Load 81
              83:    6(float) Bitcast 82
              84:   12(fvec3) CompositeConstruct 73 78 83
              85:    7(fvec4) Load 68
              86:    7(fvec4) VectorShuffle 85 84 4 5 6 3
                              Store 68 86
              87:     20(ptr) AccessChain 68 66
              88:    6(float) Load 87
              90:     20(ptr) AccessChain 62 89
                              Store 90 88
              93:     22(int) Load 24
              95:     46(ptr) AccessChain 43 31 93 31 94
              96:     18(int) Load 95
              97:    6(float) Bitcast 96
              98:     22(int) Load 24
             100:     46(ptr) AccessChain 43 31 98 31 99
             101:     18(int) Load 100
             102:    6(float) Bitcast 101
             103:     22(int) Load 24
             105:     46(ptr) AccessChain 43 31 103 31 104
             106:     18(int) Load 105
             107:    6(float) Bitcast 106
             108:   12(fvec3) CompositeConstruct 97 102 107
                              Store 92 108
             109:     20(ptr) AccessChain 92 89
             110:    6(float) Load 109
             111:     20(ptr) AccessChain 62 63
                              Store 111 110
             113:     22(int) Load 24
             115:     46(ptr) AccessChain 43 31 113 31 114
             116:     18(int) Load 115
             117:    6(float) Bitcast 116
             118:     22(int) Load 24
             120:     46(ptr) AccessChain 43 31 118 31 119
             121:     18(int) Load 120
             122:    6(float) Bitcast 121
             123:     22(int) Load 24
             125:     46(ptr) AccessChain 43 31 123 31 124
             126:     18(int) Load 125
             127:    6(float) Bitcast 126
             128:     22(int) Load 24
             130:     46(ptr) AccessChain 43 31 128 31 129
             131:     18(int) Load 130
             132:    6(float) Bitcast 131
             133:    7(fvec4) CompositeConstruct 117 122 127 132
                              Store 112 133
             137:     22(int) Load 24
             139:     46(ptr) AccessChain 43 31 137 31 138
             140:     18(int) Load 139
             141:    6(float) Bitcast 140
             142:     20(ptr) AccessChain 136 66
                              Store 142 141
             143:     20(ptr) AccessChain 136 66
             144:    6(float) Load 143
             145:    6(float) ExtInst 1(GLSL.std.450) 8(Floor) 144
             146:     20(ptr) AccessChain 136 66
                              Store 146 145
             147:     20(ptr) AccessChain 112 89
             148:    6(float) Load 147
             149:     20(ptr) AccessChain 62 19
                              Store 149 148
             151:    7(fvec4) Load 62
             152:    7(fvec4) Load 9
             153:    6(float) Dot 151 152
                              Store 150 153
             154:    6(float) Load 150
             155:    7(fvec4) CompositeConstruct 154 154 154 154
             162:    161(ptr) AccessChain 160 31 55
             163:    7(fvec4) Load 162
             164:    7(fvec4) FMul 155 163
                              Store 62 164
             165:     20(ptr) AccessChain 36 89
             166:    6(float) Load 165
             167:     20(ptr) AccessChain 68 66
                              Store 167 166
             168:     20(ptr) AccessChain 68 63
             169:    6(float) Load 168
             170:     20(ptr) AccessChain 36 89
                              Store 170 169
             171:     20(ptr) AccessChain 92 66
             172:    6(float) Load 171
             173:     20(ptr) AccessChain 68 63
                              Store 173 172
             174:     20(ptr) AccessChain 92 63
             175:    6(float) Load 174
             176:     20(ptr) AccessChain 36 63
                              Store 176 175
             177:     20(ptr) AccessChain 112 66
             178:    6(float) Load 177
             179:     20(ptr) AccessChain 68 19
                              Store 179 178
             180:    7(fvec4) Load 68
             181:    7(fvec4) Load 9
             182:    6(float) Dot 180 181
             183:     20(ptr) AccessChain 92 66
                              Store 183 182
             184:    161(ptr) AccessChain 160 31 31
             185:    7(fvec4) Load 184
             186:   12(fvec3) Load 92
             187:    7(fvec4) VectorShuffle 186 186 0 0 0 0
             188:    7(fvec4) FMul 185 187
             189:    7(fvec4) Load 62
             190:    7(fvec4) FAdd 188 189
                              Store 62 190
             191:     20(ptr) AccessChain 112 63
             192:    6(float) Load 191
             193:     20(ptr) AccessChain 36 19
                              Store 193 192
             194:    7(fvec4) Load 36
             195:    7(fvec4) Load 9
             196:    6(float) Dot 194 195
             197:     20(ptr) AccessChain 9 66
                              Store 197 196
             198:    161(ptr) AccessChain 160 31 45
             199:    7(fvec4) Load 198
             200:    7(fvec4) Load 9
             201:    7(fvec4) VectorShuffle 200 200 0 0 0 0
             202:    7(fvec4) FMul 199 201
             203:    7(fvec4) Load 62
             204:    7(fvec4) FAdd 202 203
                              Store 9 204
             209:    7(fvec4) Load 9
             210:    161(ptr) AccessChain 160 31 75
             211:    7(fvec4) Load 210
             212:    7(fvec4) FAdd 209 211
             214:    213(ptr) AccessChain 208 31
                              Store 214 212
             216:    7(fvec4) Load 215
             219:    7(fvec4) FAdd 216 218
                              Store 9 219
             221:    220(ptr) AccessChain 160 45
             222:    6(float) Load 221
             223:    7(fvec4) CompositeConstruct 222 222 222 222
             224:    7(fvec4) Load 9
             225:    7(fvec4) FMul 223 224
             227:    7(fvec4) FAdd 225 226
                              Store 9 227
             231:     20(ptr) AccessChain 112 19
             232:    6(float) Load 231
             233:     18(int) Bitcast 232
             235:     18(int) BitwiseAnd 233 234
             237:    236(ptr) AccessChain 230 66
                              Store 237 235
             238:    236(ptr) AccessChain 230 66
             239:     18(int) Load 238
             240:    6(float) ConvertUToF 239
             241:     20(ptr) AccessChain 36 66
                              Store 241 240
             242:     20(ptr) AccessChain 112 19
             243:    6(float) Load 242
             244:     18(int) Bitcast 243
             245:     18(int) BitFieldUExtract 244 104 104
             246:    236(ptr) AccessChain 230 66
                              Store 246 245
             247:     20(ptr) AccessChain 112 19
             248:    6(float) Load 247
             249:     18(int) Bitcast 248
             251:     18(int) BitFieldUExtract 249 250 104
             252:    236(ptr) AccessChain 230 89
                              Store 252 251
             253:     20(ptr) AccessChain 112 19
             254:    6(float) Load 253
             255:     18(int) Bitcast 254
             257:     18(int) ShiftRightLogical 255 256
             258:    236(ptr) AccessChain 230 63
                              Store 258 257
             259:  228(ivec3) Load 230
             260:   12(fvec3) ConvertUToF 259
             261:    7(fvec4) Load 36
             262:    7(fvec4) VectorShuffle 261 260 0 4 5 6
                              Store 36 262
             263:    7(fvec4) Load 9
             264:    7(fvec4) Load 36
             265:    7(fvec4) FMul 263 264
                              Store 9 265
             267:    7(fvec4) Load 9
             270:    7(fvec4) FMul 267 269
                              Store 266 270
             271:     20(ptr) AccessChain 136 66
             272:    6(float) Load 271
             273:    220(ptr) AccessChain 160 55 89
             274:    6(float) Load 273
             275:    6(float) FDiv 272 274
             276:     20(ptr) AccessChain 9 66
                              Store 276 275
             277:     20(ptr) AccessChain 9 66
             278:    6(float) Load 277
             279:    6(float) ExtInst 1(GLSL.std.450) 8(Floor) 278
             280:     20(ptr) AccessChain 9 66
                              Store 280 279
             282:     20(ptr) AccessChain 9 66
             283:    6(float) Load 282
             284:    6(float) FNegate 283
             285:    220(ptr) AccessChain 160 55 89
             286:    6(float) Load 285
             287:    6(float) FMul 284 286
             288:     20(ptr) AccessChain 136 66
             289:    6(float) Load 288
             290:    6(float) FAdd 287 289
                              Store 281 290
             291:    6(float) Load 281
             292:    6(float) ExtInst 1(GLSL.std.450) 8(Floor) 291
                              Store 281 292
             293:    6(float) Load 281
             294:    220(ptr) AccessChain 160 55 63
             295:    6(float) Load 294
             296:    6(float) FMul 293 295
             297:     20(ptr) AccessChain 136 66
                              Store 297 296
             298:    220(ptr) AccessChain 160 55 19
             299:    6(float) Load 298
             300:    6(float) FNegate 299
             301:    6(float) FAdd 300 17
                              Store 281 301
             302:     20(ptr) AccessChain 9 66
             303:    6(float) Load 302
             304:    6(float) FNegate 303
             305:    220(ptr) AccessChain 160 55 19
             306:    6(float) Load 305
             307:    6(float) FMul 304 306
             308:    6(float) Load 281
             309:    6(float) FAdd 307 308
             310:     20(ptr) AccessChain 136 89
                              Store 310 309
             313:  134(fvec2) Load 312
             314:    161(ptr) AccessChain 160 55
             315:    7(fvec4) Load 314
             316:  134(fvec2) VectorShuffle 315 315 2 3
             317:  134(fvec2) FMul 313 316
             318:  134(fvec2) Load 136
             319:  134(fvec2) FAdd 317 318
             320:    7(fvec4) Load 9
             321:    7(fvec4) VectorShuffle 320 319 4 5 2 3
                              Store 9 321
             325:    220(ptr) AccessChain 160 55 66
             326:    6(float) Load 325
             328:   322(bool) FOrdNotEqual 326 327
                              Store 324 328
             329:   322(bool) Load 324
                              SelectionMerge 333 None
                              BranchConditional 329 332 336
             332:               Label
             334:    7(fvec4)   Load 9
             335:  134(fvec2)   VectorShuffle 334 334 0 1
                                Store 331 335
                                Branch 333
             336:               Label
             337:  134(fvec2)   Load 312
                                Store 331 337
                                Branch 333
             333:             Label
             338:  134(fvec2) Load 331
             339:    7(fvec4) Load 9
             340:    7(fvec4) VectorShuffle 339 338 4 5 2 3
                              Store 9 340
             343:    7(fvec4) Load 9
             344:  134(fvec2) VectorShuffle 343 343 0 1
             345:    161(ptr) AccessChain 160 75
             346:    7(fvec4) Load 345
             347:  134(fvec2) VectorShuffle 346 346 0 1
             348:  134(fvec2) FMul 344 347
             349:    161(ptr) AccessChain 160 75
             350:    7(fvec4) Load 349
             351:  134(fvec2) VectorShuffle 350 350 2 3
             352:  134(fvec2) FAdd 348 351
                              Store 342(vs_TEXCOORD1) 352
             354:    353(ptr) AccessChain 208 31 89
             355:    6(float) Load 354
             356:    6(float) FNegate 355
             357:    353(ptr) AccessChain 208 31 89
                              Store 357 356
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 57

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 22 42 47
                              ExecutionMode 4 OriginUpperLeft
                              Name 22  "vs_TEXCOORD1"
                              Decorate 9 RelaxedPrecision
                              Decorate 12 RelaxedPrecision
                              Decorate 12 DescriptorSet 0
                              Decorate 12 Binding 1
                              Decorate 13 RelaxedPrecision
                              Decorate 16 RelaxedPrecision
                              Decorate 16 DescriptorSet 0
                              Decorate 16 Binding 0
                              Decorate 17 RelaxedPrecision
                              Decorate 22(vs_TEXCOORD1) Location 1
                              Decorate 26 RelaxedPrecision
                              Decorate 27 RelaxedPrecision
                              Decorate 28 RelaxedPrecision
                              MemberDecorate 29 0 RelaxedPrecision
                              MemberDecorate 29 0 Offset 0
                              Decorate 29 Block
                              Decorate 31 DescriptorSet 1
                              Decorate 31 Binding 0
                              Decorate 36 RelaxedPrecision
                              Decorate 37 RelaxedPrecision
                              Decorate 38 RelaxedPrecision
                              Decorate 40 RelaxedPrecision
                              Decorate 42 Location 0
                              Decorate 47 RelaxedPrecision
                              Decorate 47 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 3
               8:             TypePointer Private 7(fvec3)
               9:      8(ptr) Variable Private
              10:             TypeImage 6(float) 2D sampled format:Unknown
              11:             TypePointer UniformConstant 10
              12:     11(ptr) Variable UniformConstant
              14:             TypeSampler
              15:             TypePointer UniformConstant 14
              16:     15(ptr) Variable UniformConstant
              18:             TypeSampledImage 10
              20:             TypeVector 6(float) 2
              21:             TypePointer Input 20(fvec2)
22(vs_TEXCOORD1):     21(ptr) Variable Input
              24:             TypeVector 6(float) 4
              27:      8(ptr) Variable Private
              29:             TypeStruct 24(fvec4)
              30:             TypePointer Uniform 29(struct)
              31:     30(ptr) Variable Uniform
              32:             TypeInt 32 1
              33:     32(int) Constant 0
              34:             TypePointer Uniform 24(fvec4)
              39:      8(ptr) Variable Private
              41:             TypePointer Input 24(fvec4)
              42:     41(ptr) Variable Input
              46:             TypePointer Output 24(fvec4)
              47:     46(ptr) Variable Output
              51:    6(float) Constant 1065353216
              52:             TypeInt 32 0
              53:     52(int) Constant 3
              54:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              13:          10 Load 12
              17:          14 Load 16
              19:          18 SampledImage 13 17
              23:   20(fvec2) Load 22(vs_TEXCOORD1)
              25:   24(fvec4) ImageSampleImplicitLod 19 23
              26:    7(fvec3) VectorShuffle 25 25 0 1 2
                              Store 9 26
              28:    7(fvec3) Load 9
              35:     34(ptr) AccessChain 31 33
              36:   24(fvec4) Load 35
              37:    7(fvec3) VectorShuffle 36 36 0 1 2
              38:    7(fvec3) FMul 28 37
                              Store 27 38
              40:    7(fvec3) Load 27
              43:   24(fvec4) Load 42
              44:    7(fvec3) VectorShuffle 43 43 0 1 2
              45:    7(fvec3) FMul 40 44
                              Store 39 45
              48:    7(fvec3) Load 39
              49:   24(fvec4) Load 47
              50:   24(fvec4) VectorShuffle 49 48 4 5 6 3
                              Store 47 50
              55:     54(ptr) AccessChain 47 53
                              Store 55 51
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 25 math, 6 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "$Globals" (208 bytes) on slot 0 {
  Vector4 unity_ParticleUVShiftData at 64
  Float unity_ParticleUseMeshColors at 80
  Vector4 _MainTex_ST at 96
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 1 {
  Matrix4x4 unity_MatrixVP at 272
}
Constant Buffer "UnityDrawCallInfo" (16 bytes) on slot 2 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float       
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
// SV_InstanceID            0   x           4   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xy          2     NONE   float   xy  
//
      vs_5_0
      dcl_globalFlags refactoringAllowed
      dcl_constantbuffer CB0[7], immediateIndexed
      dcl_constantbuffer CB1[21], immediateIndexed
      dcl_constantbuffer CB2[1], immediateIndexed
      dcl_resource_structured t0, 56
      dcl_input v0.xyz
      dcl_input v2.xyzw
      dcl_input v3.xy
      dcl_input_sgv v4.x, instance_id
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyzw
      dcl_output o2.xy
      dcl_temps 6
   0: mov r0.xyz, v0.xyzx
   1: mov r0.w, l(1.000000)
   2: iadd r1.x, v4.x, cb2[0].x
   3: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r2.xyz, r1.x, l(0), t0.zxyx
   4: mov r3.x, r2.z
   5: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r4.xyz, r1.x, l(12), t0.yxzx
   6: mov r3.y, r4.x
   7: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r1.yzw, r1.x, l(24), t0.xxyz
   8: mov r3.z, r1.z
   9: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r5.xyzw, r1.x, l(36), t0.xyzw
  10: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r1.x, r1.x, l(52), t0.xxxx
  11: round_ni r1.x, r1.x
  12: mov r3.w, r5.y
  13: dp4 r1.z, r3.xyzw, r0.xyzw
  14: mul r3.xyzw, r1.zzzz, cb1[18].xyzw
  15: mov r4.x, r2.y
  16: mov r2.y, r4.z
  17: mov r4.z, r1.y
  18: mov r2.z, r1.w
  19: mov r4.w, r5.x
  20: dp4 r1.y, r4.xyzw, r0.xyzw
  21: mad r3.xyzw, cb1[17].xyzw, r1.yyyy, r3.xyzw
  22: mov r2.w, r5.z
  23: dp4 r0.x, r2.xyzw, r0.xyzw
  24: mad r0.xyzw, cb1[19].xyzw, r0.xxxx, r3.xyzw
  25: add o0.xyzw, r0.xyzw, cb1[20].xyzw
  26: and r0.x, r5.w, l(255)
  27: utof r0.x, r0.x
  28: ubfe r1.yz, l(0, 8, 8, 0), l(0, 8, 16, 0), r5.wwww
  29: ushr r1.w, r5.w, l(24)
  30: utof r0.yzw, r1.yyzw
  31: mul r0.xyzw, r0.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
  32: add r2.xyzw, v2.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
  33: mad r2.xyzw, cb0[5].xxxx, r2.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  34: mul o1.xyzw, r0.xyzw, r2.xyzw
  35: div r0.x, r1.x, cb0[4].y
  36: round_ni r0.x, r0.x
  37: mad r0.y, -r0.x, cb0[4].y, r1.x
  38: round_ni r0.y, r0.y
  39: mul r1.x, r0.y, cb0[4].z
  40: add r0.y, -cb0[4].w, l(1.000000)
  41: mad r1.y, -r0.x, cb0[4].w, r0.y
  42: mad r0.xy, v3.xyxx, cb0[4].zwzz, r1.xyxx
  43: ne r0.z, cb0[4].x, l(0.000000)
  44: movc r0.xy, r0.zzzz, r0.xyxx, v3.xyxx
  45: mad o2.xy, r0.xyxx, cb0[6].xyxx, cb0[6].zwzz
  46: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 2 math, 1 temp registers, 1 textures
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (208 bytes) on slot 0 {
  Vector4 _Color at 112
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_5_0
      dcl_globalFlags refactoringAllowed
      dcl_constantbuffer CB0[8], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v1.xyzw
      dcl_input_ps linear v2.xy
      dcl_output o0.xyzw
      dcl_temps 1
   0: sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s0
   1: mul r0.xyzw, r0.xyzw, cb0[7].xyzw
   2: mul o0.xyzw, r0.xyzw, v1.xyzw
   3: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (16 bytes) {
  Vector4 _Color at 0
}
Constant Buffer "$Globals" (128 bytes) {
  Matrix4x4 unity_MatrixVP at 0
  ScalarInt unity_BaseInstanceID at 64
  Vector4 unity_ParticleUVShiftData at 80
  Float unity_ParticleUseMeshColors at 96
  Vector4 _MainTex_ST at 112
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
uniform 	vec4 _MainTex_ST;
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
layout(location = 0) out highp vec4 vs_COLOR0;
layout(location = 1) out highp vec2 vs_TEXCOORD1;
vec4 u_xlat0;
vec2 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
uvec3 u_xlatu7;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat3.x = u_xlat2.z;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat4.x;
    u_xlat7.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]));
    u_xlat3.z = u_xlat7.y;
    u_xlat5 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.w = u_xlat5.y;
    u_xlat13 = dot(u_xlat3, u_xlat0);
    u_xlat3 = vec4(u_xlat13) * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.x = u_xlat2.y;
    u_xlat2.y = u_xlat4.z;
    u_xlat4.z = u_xlat7.x;
    u_xlat2.z = u_xlat7.z;
    u_xlat4.w = u_xlat5.x;
    u_xlat7.x = dot(u_xlat4, u_xlat0);
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat7.xxxx + u_xlat3;
    u_xlat2.w = u_xlat5.z;
    u_xlat0.x = dot(u_xlat2, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.xxxx + u_xlat3;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat0 = vec4(unity_ParticleUseMeshColors) * u_xlat0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu7.x = floatBitsToUint(u_xlat5.w) & 255u;
    u_xlat2.x = float(u_xlatu7.x);
    u_xlatu7.x = bitfieldExtract(floatBitsToUint(u_xlat5.w), int(8), int(8));
    u_xlatu7.y = bitfieldExtract(floatBitsToUint(u_xlat5.w), int(16), int(8));
    u_xlatu7.z = floatBitsToUint(u_xlat5.w) >> 24u;
    u_xlat2.yzw = vec3(u_xlatu7.xyz);
    u_xlat0 = u_xlat0 * u_xlat2;
    vs_COLOR0 = u_xlat0 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat0.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat6 = (-u_xlat0.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat6 = floor(u_xlat6);
    u_xlat1.x = u_xlat6 * unity_ParticleUVShiftData.z;
    u_xlat6 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat0.x) * unity_ParticleUVShiftData.w + u_xlat6;
    u_xlat0.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb12 = unity_ParticleUVShiftData.x!=0.0;
    u_xlat0.xy = (bool(u_xlatb12)) ? u_xlat0.xy : in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _Color;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
layout(location = 0) in highp vec4 vs_COLOR0;
layout(location = 1) in highp vec2 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat16_0 = u_xlat16_0 * _Color;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    SV_Target0 = u_xlat0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (112 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 0
  Vector4 unity_ParticleUVShiftData at 64
  Float unity_ParticleUseMeshColors at 80
  Vector4 _MainTex_ST at 96
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float unity_ParticleUseMeshColors;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 COLOR0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

template <int N> vec<uint, N> bitFieldExtractU(const vec<uint, N> width, const vec<uint, N> offset, const vec<uint, N> src)
{
	vec<bool, N> isWidthZero = (width == 0);
	vec<bool, N> needsClamp = ((width + offset) < 32);
	vec<uint, N> clampVersion = src << (32-(width+offset));
	clampVersion = clampVersion >> (32 - width);
	vec<uint, N> simpleVersion = src >> offset;
	vec<uint, N> res = select(simpleVersion, clampVersion, needsClamp);
	return select(res, vec<uint, N>(0), isWidthZero);
}; 
vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    float2 u_xlat1;
    int u_xlati1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float u_xlat6;
    float3 u_xlat7;
    uint3 u_xlatu7;
    bool u_xlatb12;
    float u_xlat13;
    u_xlat0.xyz = input.POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat2.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 1]));
    u_xlat3.x = u_xlat2.z;
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 2]));
    u_xlat3.y = u_xlat4.x;
    u_xlat7.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 2]));
    u_xlat3.z = u_xlat7.y;
    u_xlat5 = float4(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 3]));
    u_xlat1.x = as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x34 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.w = u_xlat5.y;
    u_xlat13 = dot(u_xlat3, u_xlat0);
    u_xlat3 = float4(u_xlat13) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.x = u_xlat2.y;
    u_xlat2.y = u_xlat4.z;
    u_xlat4.z = u_xlat7.x;
    u_xlat2.z = u_xlat7.z;
    u_xlat4.w = u_xlat5.x;
    u_xlat7.x = dot(u_xlat4, u_xlat0);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat7.xxxx, u_xlat3);
    u_xlat2.w = u_xlat5.z;
    u_xlat0.x = dot(u_xlat2, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.xxxx, u_xlat3);
    output.mtl_Position = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0 = input.COLOR0 + float4(-1.0, -1.0, -1.0, -1.0);
    u_xlat0 = fma(float4(VGlobals.unity_ParticleUseMeshColors), u_xlat0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlatu7.x = as_type<uint>(u_xlat5.w) & 0xffu;
    u_xlat2.x = float(u_xlatu7.x);
    u_xlatu7.xy = bitFieldExtractU(uint2(0x8u, 0x8u), uint2(0x8u, 0x10u), as_type<uint2>(u_xlat5.ww));
    u_xlatu7.z = as_type<uint>(u_xlat5.w) >> 0x18u;
    u_xlat2.yzw = float3(u_xlatu7.xyz);
    u_xlat0 = u_xlat0 * u_xlat2;
    output.COLOR0 = u_xlat0 * float4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat0.x = u_xlat1.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat6 = fma((-u_xlat0.x), VGlobals.unity_ParticleUVShiftData.y, u_xlat1.x);
    u_xlat6 = floor(u_xlat6);
    u_xlat1.x = u_xlat6 * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat6 = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = fma((-u_xlat0.x), VGlobals.unity_ParticleUVShiftData.w, u_xlat6);
    u_xlat0.xy = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat1.xy);
    u_xlatb12 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat0.xy = (bool(u_xlatb12)) ? u_xlat0.xy : input.TEXCOORD0.xy;
    output.TEXCOORD1.xy = fma(u_xlat0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "FGlobals" (16 bytes) on slot 0 {
  Vector4 _Color at 0
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Color;
};

struct Mtl_FragmentIn
{
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    u_xlat0 = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy);
    u_xlat0 = u_xlat0 * FGlobals._Color;
    output.SV_Target0 = u_xlat0 * input.COLOR0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (16 bytes) {
  Vector4 _Color at 0
}
Constant Buffer "$Globals" (128 bytes) {
  Matrix4x4 unity_MatrixVP at 0
  ScalarInt unity_BaseInstanceID at 64
  Vector4 unity_ParticleUVShiftData at 80
  Float unity_ParticleUseMeshColors at 96
  Vector4 _MainTex_ST at 112
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require
#ifdef GL_ARB_shader_storage_buffer_object
#extension GL_ARB_shader_storage_buffer_object : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
uniform 	vec4 _MainTex_ST;
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in  vec4 in_POSITION0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
layout(location = 0) out vec4 vs_COLOR0;
layout(location = 1) out vec2 vs_TEXCOORD1;
vec4 u_xlat0;
uint u_xlatu0;
vec2 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
uvec3 u_xlatu7;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat3.x = u_xlat2.z;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat4.x;
    u_xlat7.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]));
    u_xlat3.z = u_xlat7.y;
    u_xlat5 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.w = u_xlat5.y;
    u_xlat13 = dot(u_xlat3, u_xlat0);
    u_xlat3 = vec4(u_xlat13) * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.x = u_xlat2.y;
    u_xlat2.y = u_xlat4.z;
    u_xlat4.z = u_xlat7.x;
    u_xlat2.z = u_xlat7.z;
    u_xlat4.w = u_xlat5.x;
    u_xlat7.x = dot(u_xlat4, u_xlat0);
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat7.xxxx + u_xlat3;
    u_xlat2.w = u_xlat5.z;
    u_xlat0.x = dot(u_xlat2, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.xxxx + u_xlat3;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlatu0 = floatBitsToUint(u_xlat5.w) & 255u;
    u_xlat0.x = float(u_xlatu0);
    u_xlatu7.x = bitfieldExtract(floatBitsToUint(u_xlat5.w), int(8), int(8));
    u_xlatu7.y = bitfieldExtract(floatBitsToUint(u_xlat5.w), int(16), int(8));
    u_xlatu7.z = floatBitsToUint(u_xlat5.w) >> 24u;
    u_xlat0.yzw = vec3(u_xlatu7.xyz);
    u_xlat0 = u_xlat0 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat2 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat2 = vec4(unity_ParticleUseMeshColors) * u_xlat2 + vec4(1.0, 1.0, 1.0, 1.0);
    vs_COLOR0 = u_xlat0 * u_xlat2;
    u_xlat0.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat6 = (-u_xlat0.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat6 = floor(u_xlat6);
    u_xlat1.x = u_xlat6 * unity_ParticleUVShiftData.z;
    u_xlat6 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat0.x) * unity_ParticleUVShiftData.w + u_xlat6;
    u_xlat0.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb12 = unity_ParticleUVShiftData.x!=0.0;
    u_xlat0.xy = (bool(u_xlatb12)) ? u_xlat0.xy : in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
layout(location = 0) in  vec4 vs_COLOR0;
layout(location = 1) in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat0 = u_xlat10_0 * _Color;
    SV_Target0 = u_xlat0 * vs_COLOR0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Set 2D Texture "_MainTex" to set: 0, binding: 1, used in: Fragment  using sampler in set: 0, binding: 0, used in: Fragment 

Constant Buffer "PGlobals1012538853" (16 bytes) on set: 1, binding: 0, used in: Fragment  {
  Vector4 _Color at 0
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on set: 1, binding: 2, used in: Vertex  {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "VGlobals1012538853" (112 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 0
  Vector4 _MainTex_ST at 96
  Vector4 unity_ParticleUVShiftData at 64
  Float unity_ParticleUseMeshColors at 80
}

Set Buffer  "unity_ParticleInstanceData" to set: 0, binding: 2, used in: Vertex 
Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 359

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 26 208 215 266 312 342
                              Name 342  "vs_TEXCOORD1"
                              Decorate 11 Location 0
                              Decorate 26 BuiltIn InstanceIndex
                              MemberDecorate 28 0 Offset 0
                              MemberDecorate 28 1 Offset 4
                              Decorate 28 Block
                              Decorate 30 DescriptorSet 1
                              Decorate 30 Binding 2
                              Decorate 38 ArrayStride 4
                              MemberDecorate 39 0 Offset 0
                              Decorate 40 ArrayStride 56
                              MemberDecorate 41 0 NonWritable
                              MemberDecorate 41 0 Offset 0
                              Decorate 41 BufferBlock
                              Decorate 43 DescriptorSet 0
                              Decorate 43 Binding 2
                              Decorate 157 ArrayStride 16
                              MemberDecorate 158 0 Offset 0
                              MemberDecorate 158 1 Offset 64
                              MemberDecorate 158 2 Offset 80
                              MemberDecorate 158 3 Offset 96
                              Decorate 158 Block
                              Decorate 160 DescriptorSet 1
                              Decorate 160 Binding 1
                              MemberDecorate 206 0 BuiltIn Position
                              MemberDecorate 206 1 BuiltIn PointSize
                              MemberDecorate 206 2 BuiltIn ClipDistance
                              Decorate 206 Block
                              Decorate 215 RelaxedPrecision
                              Decorate 215 Location 1
                              Decorate 216 RelaxedPrecision
                              Decorate 219 RelaxedPrecision
                              Decorate 266 Location 0
                              Decorate 312 Location 2
                              Decorate 342(vs_TEXCOORD1) Location 1
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              12:             TypeVector 6(float) 3
              17:    6(float) Constant 1065353216
              18:             TypeInt 32 0
              19:     18(int) Constant 3
              20:             TypePointer Private 6(float)
              22:             TypeInt 32 1
              23:             TypePointer Private 22(int)
              24:     23(ptr) Variable Private
              25:             TypePointer Input 22(int)
              26:     25(ptr) Variable Input
              28:             TypeStruct 22(int) 22(int)
              29:             TypePointer Uniform 28(struct)
              30:     29(ptr) Variable Uniform
              31:     22(int) Constant 0
              32:             TypePointer Uniform 22(int)
              36:      8(ptr) Variable Private
              37:     18(int) Constant 14
              38:             TypeArray 18(int) 37
              39:             TypeStruct 38
              40:             TypeRuntimeArray 39(struct)
              41:             TypeStruct 40
              42:             TypePointer Uniform 41(struct)
              43:     42(ptr) Variable Uniform
              45:     22(int) Constant 2
              46:             TypePointer Uniform 18(int)
              55:     22(int) Constant 1
              62:      8(ptr) Variable Private
              63:     18(int) Constant 2
              66:     18(int) Constant 0
              68:      8(ptr) Variable Private
              70:     22(int) Constant 4
              75:     22(int) Constant 3
              80:     22(int) Constant 5
              89:     18(int) Constant 1
              91:             TypePointer Private 12(fvec3)
              92:     91(ptr) Variable Private
              94:     22(int) Constant 6
              99:     22(int) Constant 7
             104:     22(int) Constant 8
             112:      8(ptr) Variable Private
             114:     22(int) Constant 9
             119:     22(int) Constant 10
             124:     22(int) Constant 11
             129:     22(int) Constant 12
             134:             TypeVector 6(float) 2
             135:             TypePointer Private 134(fvec2)
             136:    135(ptr) Variable Private
             138:     22(int) Constant 13
             150:     20(ptr) Variable Private
             156:     18(int) Constant 4
             157:             TypeArray 7(fvec4) 156
             158:             TypeStruct 157 7(fvec4) 6(float) 7(fvec4)
             159:             TypePointer Uniform 158(struct)
             160:    159(ptr) Variable Uniform
             161:             TypePointer Uniform 7(fvec4)
             205:             TypeArray 6(float) 89
             206:             TypeStruct 7(fvec4) 6(float) 205
             207:             TypePointer Output 206(struct)
             208:    207(ptr) Variable Output
             213:             TypePointer Output 7(fvec4)
             215:     10(ptr) Variable Input
             217:    6(float) Constant 3212836864
             218:    7(fvec4) ConstantComposite 217 217 217 217
             220:             TypePointer Uniform 6(float)
             226:    7(fvec4) ConstantComposite 17 17 17 17
             228:             TypeVector 18(int) 3
             229:             TypePointer Private 228(ivec3)
             230:    229(ptr) Variable Private
             234:     18(int) Constant 255
             236:             TypePointer Private 18(int)
             250:     22(int) Constant 16
             256:     18(int) Constant 24
             266:    213(ptr) Variable Output
             268:    6(float) Constant 998277249
             269:    7(fvec4) ConstantComposite 268 268 268 268
             281:     20(ptr) Variable Private
             311:             TypePointer Input 134(fvec2)
             312:    311(ptr) Variable Input
             322:             TypeBool
             323:             TypePointer Private 322(bool)
             324:    323(ptr) Variable Private
             327:    6(float) Constant 0
             330:             TypePointer Function 134(fvec2)
             341:             TypePointer Output 134(fvec2)
342(vs_TEXCOORD1):    341(ptr) Variable Output
             353:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
             331:    330(ptr) Variable Function
              13:    7(fvec4) Load 11
              14:   12(fvec3) VectorShuffle 13 13 0 1 2
              15:    7(fvec4) Load 9
              16:    7(fvec4) VectorShuffle 15 14 4 5 6 3
                              Store 9 16
              21:     20(ptr) AccessChain 9 19
                              Store 21 17
              27:     22(int) Load 26
              33:     32(ptr) AccessChain 30 31
              34:     22(int) Load 33
              35:     22(int) IAdd 27 34
                              Store 24 35
              44:     22(int) Load 24
              47:     46(ptr) AccessChain 43 31 44 31 45
              48:     18(int) Load 47
              49:    6(float) Bitcast 48
              50:     22(int) Load 24
              51:     46(ptr) AccessChain 43 31 50 31 31
              52:     18(int) Load 51
              53:    6(float) Bitcast 52
              54:     22(int) Load 24
              56:     46(ptr) AccessChain 43 31 54 31 55
              57:     18(int) Load 56
              58:    6(float) Bitcast 57
              59:   12(fvec3) CompositeConstruct 49 53 58
              60:    7(fvec4) Load 36
              61:    7(fvec4) VectorShuffle 60 59 4 5 6 3
                              Store 36 61
              64:     20(ptr) AccessChain 36 63
              65:    6(float) Load 64
              67:     20(ptr) AccessChain 62 66
                              Store 67 65
              69:     22(int) Load 24
              71:     46(ptr) AccessChain 43 31 69 31 70
              72:     18(int) Load 71
              73:    6(float) Bitcast 72
              74:     22(int) Load 24
              76:     46(ptr) AccessChain 43 31 74 31 75
              77:     18(int) Load 76
              78:    6(float) Bitcast 77
              79:     22(int) Load 24
              81:     46(ptr) AccessChain 43 31 79 31 80
              82:     18(int) Load 81
              83:    6(float) Bitcast 82
              84:   12(fvec3) CompositeConstruct 73 78 83
              85:    7(fvec4) Load 68
              86:    7(fvec4) VectorShuffle 85 84 4 5 6 3
                              Store 68 86
              87:     20(ptr) AccessChain 68 66
              88:    6(float) Load 87
              90:     20(ptr) AccessChain 62 89
                              Store 90 88
              93:     22(int) Load 24
              95:     46(ptr) AccessChain 43 31 93 31 94
              96:     18(int) Load 95
              97:    6(float) Bitcast 96
              98:     22(int) Load 24
             100:     46(ptr) AccessChain 43 31 98 31 99
             101:     18(int) Load 100
             102:    6(float) Bitcast 101
             103:     22(int) Load 24
             105:     46(ptr) AccessChain 43 31 103 31 104
             106:     18(int) Load 105
             107:    6(float) Bitcast 106
             108:   12(fvec3) CompositeConstruct 97 102 107
                              Store 92 108
             109:     20(ptr) AccessChain 92 89
             110:    6(float) Load 109
             111:     20(ptr) AccessChain 62 63
                              Store 111 110
             113:     22(int) Load 24
             115:     46(ptr) AccessChain 43 31 113 31 114
             116:     18(int) Load 115
             117:    6(float) Bitcast 116
             118:     22(int) Load 24
             120:     46(ptr) AccessChain 43 31 118 31 119
             121:     18(int) Load 120
             122:    6(float) Bitcast 121
             123:     22(int) Load 24
             125:     46(ptr) AccessChain 43 31 123 31 124
             126:     18(int) Load 125
             127:    6(float) Bitcast 126
             128:     22(int) Load 24
             130:     46(ptr) AccessChain 43 31 128 31 129
             131:     18(int) Load 130
             132:    6(float) Bitcast 131
             133:    7(fvec4) CompositeConstruct 117 122 127 132
                              Store 112 133
             137:     22(int) Load 24
             139:     46(ptr) AccessChain 43 31 137 31 138
             140:     18(int) Load 139
             141:    6(float) Bitcast 140
             142:     20(ptr) AccessChain 136 66
                              Store 142 141
             143:     20(ptr) AccessChain 136 66
             144:    6(float) Load 143
             145:    6(float) ExtInst 1(GLSL.std.450) 8(Floor) 144
             146:     20(ptr) AccessChain 136 66
                              Store 146 145
             147:     20(ptr) AccessChain 112 89
             148:    6(float) Load 147
             149:     20(ptr) AccessChain 62 19
                              Store 149 148
             151:    7(fvec4) Load 62
             152:    7(fvec4) Load 9
             153:    6(float) Dot 151 152
                              Store 150 153
             154:    6(float) Load 150
             155:    7(fvec4) CompositeConstruct 154 154 154 154
             162:    161(ptr) AccessChain 160 31 55
             163:    7(fvec4) Load 162
             164:    7(fvec4) FMul 155 163
                              Store 62 164
             165:     20(ptr) AccessChain 36 89
             166:    6(float) Load 165
             167:     20(ptr) AccessChain 68 66
                              Store 167 166
             168:     20(ptr) AccessChain 68 63
             169:    6(float) Load 168
             170:     20(ptr) AccessChain 36 89
                              Store 170 169
             171:     20(ptr) AccessChain 92 66
             172:    6(float) Load 171
             173:     20(ptr) AccessChain 68 63
                              Store 173 172
             174:     20(ptr) AccessChain 92 63
             175:    6(float) Load 174
             176:     20(ptr) AccessChain 36 63
                              Store 176 175
             177:     20(ptr) AccessChain 112 66
             178:    6(float) Load 177
             179:     20(ptr) AccessChain 68 19
                              Store 179 178
             180:    7(fvec4) Load 68
             181:    7(fvec4) Load 9
             182:    6(float) Dot 180 181
             183:     20(ptr) AccessChain 92 66
                              Store 183 182
             184:    161(ptr) AccessChain 160 31 31
             185:    7(fvec4) Load 184
             186:   12(fvec3) Load 92
             187:    7(fvec4) VectorShuffle 186 186 0 0 0 0
             188:    7(fvec4) FMul 185 187
             189:    7(fvec4) Load 62
             190:    7(fvec4) FAdd 188 189
                              Store 62 190
             191:     20(ptr) AccessChain 112 63
             192:    6(float) Load 191
             193:     20(ptr) AccessChain 36 19
                              Store 193 192
             194:    7(fvec4) Load 36
             195:    7(fvec4) Load 9
             196:    6(float) Dot 194 195
             197:     20(ptr) AccessChain 9 66
                              Store 197 196
             198:    161(ptr) AccessChain 160 31 45
             199:    7(fvec4) Load 198
             200:    7(fvec4) Load 9
             201:    7(fvec4) VectorShuffle 200 200 0 0 0 0
             202:    7(fvec4) FMul 199 201
             203:    7(fvec4) Load 62
             204:    7(fvec4) FAdd 202 203
                              Store 9 204
             209:    7(fvec4) Load 9
             210:    161(ptr) AccessChain 160 31 75
             211:    7(fvec4) Load 210
             212:    7(fvec4) FAdd 209 211
             214:    213(ptr) AccessChain 208 31
                              Store 214 212
             216:    7(fvec4) Load 215
             219:    7(fvec4) FAdd 216 218
                              Store 9 219
             221:    220(ptr) AccessChain 160 45
             222:    6(float) Load 221
             223:    7(fvec4) CompositeConstruct 222 222 222 222
             224:    7(fvec4) Load 9
             225:    7(fvec4) FMul 223 224
             227:    7(fvec4) FAdd 225 226
                              Store 9 227
             231:     20(ptr) AccessChain 112 19
             232:    6(float) Load 231
             233:     18(int) Bitcast 232
             235:     18(int) BitwiseAnd 233 234
             237:    236(ptr) AccessChain 230 66
                              Store 237 235
             238:    236(ptr) AccessChain 230 66
             239:     18(int) Load 238
             240:    6(float) ConvertUToF 239
             241:     20(ptr) AccessChain 36 66
                              Store 241 240
             242:     20(ptr) AccessChain 112 19
             243:    6(float) Load 242
             244:     18(int) Bitcast 243
             245:     18(int) BitFieldUExtract 244 104 104
             246:    236(ptr) AccessChain 230 66
                              Store 246 245
             247:     20(ptr) AccessChain 112 19
             248:    6(float) Load 247
             249:     18(int) Bitcast 248
             251:     18(int) BitFieldUExtract 249 250 104
             252:    236(ptr) AccessChain 230 89
                              Store 252 251
             253:     20(ptr) AccessChain 112 19
             254:    6(float) Load 253
             255:     18(int) Bitcast 254
             257:     18(int) ShiftRightLogical 255 256
             258:    236(ptr) AccessChain 230 63
                              Store 258 257
             259:  228(ivec3) Load 230
             260:   12(fvec3) ConvertUToF 259
             261:    7(fvec4) Load 36
             262:    7(fvec4) VectorShuffle 261 260 0 4 5 6
                              Store 36 262
             263:    7(fvec4) Load 9
             264:    7(fvec4) Load 36
             265:    7(fvec4) FMul 263 264
                              Store 9 265
             267:    7(fvec4) Load 9
             270:    7(fvec4) FMul 267 269
                              Store 266 270
             271:     20(ptr) AccessChain 136 66
             272:    6(float) Load 271
             273:    220(ptr) AccessChain 160 55 89
             274:    6(float) Load 273
             275:    6(float) FDiv 272 274
             276:     20(ptr) AccessChain 9 66
                              Store 276 275
             277:     20(ptr) AccessChain 9 66
             278:    6(float) Load 277
             279:    6(float) ExtInst 1(GLSL.std.450) 8(Floor) 278
             280:     20(ptr) AccessChain 9 66
                              Store 280 279
             282:     20(ptr) AccessChain 9 66
             283:    6(float) Load 282
             284:    6(float) FNegate 283
             285:    220(ptr) AccessChain 160 55 89
             286:    6(float) Load 285
             287:    6(float) FMul 284 286
             288:     20(ptr) AccessChain 136 66
             289:    6(float) Load 288
             290:    6(float) FAdd 287 289
                              Store 281 290
             291:    6(float) Load 281
             292:    6(float) ExtInst 1(GLSL.std.450) 8(Floor) 291
                              Store 281 292
             293:    6(float) Load 281
             294:    220(ptr) AccessChain 160 55 63
             295:    6(float) Load 294
             296:    6(float) FMul 293 295
             297:     20(ptr) AccessChain 136 66
                              Store 297 296
             298:    220(ptr) AccessChain 160 55 19
             299:    6(float) Load 298
             300:    6(float) FNegate 299
             301:    6(float) FAdd 300 17
                              Store 281 301
             302:     20(ptr) AccessChain 9 66
             303:    6(float) Load 302
             304:    6(float) FNegate 303
             305:    220(ptr) AccessChain 160 55 19
             306:    6(float) Load 305
             307:    6(float) FMul 304 306
             308:    6(float) Load 281
             309:    6(float) FAdd 307 308
             310:     20(ptr) AccessChain 136 89
                              Store 310 309
             313:  134(fvec2) Load 312
             314:    161(ptr) AccessChain 160 55
             315:    7(fvec4) Load 314
             316:  134(fvec2) VectorShuffle 315 315 2 3
             317:  134(fvec2) FMul 313 316
             318:  134(fvec2) Load 136
             319:  134(fvec2) FAdd 317 318
             320:    7(fvec4) Load 9
             321:    7(fvec4) VectorShuffle 320 319 4 5 2 3
                              Store 9 321
             325:    220(ptr) AccessChain 160 55 66
             326:    6(float) Load 325
             328:   322(bool) FOrdNotEqual 326 327
                              Store 324 328
             329:   322(bool) Load 324
                              SelectionMerge 333 None
                              BranchConditional 329 332 336
             332:               Label
             334:    7(fvec4)   Load 9
             335:  134(fvec2)   VectorShuffle 334 334 0 1
                                Store 331 335
                                Branch 333
             336:               Label
             337:  134(fvec2)   Load 312
                                Store 331 337
                                Branch 333
             333:             Label
             338:  134(fvec2) Load 331
             339:    7(fvec4) Load 9
             340:    7(fvec4) VectorShuffle 339 338 4 5 2 3
                              Store 9 340
             343:    7(fvec4) Load 9
             344:  134(fvec2) VectorShuffle 343 343 0 1
             345:    161(ptr) AccessChain 160 75
             346:    7(fvec4) Load 345
             347:  134(fvec2) VectorShuffle 346 346 0 1
             348:  134(fvec2) FMul 344 347
             349:    161(ptr) AccessChain 160 75
             350:    7(fvec4) Load 349
             351:  134(fvec2) VectorShuffle 350 350 2 3
             352:  134(fvec2) FAdd 348 351
                              Store 342(vs_TEXCOORD1) 352
             354:    353(ptr) AccessChain 208 31 89
             355:    6(float) Load 354
             356:    6(float) FNegate 355
             357:    353(ptr) AccessChain 208 31 89
                              Store 357 356
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 46

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 22 39 43
                              ExecutionMode 4 OriginUpperLeft
                              Name 22  "vs_TEXCOORD1"
                              Decorate 9 RelaxedPrecision
                              Decorate 12 RelaxedPrecision
                              Decorate 12 DescriptorSet 0
                              Decorate 12 Binding 1
                              Decorate 13 RelaxedPrecision
                              Decorate 16 RelaxedPrecision
                              Decorate 16 DescriptorSet 0
                              Decorate 16 Binding 0
                              Decorate 17 RelaxedPrecision
                              Decorate 22(vs_TEXCOORD1) Location 1
                              Decorate 25 RelaxedPrecision
                              Decorate 26 RelaxedPrecision
                              MemberDecorate 27 0 RelaxedPrecision
                              MemberDecorate 27 0 Offset 0
                              Decorate 27 Block
                              Decorate 29 DescriptorSet 1
                              Decorate 29 Binding 0
                              Decorate 34 RelaxedPrecision
                              Decorate 35 RelaxedPrecision
                              Decorate 37 RelaxedPrecision
                              Decorate 39 Location 0
                              Decorate 43 RelaxedPrecision
                              Decorate 43 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypeImage 6(float) 2D sampled format:Unknown
              11:             TypePointer UniformConstant 10
              12:     11(ptr) Variable UniformConstant
              14:             TypeSampler
              15:             TypePointer UniformConstant 14
              16:     15(ptr) Variable UniformConstant
              18:             TypeSampledImage 10
              20:             TypeVector 6(float) 2
              21:             TypePointer Input 20(fvec2)
22(vs_TEXCOORD1):     21(ptr) Variable Input
              25:      8(ptr) Variable Private
              27:             TypeStruct 7(fvec4)
              28:             TypePointer Uniform 27(struct)
              29:     28(ptr) Variable Uniform
              30:             TypeInt 32 1
              31:     30(int) Constant 0
              32:             TypePointer Uniform 7(fvec4)
              36:      8(ptr) Variable Private
              38:             TypePointer Input 7(fvec4)
              39:     38(ptr) Variable Input
              42:             TypePointer Output 7(fvec4)
              43:     42(ptr) Variable Output
               4:           2 Function None 3
               5:             Label
              13:          10 Load 12
              17:          14 Load 16
              19:          18 SampledImage 13 17
              23:   20(fvec2) Load 22(vs_TEXCOORD1)
              24:    7(fvec4) ImageSampleImplicitLod 19 23
                              Store 9 24
              26:    7(fvec4) Load 9
              33:     32(ptr) AccessChain 29 31
              34:    7(fvec4) Load 33
              35:    7(fvec4) FMul 26 34
                              Store 25 35
              37:    7(fvec4) Load 25
              40:    7(fvec4) Load 39
              41:    7(fvec4) FMul 37 40
                              Store 36 41
              44:    7(fvec4) Load 36
                              Store 43 44
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 25 math, 6 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "$Globals" (224 bytes) on slot 0 {
  Vector4 unity_ParticleUVShiftData at 64
  Float unity_ParticleUseMeshColors at 80
  Vector4 _MainTex_ST at 96
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 1 {
  Matrix4x4 unity_MatrixVP at 272
}
Constant Buffer "UnityDrawCallInfo" (16 bytes) on slot 2 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float       
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
// SV_InstanceID            0   x           4   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xy          2     NONE   float   xy  
//
      vs_5_0
      dcl_globalFlags refactoringAllowed
      dcl_constantbuffer CB0[7], immediateIndexed
      dcl_constantbuffer CB1[21], immediateIndexed
      dcl_constantbuffer CB2[1], immediateIndexed
      dcl_resource_structured t0, 56
      dcl_input v0.xyz
      dcl_input v2.xyzw
      dcl_input v3.xy
      dcl_input_sgv v4.x, instance_id
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyzw
      dcl_output o2.xy
      dcl_temps 6
   0: mov r0.xyz, v0.xyzx
   1: mov r0.w, l(1.000000)
   2: iadd r1.x, v4.x, cb2[0].x
   3: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r2.xyz, r1.x, l(0), t0.zxyx
   4: mov r3.x, r2.z
   5: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r4.xyz, r1.x, l(12), t0.yxzx
   6: mov r3.y, r4.x
   7: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r1.yzw, r1.x, l(24), t0.xxyz
   8: mov r3.z, r1.z
   9: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r5.xyzw, r1.x, l(36), t0.xyzw
  10: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r1.x, r1.x, l(52), t0.xxxx
  11: round_ni r1.x, r1.x
  12: mov r3.w, r5.y
  13: dp4 r1.z, r3.xyzw, r0.xyzw
  14: mul r3.xyzw, r1.zzzz, cb1[18].xyzw
  15: mov r4.x, r2.y
  16: mov r2.y, r4.z
  17: mov r4.z, r1.y
  18: mov r2.z, r1.w
  19: mov r4.w, r5.x
  20: dp4 r1.y, r4.xyzw, r0.xyzw
  21: mad r3.xyzw, cb1[17].xyzw, r1.yyyy, r3.xyzw
  22: mov r2.w, r5.z
  23: dp4 r0.x, r2.xyzw, r0.xyzw
  24: mad r0.xyzw, cb1[19].xyzw, r0.xxxx, r3.xyzw
  25: add o0.xyzw, r0.xyzw, cb1[20].xyzw
  26: and r0.x, r5.w, l(255)
  27: utof r0.x, r0.x
  28: ubfe r1.yz, l(0, 8, 8, 0), l(0, 8, 16, 0), r5.wwww
  29: ushr r1.w, r5.w, l(24)
  30: utof r0.yzw, r1.yyzw
  31: mul r0.xyzw, r0.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
  32: add r2.xyzw, v2.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
  33: mad r2.xyzw, cb0[5].xxxx, r2.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  34: mul o1.xyzw, r0.xyzw, r2.xyzw
  35: div r0.x, r1.x, cb0[4].y
  36: round_ni r0.x, r0.x
  37: mad r0.y, -r0.x, cb0[4].y, r1.x
  38: round_ni r0.y, r0.y
  39: mul r1.x, r0.y, cb0[4].z
  40: add r0.y, -cb0[4].w, l(1.000000)
  41: mad r1.y, -r0.x, cb0[4].w, r0.y
  42: mad r0.xy, v3.xyxx, cb0[4].zwzz, r1.xyxx
  43: ne r0.z, cb0[4].x, l(0.000000)
  44: movc r0.xy, r0.zzzz, r0.xyxx, v3.xyxx
  45: mad o2.xy, r0.xyxx, cb0[6].xyxx, cb0[6].zwzz
  46: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 5 math, 2 temp registers, 1 textures
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (224 bytes) on slot 0 {
  Vector4 _Color at 112
  Vector4 _ColorAddSubDiff at 208
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_5_0
      dcl_globalFlags refactoringAllowed
      dcl_constantbuffer CB0[14], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v1.xyzw
      dcl_input_ps linear v2.xy
      dcl_output o0.xyzw
      dcl_temps 2
   0: sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s0
   1: mul r0.xyzw, r0.xyzw, cb0[7].xyzw
   2: mad r0.xyz, v1.xyzx, cb0[13].xxxx, r0.xyzx
   3: mul o0.w, r0.w, v1.w
   4: add r1.xyz, -r0.xyzx, |r0.xyzx|
   5: mad o0.xyz, cb0[13].yyyy, r1.xyzx, r0.xyzx
   6: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (32 bytes) {
  Vector4 _Color at 0
  Vector4 _ColorAddSubDiff at 16
}
Constant Buffer "$Globals" (128 bytes) {
  Matrix4x4 unity_MatrixVP at 0
  ScalarInt unity_BaseInstanceID at 64
  Vector4 unity_ParticleUVShiftData at 80
  Float unity_ParticleUseMeshColors at 96
  Vector4 _MainTex_ST at 112
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
uniform 	vec4 _MainTex_ST;
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
layout(location = 0) out highp vec4 vs_COLOR0;
layout(location = 1) out highp vec2 vs_TEXCOORD1;
vec4 u_xlat0;
vec2 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
uvec3 u_xlatu7;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat3.x = u_xlat2.z;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat4.x;
    u_xlat7.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]));
    u_xlat3.z = u_xlat7.y;
    u_xlat5 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.w = u_xlat5.y;
    u_xlat13 = dot(u_xlat3, u_xlat0);
    u_xlat3 = vec4(u_xlat13) * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.x = u_xlat2.y;
    u_xlat2.y = u_xlat4.z;
    u_xlat4.z = u_xlat7.x;
    u_xlat2.z = u_xlat7.z;
    u_xlat4.w = u_xlat5.x;
    u_xlat7.x = dot(u_xlat4, u_xlat0);
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat7.xxxx + u_xlat3;
    u_xlat2.w = u_xlat5.z;
    u_xlat0.x = dot(u_xlat2, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.xxxx + u_xlat3;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat0 = vec4(unity_ParticleUseMeshColors) * u_xlat0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu7.x = floatBitsToUint(u_xlat5.w) & 255u;
    u_xlat2.x = float(u_xlatu7.x);
    u_xlatu7.x = bitfieldExtract(floatBitsToUint(u_xlat5.w), int(8), int(8));
    u_xlatu7.y = bitfieldExtract(floatBitsToUint(u_xlat5.w), int(16), int(8));
    u_xlatu7.z = floatBitsToUint(u_xlat5.w) >> 24u;
    u_xlat2.yzw = vec3(u_xlatu7.xyz);
    u_xlat0 = u_xlat0 * u_xlat2;
    vs_COLOR0 = u_xlat0 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat0.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat6 = (-u_xlat0.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat6 = floor(u_xlat6);
    u_xlat1.x = u_xlat6 * unity_ParticleUVShiftData.z;
    u_xlat6 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat0.x) * unity_ParticleUVShiftData.w + u_xlat6;
    u_xlat0.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb12 = unity_ParticleUVShiftData.x!=0.0;
    u_xlat0.xy = (bool(u_xlatb12)) ? u_xlat0.xy : in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _ColorAddSubDiff;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
layout(location = 0) in highp vec4 vs_COLOR0;
layout(location = 1) in highp vec2 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat10;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat16_0 = u_xlat16_0 * _Color;
    u_xlat1.xyz = vs_COLOR0.xyz * _ColorAddSubDiff.xxx + u_xlat16_0.xyz;
    u_xlat10 = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.w = u_xlat10;
    u_xlat16_2.xyz = (-u_xlat1.xyz) + abs(u_xlat1.xyz);
    SV_Target0.xyz = _ColorAddSubDiff.yyy * u_xlat16_2.xyz + u_xlat1.xyz;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (112 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 0
  Vector4 unity_ParticleUVShiftData at 64
  Float unity_ParticleUseMeshColors at 80
  Vector4 _MainTex_ST at 96
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float unity_ParticleUseMeshColors;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 COLOR0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

template <int N> vec<uint, N> bitFieldExtractU(const vec<uint, N> width, const vec<uint, N> offset, const vec<uint, N> src)
{
	vec<bool, N> isWidthZero = (width == 0);
	vec<bool, N> needsClamp = ((width + offset) < 32);
	vec<uint, N> clampVersion = src << (32-(width+offset));
	clampVersion = clampVersion >> (32 - width);
	vec<uint, N> simpleVersion = src >> offset;
	vec<uint, N> res = select(simpleVersion, clampVersion, needsClamp);
	return select(res, vec<uint, N>(0), isWidthZero);
}; 
vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    float2 u_xlat1;
    int u_xlati1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float u_xlat6;
    float3 u_xlat7;
    uint3 u_xlatu7;
    bool u_xlatb12;
    float u_xlat13;
    u_xlat0.xyz = input.POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat2.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 1]));
    u_xlat3.x = u_xlat2.z;
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 2]));
    u_xlat3.y = u_xlat4.x;
    u_xlat7.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 2]));
    u_xlat3.z = u_xlat7.y;
    u_xlat5 = float4(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 3]));
    u_xlat1.x = as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x34 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.w = u_xlat5.y;
    u_xlat13 = dot(u_xlat3, u_xlat0);
    u_xlat3 = float4(u_xlat13) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.x = u_xlat2.y;
    u_xlat2.y = u_xlat4.z;
    u_xlat4.z = u_xlat7.x;
    u_xlat2.z = u_xlat7.z;
    u_xlat4.w = u_xlat5.x;
    u_xlat7.x = dot(u_xlat4, u_xlat0);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat7.xxxx, u_xlat3);
    u_xlat2.w = u_xlat5.z;
    u_xlat0.x = dot(u_xlat2, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.xxxx, u_xlat3);
    output.mtl_Position = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0 = input.COLOR0 + float4(-1.0, -1.0, -1.0, -1.0);
    u_xlat0 = fma(float4(VGlobals.unity_ParticleUseMeshColors), u_xlat0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlatu7.x = as_type<uint>(u_xlat5.w) & 0xffu;
    u_xlat2.x = float(u_xlatu7.x);
    u_xlatu7.xy = bitFieldExtractU(uint2(0x8u, 0x8u), uint2(0x8u, 0x10u), as_type<uint2>(u_xlat5.ww));
    u_xlatu7.z = as_type<uint>(u_xlat5.w) >> 0x18u;
    u_xlat2.yzw = float3(u_xlatu7.xyz);
    u_xlat0 = u_xlat0 * u_xlat2;
    output.COLOR0 = u_xlat0 * float4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat0.x = u_xlat1.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat6 = fma((-u_xlat0.x), VGlobals.unity_ParticleUVShiftData.y, u_xlat1.x);
    u_xlat6 = floor(u_xlat6);
    u_xlat1.x = u_xlat6 * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat6 = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = fma((-u_xlat0.x), VGlobals.unity_ParticleUVShiftData.w, u_xlat6);
    u_xlat0.xy = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat1.xy);
    u_xlatb12 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat0.xy = (bool(u_xlatb12)) ? u_xlat0.xy : input.TEXCOORD0.xy;
    output.TEXCOORD1.xy = fma(u_xlat0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "FGlobals" (32 bytes) on slot 0 {
  Vector4 _Color at 0
  Vector4 _ColorAddSubDiff at 16
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Color;
    float4 _ColorAddSubDiff;
};

struct Mtl_FragmentIn
{
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float3 u_xlat1;
    u_xlat0 = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy);
    u_xlat0 = u_xlat0 * FGlobals._Color;
    u_xlat0.xyz = fma(input.COLOR0.xyz, FGlobals._ColorAddSubDiff.xxx, u_xlat0.xyz);
    output.SV_Target0.w = u_xlat0.w * input.COLOR0.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + abs(u_xlat0.xyz);
    output.SV_Target0.xyz = fma(FGlobals._ColorAddSubDiff.yyy, u_xlat1.xyz, u_xlat0.xyz);
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (32 bytes) {
  Vector4 _Color at 0
  Vector4 _ColorAddSubDiff at 16
}
Constant Buffer "$Globals" (128 bytes) {
  Matrix4x4 unity_MatrixVP at 0
  ScalarInt unity_BaseInstanceID at 64
  Vector4 unity_ParticleUVShiftData at 80
  Float unity_ParticleUseMeshColors at 96
  Vector4 _MainTex_ST at 112
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require
#ifdef GL_ARB_shader_storage_buffer_object
#extension GL_ARB_shader_storage_buffer_object : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
uniform 	vec4 _MainTex_ST;
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in  vec4 in_POSITION0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
layout(location = 0) out vec4 vs_COLOR0;
layout(location = 1) out vec2 vs_TEXCOORD1;
vec4 u_xlat0;
uint u_xlatu0;
vec2 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
uvec3 u_xlatu7;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat3.x = u_xlat2.z;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat4.x;
    u_xlat7.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]));
    u_xlat3.z = u_xlat7.y;
    u_xlat5 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.w = u_xlat5.y;
    u_xlat13 = dot(u_xlat3, u_xlat0);
    u_xlat3 = vec4(u_xlat13) * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.x = u_xlat2.y;
    u_xlat2.y = u_xlat4.z;
    u_xlat4.z = u_xlat7.x;
    u_xlat2.z = u_xlat7.z;
    u_xlat4.w = u_xlat5.x;
    u_xlat7.x = dot(u_xlat4, u_xlat0);
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat7.xxxx + u_xlat3;
    u_xlat2.w = u_xlat5.z;
    u_xlat0.x = dot(u_xlat2, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.xxxx + u_xlat3;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlatu0 = floatBitsToUint(u_xlat5.w) & 255u;
    u_xlat0.x = float(u_xlatu0);
    u_xlatu7.x = bitfieldExtract(floatBitsToUint(u_xlat5.w), int(8), int(8));
    u_xlatu7.y = bitfieldExtract(floatBitsToUint(u_xlat5.w), int(16), int(8));
    u_xlatu7.z = floatBitsToUint(u_xlat5.w) >> 24u;
    u_xlat0.yzw = vec3(u_xlatu7.xyz);
    u_xlat0 = u_xlat0 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat2 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat2 = vec4(unity_ParticleUseMeshColors) * u_xlat2 + vec4(1.0, 1.0, 1.0, 1.0);
    vs_COLOR0 = u_xlat0 * u_xlat2;
    u_xlat0.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat6 = (-u_xlat0.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat6 = floor(u_xlat6);
    u_xlat1.x = u_xlat6 * unity_ParticleUVShiftData.z;
    u_xlat6 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat0.x) * unity_ParticleUVShiftData.w + u_xlat6;
    u_xlat0.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb12 = unity_ParticleUVShiftData.x!=0.0;
    u_xlat0.xy = (bool(u_xlatb12)) ? u_xlat0.xy : in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Color;
uniform 	vec4 _ColorAddSubDiff;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
layout(location = 0) in  vec4 vs_COLOR0;
layout(location = 1) in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat0 = u_xlat10_0 * _Color;
    u_xlat0.xyz = vs_COLOR0.xyz * _ColorAddSubDiff.xxx + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w * vs_COLOR0.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + abs(u_xlat0.xyz);
    SV_Target0.xyz = _ColorAddSubDiff.yyy * u_xlat1.xyz + u_xlat0.xyz;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Set 2D Texture "_MainTex" to set: 0, binding: 1, used in: Fragment  using sampler in set: 0, binding: 0, used in: Fragment 

Constant Buffer "PGlobals326058127" (32 bytes) on set: 1, binding: 0, used in: Fragment  {
  Vector4 _Color at 0
  Vector4 _ColorAddSubDiff at 16
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on set: 1, binding: 2, used in: Vertex  {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "VGlobals326058127" (112 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 0
  Vector4 _MainTex_ST at 96
  Vector4 unity_ParticleUVShiftData at 64
  Float unity_ParticleUseMeshColors at 80
}

Set Buffer  "unity_ParticleInstanceData" to set: 0, binding: 2, used in: Vertex 
Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 359

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 26 208 215 266 312 342
                              Name 342  "vs_TEXCOORD1"
                              Decorate 11 Location 0
                              Decorate 26 BuiltIn InstanceIndex
                              MemberDecorate 28 0 Offset 0
                              MemberDecorate 28 1 Offset 4
                              Decorate 28 Block
                              Decorate 30 DescriptorSet 1
                              Decorate 30 Binding 2
                              Decorate 38 ArrayStride 4
                              MemberDecorate 39 0 Offset 0
                              Decorate 40 ArrayStride 56
                              MemberDecorate 41 0 NonWritable
                              MemberDecorate 41 0 Offset 0
                              Decorate 41 BufferBlock
                              Decorate 43 DescriptorSet 0
                              Decorate 43 Binding 2
                              Decorate 157 ArrayStride 16
                              MemberDecorate 158 0 Offset 0
                              MemberDecorate 158 1 Offset 64
                              MemberDecorate 158 2 Offset 80
                              MemberDecorate 158 3 Offset 96
                              Decorate 158 Block
                              Decorate 160 DescriptorSet 1
                              Decorate 160 Binding 1
                              MemberDecorate 206 0 BuiltIn Position
                              MemberDecorate 206 1 BuiltIn PointSize
                              MemberDecorate 206 2 BuiltIn ClipDistance
                              Decorate 206 Block
                              Decorate 215 RelaxedPrecision
                              Decorate 215 Location 1
                              Decorate 216 RelaxedPrecision
                              Decorate 219 RelaxedPrecision
                              Decorate 266 Location 0
                              Decorate 312 Location 2
                              Decorate 342(vs_TEXCOORD1) Location 1
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              12:             TypeVector 6(float) 3
              17:    6(float) Constant 1065353216
              18:             TypeInt 32 0
              19:     18(int) Constant 3
              20:             TypePointer Private 6(float)
              22:             TypeInt 32 1
              23:             TypePointer Private 22(int)
              24:     23(ptr) Variable Private
              25:             TypePointer Input 22(int)
              26:     25(ptr) Variable Input
              28:             TypeStruct 22(int) 22(int)
              29:             TypePointer Uniform 28(struct)
              30:     29(ptr) Variable Uniform
              31:     22(int) Constant 0
              32:             TypePointer Uniform 22(int)
              36:      8(ptr) Variable Private
              37:     18(int) Constant 14
              38:             TypeArray 18(int) 37
              39:             TypeStruct 38
              40:             TypeRuntimeArray 39(struct)
              41:             TypeStruct 40
              42:             TypePointer Uniform 41(struct)
              43:     42(ptr) Variable Uniform
              45:     22(int) Constant 2
              46:             TypePointer Uniform 18(int)
              55:     22(int) Constant 1
              62:      8(ptr) Variable Private
              63:     18(int) Constant 2
              66:     18(int) Constant 0
              68:      8(ptr) Variable Private
              70:     22(int) Constant 4
              75:     22(int) Constant 3
              80:     22(int) Constant 5
              89:     18(int) Constant 1
              91:             TypePointer Private 12(fvec3)
              92:     91(ptr) Variable Private
              94:     22(int) Constant 6
              99:     22(int) Constant 7
             104:     22(int) Constant 8
             112:      8(ptr) Variable Private
             114:     22(int) Constant 9
             119:     22(int) Constant 10
             124:     22(int) Constant 11
             129:     22(int) Constant 12
             134:             TypeVector 6(float) 2
             135:             TypePointer Private 134(fvec2)
             136:    135(ptr) Variable Private
             138:     22(int) Constant 13
             150:     20(ptr) Variable Private
             156:     18(int) Constant 4
             157:             TypeArray 7(fvec4) 156
             158:             TypeStruct 157 7(fvec4) 6(float) 7(fvec4)
             159:             TypePointer Uniform 158(struct)
             160:    159(ptr) Variable Uniform
             161:             TypePointer Uniform 7(fvec4)
             205:             TypeArray 6(float) 89
             206:             TypeStruct 7(fvec4) 6(float) 205
             207:             TypePointer Output 206(struct)
             208:    207(ptr) Variable Output
             213:             TypePointer Output 7(fvec4)
             215:     10(ptr) Variable Input
             217:    6(float) Constant 3212836864
             218:    7(fvec4) ConstantComposite 217 217 217 217
             220:             TypePointer Uniform 6(float)
             226:    7(fvec4) ConstantComposite 17 17 17 17
             228:             TypeVector 18(int) 3
             229:             TypePointer Private 228(ivec3)
             230:    229(ptr) Variable Private
             234:     18(int) Constant 255
             236:             TypePointer Private 18(int)
             250:     22(int) Constant 16
             256:     18(int) Constant 24
             266:    213(ptr) Variable Output
             268:    6(float) Constant 998277249
             269:    7(fvec4) ConstantComposite 268 268 268 268
             281:     20(ptr) Variable Private
             311:             TypePointer Input 134(fvec2)
             312:    311(ptr) Variable Input
             322:             TypeBool
             323:             TypePointer Private 322(bool)
             324:    323(ptr) Variable Private
             327:    6(float) Constant 0
             330:             TypePointer Function 134(fvec2)
             341:             TypePointer Output 134(fvec2)
342(vs_TEXCOORD1):    341(ptr) Variable Output
             353:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
             331:    330(ptr) Variable Function
              13:    7(fvec4) Load 11
              14:   12(fvec3) VectorShuffle 13 13 0 1 2
              15:    7(fvec4) Load 9
              16:    7(fvec4) VectorShuffle 15 14 4 5 6 3
                              Store 9 16
              21:     20(ptr) AccessChain 9 19
                              Store 21 17
              27:     22(int) Load 26
              33:     32(ptr) AccessChain 30 31
              34:     22(int) Load 33
              35:     22(int) IAdd 27 34
                              Store 24 35
              44:     22(int) Load 24
              47:     46(ptr) AccessChain 43 31 44 31 45
              48:     18(int) Load 47
              49:    6(float) Bitcast 48
              50:     22(int) Load 24
              51:     46(ptr) AccessChain 43 31 50 31 31
              52:     18(int) Load 51
              53:    6(float) Bitcast 52
              54:     22(int) Load 24
              56:     46(ptr) AccessChain 43 31 54 31 55
              57:     18(int) Load 56
              58:    6(float) Bitcast 57
              59:   12(fvec3) CompositeConstruct 49 53 58
              60:    7(fvec4) Load 36
              61:    7(fvec4) VectorShuffle 60 59 4 5 6 3
                              Store 36 61
              64:     20(ptr) AccessChain 36 63
              65:    6(float) Load 64
              67:     20(ptr) AccessChain 62 66
                              Store 67 65
              69:     22(int) Load 24
              71:     46(ptr) AccessChain 43 31 69 31 70
              72:     18(int) Load 71
              73:    6(float) Bitcast 72
              74:     22(int) Load 24
              76:     46(ptr) AccessChain 43 31 74 31 75
              77:     18(int) Load 76
              78:    6(float) Bitcast 77
              79:     22(int) Load 24
              81:     46(ptr) AccessChain 43 31 79 31 80
              82:     18(int) Load 81
              83:    6(float) Bitcast 82
              84:   12(fvec3) CompositeConstruct 73 78 83
              85:    7(fvec4) Load 68
              86:    7(fvec4) VectorShuffle 85 84 4 5 6 3
                              Store 68 86
              87:     20(ptr) AccessChain 68 66
              88:    6(float) Load 87
              90:     20(ptr) AccessChain 62 89
                              Store 90 88
              93:     22(int) Load 24
              95:     46(ptr) AccessChain 43 31 93 31 94
              96:     18(int) Load 95
              97:    6(float) Bitcast 96
              98:     22(int) Load 24
             100:     46(ptr) AccessChain 43 31 98 31 99
             101:     18(int) Load 100
             102:    6(float) Bitcast 101
             103:     22(int) Load 24
             105:     46(ptr) AccessChain 43 31 103 31 104
             106:     18(int) Load 105
             107:    6(float) Bitcast 106
             108:   12(fvec3) CompositeConstruct 97 102 107
                              Store 92 108
             109:     20(ptr) AccessChain 92 89
             110:    6(float) Load 109
             111:     20(ptr) AccessChain 62 63
                              Store 111 110
             113:     22(int) Load 24
             115:     46(ptr) AccessChain 43 31 113 31 114
             116:     18(int) Load 115
             117:    6(float) Bitcast 116
             118:     22(int) Load 24
             120:     46(ptr) AccessChain 43 31 118 31 119
             121:     18(int) Load 120
             122:    6(float) Bitcast 121
             123:     22(int) Load 24
             125:     46(ptr) AccessChain 43 31 123 31 124
             126:     18(int) Load 125
             127:    6(float) Bitcast 126
             128:     22(int) Load 24
             130:     46(ptr) AccessChain 43 31 128 31 129
             131:     18(int) Load 130
             132:    6(float) Bitcast 131
             133:    7(fvec4) CompositeConstruct 117 122 127 132
                              Store 112 133
             137:     22(int) Load 24
             139:     46(ptr) AccessChain 43 31 137 31 138
             140:     18(int) Load 139
             141:    6(float) Bitcast 140
             142:     20(ptr) AccessChain 136 66
                              Store 142 141
             143:     20(ptr) AccessChain 136 66
             144:    6(float) Load 143
             145:    6(float) ExtInst 1(GLSL.std.450) 8(Floor) 144
             146:     20(ptr) AccessChain 136 66
                              Store 146 145
             147:     20(ptr) AccessChain 112 89
             148:    6(float) Load 147
             149:     20(ptr) AccessChain 62 19
                              Store 149 148
             151:    7(fvec4) Load 62
             152:    7(fvec4) Load 9
             153:    6(float) Dot 151 152
                              Store 150 153
             154:    6(float) Load 150
             155:    7(fvec4) CompositeConstruct 154 154 154 154
             162:    161(ptr) AccessChain 160 31 55
             163:    7(fvec4) Load 162
             164:    7(fvec4) FMul 155 163
                              Store 62 164
             165:     20(ptr) AccessChain 36 89
             166:    6(float) Load 165
             167:     20(ptr) AccessChain 68 66
                              Store 167 166
             168:     20(ptr) AccessChain 68 63
             169:    6(float) Load 168
             170:     20(ptr) AccessChain 36 89
                              Store 170 169
             171:     20(ptr) AccessChain 92 66
             172:    6(float) Load 171
             173:     20(ptr) AccessChain 68 63
                              Store 173 172
             174:     20(ptr) AccessChain 92 63
             175:    6(float) Load 174
             176:     20(ptr) AccessChain 36 63
                              Store 176 175
             177:     20(ptr) AccessChain 112 66
             178:    6(float) Load 177
             179:     20(ptr) AccessChain 68 19
                              Store 179 178
             180:    7(fvec4) Load 68
             181:    7(fvec4) Load 9
             182:    6(float) Dot 180 181
             183:     20(ptr) AccessChain 92 66
                              Store 183 182
             184:    161(ptr) AccessChain 160 31 31
             185:    7(fvec4) Load 184
             186:   12(fvec3) Load 92
             187:    7(fvec4) VectorShuffle 186 186 0 0 0 0
             188:    7(fvec4) FMul 185 187
             189:    7(fvec4) Load 62
             190:    7(fvec4) FAdd 188 189
                              Store 62 190
             191:     20(ptr) AccessChain 112 63
             192:    6(float) Load 191
             193:     20(ptr) AccessChain 36 19
                              Store 193 192
             194:    7(fvec4) Load 36
             195:    7(fvec4) Load 9
             196:    6(float) Dot 194 195
             197:     20(ptr) AccessChain 9 66
                              Store 197 196
             198:    161(ptr) AccessChain 160 31 45
             199:    7(fvec4) Load 198
             200:    7(fvec4) Load 9
             201:    7(fvec4) VectorShuffle 200 200 0 0 0 0
             202:    7(fvec4) FMul 199 201
             203:    7(fvec4) Load 62
             204:    7(fvec4) FAdd 202 203
                              Store 9 204
             209:    7(fvec4) Load 9
             210:    161(ptr) AccessChain 160 31 75
             211:    7(fvec4) Load 210
             212:    7(fvec4) FAdd 209 211
             214:    213(ptr) AccessChain 208 31
                              Store 214 212
             216:    7(fvec4) Load 215
             219:    7(fvec4) FAdd 216 218
                              Store 9 219
             221:    220(ptr) AccessChain 160 45
             222:    6(float) Load 221
             223:    7(fvec4) CompositeConstruct 222 222 222 222
             224:    7(fvec4) Load 9
             225:    7(fvec4) FMul 223 224
             227:    7(fvec4) FAdd 225 226
                              Store 9 227
             231:     20(ptr) AccessChain 112 19
             232:    6(float) Load 231
             233:     18(int) Bitcast 232
             235:     18(int) BitwiseAnd 233 234
             237:    236(ptr) AccessChain 230 66
                              Store 237 235
             238:    236(ptr) AccessChain 230 66
             239:     18(int) Load 238
             240:    6(float) ConvertUToF 239
             241:     20(ptr) AccessChain 36 66
                              Store 241 240
             242:     20(ptr) AccessChain 112 19
             243:    6(float) Load 242
             244:     18(int) Bitcast 243
             245:     18(int) BitFieldUExtract 244 104 104
             246:    236(ptr) AccessChain 230 66
                              Store 246 245
             247:     20(ptr) AccessChain 112 19
             248:    6(float) Load 247
             249:     18(int) Bitcast 248
             251:     18(int) BitFieldUExtract 249 250 104
             252:    236(ptr) AccessChain 230 89
                              Store 252 251
             253:     20(ptr) AccessChain 112 19
             254:    6(float) Load 253
             255:     18(int) Bitcast 254
             257:     18(int) ShiftRightLogical 255 256
             258:    236(ptr) AccessChain 230 63
                              Store 258 257
             259:  228(ivec3) Load 230
             260:   12(fvec3) ConvertUToF 259
             261:    7(fvec4) Load 36
             262:    7(fvec4) VectorShuffle 261 260 0 4 5 6
                              Store 36 262
             263:    7(fvec4) Load 9
             264:    7(fvec4) Load 36
             265:    7(fvec4) FMul 263 264
                              Store 9 265
             267:    7(fvec4) Load 9
             270:    7(fvec4) FMul 267 269
                              Store 266 270
             271:     20(ptr) AccessChain 136 66
             272:    6(float) Load 271
             273:    220(ptr) AccessChain 160 55 89
             274:    6(float) Load 273
             275:    6(float) FDiv 272 274
             276:     20(ptr) AccessChain 9 66
                              Store 276 275
             277:     20(ptr) AccessChain 9 66
             278:    6(float) Load 277
             279:    6(float) ExtInst 1(GLSL.std.450) 8(Floor) 278
             280:     20(ptr) AccessChain 9 66
                              Store 280 279
             282:     20(ptr) AccessChain 9 66
             283:    6(float) Load 282
             284:    6(float) FNegate 283
             285:    220(ptr) AccessChain 160 55 89
             286:    6(float) Load 285
             287:    6(float) FMul 284 286
             288:     20(ptr) AccessChain 136 66
             289:    6(float) Load 288
             290:    6(float) FAdd 287 289
                              Store 281 290
             291:    6(float) Load 281
             292:    6(float) ExtInst 1(GLSL.std.450) 8(Floor) 291
                              Store 281 292
             293:    6(float) Load 281
             294:    220(ptr) AccessChain 160 55 63
             295:    6(float) Load 294
             296:    6(float) FMul 293 295
             297:     20(ptr) AccessChain 136 66
                              Store 297 296
             298:    220(ptr) AccessChain 160 55 19
             299:    6(float) Load 298
             300:    6(float) FNegate 299
             301:    6(float) FAdd 300 17
                              Store 281 301
             302:     20(ptr) AccessChain 9 66
             303:    6(float) Load 302
             304:    6(float) FNegate 303
             305:    220(ptr) AccessChain 160 55 19
             306:    6(float) Load 305
             307:    6(float) FMul 304 306
             308:    6(float) Load 281
             309:    6(float) FAdd 307 308
             310:     20(ptr) AccessChain 136 89
                              Store 310 309
             313:  134(fvec2) Load 312
             314:    161(ptr) AccessChain 160 55
             315:    7(fvec4) Load 314
             316:  134(fvec2) VectorShuffle 315 315 2 3
             317:  134(fvec2) FMul 313 316
             318:  134(fvec2) Load 136
             319:  134(fvec2) FAdd 317 318
             320:    7(fvec4) Load 9
             321:    7(fvec4) VectorShuffle 320 319 4 5 2 3
                              Store 9 321
             325:    220(ptr) AccessChain 160 55 66
             326:    6(float) Load 325
             328:   322(bool) FOrdNotEqual 326 327
                              Store 324 328
             329:   322(bool) Load 324
                              SelectionMerge 333 None
                              BranchConditional 329 332 336
             332:               Label
             334:    7(fvec4)   Load 9
             335:  134(fvec2)   VectorShuffle 334 334 0 1
                                Store 331 335
                                Branch 333
             336:               Label
             337:  134(fvec2)   Load 312
                                Store 331 337
                                Branch 333
             333:             Label
             338:  134(fvec2) Load 331
             339:    7(fvec4) Load 9
             340:    7(fvec4) VectorShuffle 339 338 4 5 2 3
                              Store 9 340
             343:    7(fvec4) Load 9
             344:  134(fvec2) VectorShuffle 343 343 0 1
             345:    161(ptr) AccessChain 160 75
             346:    7(fvec4) Load 345
             347:  134(fvec2) VectorShuffle 346 346 0 1
             348:  134(fvec2) FMul 344 347
             349:    161(ptr) AccessChain 160 75
             350:    7(fvec4) Load 349
             351:  134(fvec2) VectorShuffle 350 350 2 3
             352:  134(fvec2) FAdd 348 351
                              Store 342(vs_TEXCOORD1) 352
             354:    353(ptr) AccessChain 208 31 89
             355:    6(float) Load 354
             356:    6(float) FNegate 355
             357:    353(ptr) AccessChain 208 31 89
                              Store 357 356
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 82

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 22 40 62
                              ExecutionMode 4 OriginUpperLeft
                              Name 22  "vs_TEXCOORD1"
                              Decorate 9 RelaxedPrecision
                              Decorate 12 RelaxedPrecision
                              Decorate 12 DescriptorSet 0
                              Decorate 12 Binding 1
                              Decorate 13 RelaxedPrecision
                              Decorate 16 RelaxedPrecision
                              Decorate 16 DescriptorSet 0
                              Decorate 16 Binding 0
                              Decorate 17 RelaxedPrecision
                              Decorate 22(vs_TEXCOORD1) Location 1
                              Decorate 25 RelaxedPrecision
                              Decorate 26 RelaxedPrecision
                              MemberDecorate 27 0 RelaxedPrecision
                              MemberDecorate 27 0 Offset 0
                              MemberDecorate 27 1 RelaxedPrecision
                              MemberDecorate 27 1 Offset 16
                              Decorate 27 Block
                              Decorate 29 DescriptorSet 1
                              Decorate 29 Binding 0
                              Decorate 34 RelaxedPrecision
                              Decorate 35 RelaxedPrecision
                              Decorate 40 Location 0
                              Decorate 45 RelaxedPrecision
                              Decorate 46 RelaxedPrecision
                              Decorate 48 RelaxedPrecision
                              Decorate 49 RelaxedPrecision
                              Decorate 56 RelaxedPrecision
                              Decorate 62 RelaxedPrecision
                              Decorate 62 Location 0
                              Decorate 66 RelaxedPrecision
                              Decorate 73 RelaxedPrecision
                              Decorate 74 RelaxedPrecision
                              Decorate 75 RelaxedPrecision
                              Decorate 76 RelaxedPrecision
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypeImage 6(float) 2D sampled format:Unknown
              11:             TypePointer UniformConstant 10
              12:     11(ptr) Variable UniformConstant
              14:             TypeSampler
              15:             TypePointer UniformConstant 14
              16:     15(ptr) Variable UniformConstant
              18:             TypeSampledImage 10
              20:             TypeVector 6(float) 2
              21:             TypePointer Input 20(fvec2)
22(vs_TEXCOORD1):     21(ptr) Variable Input
              25:      8(ptr) Variable Private
              27:             TypeStruct 7(fvec4) 7(fvec4)
              28:             TypePointer Uniform 27(struct)
              29:     28(ptr) Variable Uniform
              30:             TypeInt 32 1
              31:     30(int) Constant 0
              32:             TypePointer Uniform 7(fvec4)
              36:             TypeVector 6(float) 3
              37:             TypePointer Private 36(fvec3)
              38:     37(ptr) Variable Private
              39:             TypePointer Input 7(fvec4)
              40:     39(ptr) Variable Input
              43:     30(int) Constant 1
              51:             TypePointer Private 6(float)
              52:     51(ptr) Variable Private
              53:             TypeInt 32 0
              54:     53(int) Constant 3
              57:             TypePointer Input 6(float)
              61:             TypePointer Output 7(fvec4)
              62:     61(ptr) Variable Output
              64:             TypePointer Output 6(float)
              66:     37(ptr) Variable Private
               4:           2 Function None 3
               5:             Label
              13:          10 Load 12
              17:          14 Load 16
              19:          18 SampledImage 13 17
              23:   20(fvec2) Load 22(vs_TEXCOORD1)
              24:    7(fvec4) ImageSampleImplicitLod 19 23
                              Store 9 24
              26:    7(fvec4) Load 9
              33:     32(ptr) AccessChain 29 31
              34:    7(fvec4) Load 33
              35:    7(fvec4) FMul 26 34
                              Store 25 35
              41:    7(fvec4) Load 40
              42:   36(fvec3) VectorShuffle 41 41 0 1 2
              44:     32(ptr) AccessChain 29 43
              45:    7(fvec4) Load 44
              46:   36(fvec3) VectorShuffle 45 45 0 0 0
              47:   36(fvec3) FMul 42 46
              48:    7(fvec4) Load 25
              49:   36(fvec3) VectorShuffle 48 48 0 1 2
              50:   36(fvec3) FAdd 47 49
                              Store 38 50
              55:     51(ptr) AccessChain 25 54
              56:    6(float) Load 55
              58:     57(ptr) AccessChain 40 54
              59:    6(float) Load 58
              60:    6(float) FMul 56 59
                              Store 52 60
              63:    6(float) Load 52
              65:     64(ptr) AccessChain 62 54
                              Store 65 63
              67:   36(fvec3) Load 38
              68:   36(fvec3) FNegate 67
              69:   36(fvec3) Load 38
              70:   36(fvec3) ExtInst 1(GLSL.std.450) 4(FAbs) 69
              71:   36(fvec3) FAdd 68 70
                              Store 66 71
              72:     32(ptr) AccessChain 29 43
              73:    7(fvec4) Load 72
              74:   36(fvec3) VectorShuffle 73 73 1 1 1
              75:   36(fvec3) Load 66
              76:   36(fvec3) FMul 74 75
              77:   36(fvec3) Load 38
              78:   36(fvec3) FAdd 76 77
              79:    7(fvec4) Load 62
              80:    7(fvec4) VectorShuffle 79 78 4 5 6 3
                              Store 62 80
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON _EMISSION 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON _FADING_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 33 math, 6 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "$Globals" (224 bytes) on slot 0 {
  Vector4 unity_ParticleUVShiftData at 64
  Float unity_ParticleUseMeshColors at 80
  Vector4 _MainTex_ST at 96
}
Constant Buffer "UnityPerCamera" (144 bytes) on slot 1 {
  Vector4 _ProjectionParams at 80
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 2 {
  Matrix4x4 unity_MatrixV at 144
  Matrix4x4 unity_MatrixVP at 272
}
Constant Buffer "UnityDrawCallInfo" (16 bytes) on slot 3 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float       
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
// SV_InstanceID            0   x           4   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xy          2     NONE   float   xy  
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
//
      vs_5_0
      dcl_globalFlags refactoringAllowed
      dcl_constantbuffer CB0[7], immediateIndexed
      dcl_constantbuffer CB1[6], immediateIndexed
      dcl_constantbuffer CB2[21], immediateIndexed
      dcl_constantbuffer CB3[1], immediateIndexed
      dcl_resource_structured t0, 56
      dcl_input v0.xyz
      dcl_input v2.xyzw
      dcl_input v3.xy
      dcl_input_sgv v4.x, instance_id
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyzw
      dcl_output o2.xy
      dcl_output o3.xyzw
      dcl_temps 6
   0: mov r0.xyz, v0.xyzx
   1: mov r0.w, l(1.000000)
   2: iadd r1.x, v4.x, cb3[0].x
   3: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r2.xyz, r1.x, l(0), t0.zxyx
   4: mov r3.x, r2.z
   5: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r4.xyz, r1.x, l(12), t0.yxzx
   6: mov r3.y, r4.x
   7: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r1.yzw, r1.x, l(24), t0.xxyz
   8: mov r3.z, r1.z
   9: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r5.xyzw, r1.x, l(36), t0.xyzw
  10: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r1.x, r1.x, l(52), t0.xxxx
  11: round_ni r1.x, r1.x
  12: mov r3.w, r5.y
  13: dp4 r1.z, r3.xyzw, r0.xyzw
  14: mul r3.xyzw, r1.zzzz, cb2[18].xyzw
  15: mul r1.z, r1.z, cb2[10].z
  16: mov r4.x, r2.y
  17: mov r2.y, r4.z
  18: mov r4.z, r1.y
  19: mov r2.z, r1.w
  20: mov r4.w, r5.x
  21: dp4 r1.y, r4.xyzw, r0.xyzw
  22: mad r3.xyzw, cb2[17].xyzw, r1.yyyy, r3.xyzw
  23: mad r1.y, cb2[9].z, r1.y, r1.z
  24: mov r2.w, r5.z
  25: dp4 r0.x, r2.xyzw, r0.xyzw
  26: mad r2.xyzw, cb2[19].xyzw, r0.xxxx, r3.xyzw
  27: mad r0.x, cb2[11].z, r0.x, r1.y
  28: add r0.x, r0.x, cb2[12].z
  29: mov o3.z, -r0.x
  30: add r0.xyzw, r2.xyzw, cb2[20].xyzw
  31: mov o0.xyzw, r0.xyzw
  32: and r0.z, r5.w, l(255)
  33: utof r2.x, r0.z
  34: ubfe r1.yz, l(0, 8, 8, 0), l(0, 8, 16, 0), r5.wwww
  35: ushr r0.z, r5.w, l(24)
  36: utof r2.w, r0.z
  37: utof r2.yz, r1.yyzy
  38: mul r2.xyzw, r2.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
  39: add r3.xyzw, v2.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
  40: mad r3.xyzw, cb0[5].xxxx, r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  41: mul o1.xyzw, r2.xyzw, r3.xyzw
  42: div r0.z, r1.x, cb0[4].y
  43: round_ni r0.z, r0.z
  44: mad r1.x, -r0.z, cb0[4].y, r1.x
  45: round_ni r1.x, r1.x
  46: mul r1.x, r1.x, cb0[4].z
  47: add r1.z, -cb0[4].w, l(1.000000)
  48: mad r1.y, -r0.z, cb0[4].w, r1.z
  49: mad r1.xy, v3.xyxx, cb0[4].zwzz, r1.xyxx
  50: ne r0.z, cb0[4].x, l(0.000000)
  51: movc r1.xy, r0.zzzz, r1.xyxx, v3.xyxx
  52: mad o2.xy, r1.xyxx, cb0[6].xyxx, cb0[6].zwzz
  53: mul r0.y, r0.y, cb1[5].x
  54: mul r1.xzw, r0.xxwy, l(0.500000, 0.000000, 0.500000, 0.500000)
  55: mov o3.w, r0.w
  56: add o3.xy, r1.zzzz, r1.xwxx
  57: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 10 math, 2 temp registers, 2 textures
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_EmissionMap" to slot 1

Constant Buffer "$Globals" (224 bytes) on slot 0 {
  Vector4 _Color at 112
  Vector3 _EmissionColor at 132
  Vector4 _CameraFadeParams at 176
  Vector4 _ColorAddSubDiff at 208
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xy          2     NONE   float   xy  
// TEXCOORD                 3   xyzw        3     NONE   float     z 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_5_0
      dcl_globalFlags refactoringAllowed
      dcl_constantbuffer CB0[14], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_input_ps linear v1.xyzw
      dcl_input_ps linear v2.xy
      dcl_input_ps linear v3.z
      dcl_output o0.xyzw
      dcl_temps 2
   0: sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s0
   1: mul r0.xyzw, r0.xyzw, cb0[7].xyzw
   2: mad r0.xyz, v1.xyzx, cb0[13].xxxx, r0.xyzx
   3: mul r0.w, r0.w, v1.w
   4: add r1.xyz, -r0.xyzx, |r0.xyzx|
   5: mad r0.xyz, cb0[13].yyyy, r1.xyzx, r0.xyzx
   6: sample_indexable(texture2d)(float,float,float,float) r1.xyz, v2.xyxx, t1.xyzw, s1
   7: mul r1.xyz, r1.xyzx, cb0[8].yzwy
   8: add r1.w, v3.z, -cb0[11].x
   9: mul_sat r1.w, r1.w, cb0[11].y
  10: mad o0.xyz, r1.xyzx, r1.wwww, r0.xyzx
  11: mul o0.w, r0.w, r1.w
  12: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON _EMISSION 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON _FADING_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_EmissionMap" to slot 1

Constant Buffer "$Globals" (64 bytes) {
  Vector4 _Color at 0
  Vector3 _EmissionColor at 16
  Vector4 _CameraFadeParams at 32
  Vector4 _ColorAddSubDiff at 48
}
Constant Buffer "$Globals" (208 bytes) {
  Matrix4x4 unity_MatrixV at 16
  Matrix4x4 unity_MatrixVP at 80
  Vector4 _ProjectionParams at 0
  ScalarInt unity_BaseInstanceID at 144
  Vector4 unity_ParticleUVShiftData at 160
  Float unity_ParticleUseMeshColors at 176
  Vector4 _MainTex_ST at 192
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
uniform 	vec4 _MainTex_ST;
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
layout(location = 0) out highp vec4 vs_COLOR0;
layout(location = 1) out highp vec2 vs_TEXCOORD1;
layout(location = 2) out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat7;
uvec2 u_xlatu7;
float u_xlat12;
uint u_xlatu12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat3.x = u_xlat2.z;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat4.x;
    u_xlat7.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]));
    u_xlat3.z = u_xlat7.y;
    u_xlat5 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.w = u_xlat5.y;
    u_xlat13 = dot(u_xlat3, u_xlat0);
    u_xlat3 = vec4(u_xlat13) * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat13 = u_xlat13 * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = u_xlat2.y;
    u_xlat2.y = u_xlat4.z;
    u_xlat4.z = u_xlat7.x;
    u_xlat2.z = u_xlat7.z;
    u_xlat4.w = u_xlat5.x;
    u_xlat7.x = dot(u_xlat4, u_xlat0);
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat7.xxxx + u_xlat3;
    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat7.x + u_xlat13;
    u_xlat2.w = u_xlat5.z;
    u_xlat0.x = dot(u_xlat2, u_xlat0);
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.xxxx + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.x + u_xlat7.x;
    u_xlat0.x = u_xlat0.x + hlslcc_mtx4x4unity_MatrixV[3].z;
    vs_TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat0;
    u_xlat2 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat2 = vec4(unity_ParticleUseMeshColors) * u_xlat2 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu12 = floatBitsToUint(u_xlat5.w) & 255u;
    u_xlat3.x = float(u_xlatu12);
    u_xlatu7.x = bitfieldExtract(floatBitsToUint(u_xlat5.w), int(8), int(8));
    u_xlatu7.y = bitfieldExtract(floatBitsToUint(u_xlat5.w), int(16), int(8));
    u_xlatu12 = floatBitsToUint(u_xlat5.w) >> 24u;
    u_xlat3.w = float(u_xlatu12);
    u_xlat3.yz = vec2(u_xlatu7.xy);
    u_xlat2 = u_xlat2 * u_xlat3;
    vs_COLOR0 = u_xlat2 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat12 = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat12 = floor(u_xlat12);
    u_xlat1.x = (-u_xlat12) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_ParticleUVShiftData.z;
    u_xlat13 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat12) * unity_ParticleUVShiftData.w + u_xlat13;
    u_xlat1.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb12 = unity_ParticleUVShiftData.x!=0.0;
    u_xlat1.xy = (bool(u_xlatb12)) ? u_xlat1.xy : in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.w = u_xlat0.w;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _Color;
uniform 	mediump vec3 _EmissionColor;
uniform 	vec4 _CameraFadeParams;
uniform 	mediump vec4 _ColorAddSubDiff;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;
layout(location = 0) in highp vec4 vs_COLOR0;
layout(location = 1) in highp vec2 vs_TEXCOORD1;
layout(location = 2) in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat13;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat16_0 = u_xlat16_0 * _Color;
    u_xlat1.xyz = vs_COLOR0.xyz * _ColorAddSubDiff.xxx + u_xlat16_0.xyz;
    u_xlat13 = u_xlat16_0.w * vs_COLOR0.w;
    u_xlat16_2.xyz = (-u_xlat1.xyz) + abs(u_xlat1.xyz);
    u_xlat16_2.xyz = _ColorAddSubDiff.yyy * u_xlat16_2.xyz + u_xlat1.xyz;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(_EmissionColor.x, _EmissionColor.y, _EmissionColor.z);
    u_xlat1.x = vs_TEXCOORD3.z + (-_CameraFadeParams.x);
    u_xlat1.x = u_xlat1.x * _CameraFadeParams.y;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat1.xxx + u_xlat16_2.xyz;
    u_xlat0.w = u_xlat1.x * u_xlat13;
    SV_Target0 = u_xlat0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON _EMISSION 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON _FADING_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (192 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 16
  Matrix4x4 unity_MatrixVP at 80
  Vector4 _ProjectionParams at 0
  Vector4 unity_ParticleUVShiftData at 144
  Float unity_ParticleUseMeshColors at 160
  Vector4 _MainTex_ST at 176
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float unity_ParticleUseMeshColors;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 COLOR0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
};

template <int N> vec<uint, N> bitFieldExtractU(const vec<uint, N> width, const vec<uint, N> offset, const vec<uint, N> src)
{
	vec<bool, N> isWidthZero = (width == 0);
	vec<bool, N> needsClamp = ((width + offset) < 32);
	vec<uint, N> clampVersion = src << (32-(width+offset));
	clampVersion = clampVersion >> (32 - width);
	vec<uint, N> simpleVersion = src >> offset;
	vec<uint, N> res = select(simpleVersion, clampVersion, needsClamp);
	return select(res, vec<uint, N>(0), isWidthZero);
}; 
vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    int u_xlati1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat7;
    uint2 u_xlatu7;
    float u_xlat12;
    uint u_xlatu12;
    bool u_xlatb12;
    float u_xlat13;
    u_xlat0.xyz = input.POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat2.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 1]));
    u_xlat3.x = u_xlat2.z;
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 2]));
    u_xlat3.y = u_xlat4.x;
    u_xlat7.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 2]));
    u_xlat3.z = u_xlat7.y;
    u_xlat5 = float4(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 3]));
    u_xlat1.x = as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x34 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.w = u_xlat5.y;
    u_xlat13 = dot(u_xlat3, u_xlat0);
    u_xlat3 = float4(u_xlat13) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat13 = u_xlat13 * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = u_xlat2.y;
    u_xlat2.y = u_xlat4.z;
    u_xlat4.z = u_xlat7.x;
    u_xlat2.z = u_xlat7.z;
    u_xlat4.w = u_xlat5.x;
    u_xlat7.x = dot(u_xlat4, u_xlat0);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat7.xxxx, u_xlat3);
    u_xlat7.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat7.x, u_xlat13);
    u_xlat2.w = u_xlat5.z;
    u_xlat0.x = dot(u_xlat2, u_xlat0);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.xxxx, u_xlat3);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat0.x, u_xlat7.x);
    u_xlat0.x = u_xlat0.x + VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z;
    output.TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0 = u_xlat2 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    output.mtl_Position = u_xlat0;
    u_xlat2 = input.COLOR0 + float4(-1.0, -1.0, -1.0, -1.0);
    u_xlat2 = fma(float4(VGlobals.unity_ParticleUseMeshColors), u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlatu12 = as_type<uint>(u_xlat5.w) & 0xffu;
    u_xlat3.x = float(u_xlatu12);
    u_xlatu7.xy = bitFieldExtractU(uint2(0x8u, 0x8u), uint2(0x8u, 0x10u), as_type<uint2>(u_xlat5.ww));
    u_xlatu12 = as_type<uint>(u_xlat5.w) >> 0x18u;
    u_xlat3.w = float(u_xlatu12);
    u_xlat3.yz = float2(u_xlatu7.xy);
    u_xlat2 = u_xlat2 * u_xlat3;
    output.COLOR0 = u_xlat2 * float4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat12 = u_xlat1.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat12 = floor(u_xlat12);
    u_xlat1.x = fma((-u_xlat12), VGlobals.unity_ParticleUVShiftData.y, u_xlat1.x);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat13 = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = fma((-u_xlat12), VGlobals.unity_ParticleUVShiftData.w, u_xlat13);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat1.xy);
    u_xlatb12 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat1.xy = (bool(u_xlatb12)) ? u_xlat1.xy : input.TEXCOORD0.xy;
    output.TEXCOORD1.xy = fma(u_xlat1.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat0.y = u_xlat0.y * VGlobals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD3.w = u_xlat0.w;
    output.TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_EmissionMap" to slot 1

Constant Buffer "FGlobals" (64 bytes) on slot 0 {
  Vector4 _Color at 0
  Vector3 _EmissionColor at 16
  Vector4 _CameraFadeParams at 32
  Vector4 _ColorAddSubDiff at 48
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Color;
    float3 _EmissionColor;
    float4 _CameraFadeParams;
    float4 _ColorAddSubDiff;
};

struct Mtl_FragmentIn
{
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_EmissionMap [[ sampler (1) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float3 u_xlat1;
    float u_xlat6;
    float u_xlat7;
    u_xlat0 = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy);
    u_xlat0 = u_xlat0 * FGlobals._Color;
    u_xlat0.xyz = fma(input.COLOR0.xyz, FGlobals._ColorAddSubDiff.xxx, u_xlat0.xyz);
    u_xlat6 = u_xlat0.w * input.COLOR0.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + abs(u_xlat0.xyz);
    u_xlat0.xyz = fma(FGlobals._ColorAddSubDiff.yyy, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD1.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._EmissionColor.xxyz.yzw;
    u_xlat7 = input.TEXCOORD3.z + (-FGlobals._CameraFadeParams.x);
    u_xlat7 = u_xlat7 * FGlobals._CameraFadeParams.y;
    u_xlat7 = clamp(u_xlat7, 0.0f, 1.0f);
    output.SV_Target0.xyz = fma(u_xlat1.xyz, float3(u_xlat7), u_xlat0.xyz);
    output.SV_Target0.w = u_xlat6 * u_xlat7;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON _EMISSION 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON _FADING_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_EmissionMap" to slot 1

Constant Buffer "$Globals" (64 bytes) {
  Vector4 _Color at 0
  Vector3 _EmissionColor at 16
  Vector4 _CameraFadeParams at 32
  Vector4 _ColorAddSubDiff at 48
}
Constant Buffer "$Globals" (208 bytes) {
  Matrix4x4 unity_MatrixV at 16
  Matrix4x4 unity_MatrixVP at 80
  Vector4 _ProjectionParams at 0
  ScalarInt unity_BaseInstanceID at 144
  Vector4 unity_ParticleUVShiftData at 160
  Float unity_ParticleUseMeshColors at 176
  Vector4 _MainTex_ST at 192
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require
#ifdef GL_ARB_shader_storage_buffer_object
#extension GL_ARB_shader_storage_buffer_object : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
uniform 	vec4 _MainTex_ST;
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in  vec4 in_POSITION0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
layout(location = 0) out vec4 vs_COLOR0;
layout(location = 1) out vec2 vs_TEXCOORD1;
layout(location = 2) out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat7;
uvec2 u_xlatu7;
float u_xlat12;
uint u_xlatu12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat3.x = u_xlat2.z;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat4.x;
    u_xlat7.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]));
    u_xlat3.z = u_xlat7.y;
    u_xlat5 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.w = u_xlat5.y;
    u_xlat13 = dot(u_xlat3, u_xlat0);
    u_xlat3 = vec4(u_xlat13) * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat13 = u_xlat13 * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = u_xlat2.y;
    u_xlat2.y = u_xlat4.z;
    u_xlat4.z = u_xlat7.x;
    u_xlat2.z = u_xlat7.z;
    u_xlat4.w = u_xlat5.x;
    u_xlat7.x = dot(u_xlat4, u_xlat0);
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat7.xxxx + u_xlat3;
    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat7.x + u_xlat13;
    u_xlat2.w = u_xlat5.z;
    u_xlat0.x = dot(u_xlat2, u_xlat0);
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.xxxx + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.x + u_xlat7.x;
    u_xlat0.x = u_xlat0.x + hlslcc_mtx4x4unity_MatrixV[3].z;
    vs_TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat0;
    u_xlatu12 = floatBitsToUint(u_xlat5.w) & 255u;
    u_xlat2.x = float(u_xlatu12);
    u_xlatu7.x = bitfieldExtract(floatBitsToUint(u_xlat5.w), int(8), int(8));
    u_xlatu7.y = bitfieldExtract(floatBitsToUint(u_xlat5.w), int(16), int(8));
    u_xlatu12 = floatBitsToUint(u_xlat5.w) >> 24u;
    u_xlat2.w = float(u_xlatu12);
    u_xlat2.yz = vec2(u_xlatu7.xy);
    u_xlat2 = u_xlat2 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat3 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat3 = vec4(unity_ParticleUseMeshColors) * u_xlat3 + vec4(1.0, 1.0, 1.0, 1.0);
    vs_COLOR0 = u_xlat2 * u_xlat3;
    u_xlat12 = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat12 = floor(u_xlat12);
    u_xlat1.x = (-u_xlat12) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_ParticleUVShiftData.z;
    u_xlat13 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat12) * unity_ParticleUVShiftData.w + u_xlat13;
    u_xlat1.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb12 = unity_ParticleUVShiftData.x!=0.0;
    u_xlat1.xy = (bool(u_xlatb12)) ? u_xlat1.xy : in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.w = u_xlat0.w;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Color;
uniform 	vec3 _EmissionColor;
uniform 	vec4 _CameraFadeParams;
uniform 	vec4 _ColorAddSubDiff;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _EmissionMap;
layout(location = 0) in  vec4 vs_COLOR0;
layout(location = 1) in  vec2 vs_TEXCOORD1;
layout(location = 2) in  vec4 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
vec3 u_xlat10_1;
float u_xlat6;
float u_xlat7;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat0 = u_xlat10_0 * _Color;
    u_xlat0.xyz = vs_COLOR0.xyz * _ColorAddSubDiff.xxx + u_xlat0.xyz;
    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + abs(u_xlat0.xyz);
    u_xlat0.xyz = _ColorAddSubDiff.yyy * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat10_1.xyz = texture(_EmissionMap, vs_TEXCOORD1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_EmissionColor.x, _EmissionColor.y, _EmissionColor.z);
    u_xlat7 = vs_TEXCOORD3.z + (-_CameraFadeParams.x);
    u_xlat7 = u_xlat7 * _CameraFadeParams.y;
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat7) + u_xlat0.xyz;
    SV_Target0.w = u_xlat6 * u_xlat7;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON _EMISSION 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON _FADING_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Set 2D Texture "_EmissionMap" to set: 0, binding: 3, used in: Fragment  using sampler in set: 0, binding: 1, used in: Fragment 
Set 2D Texture "_MainTex" to set: 0, binding: 2, used in: Fragment  using sampler in set: 0, binding: 0, used in: Fragment 

Constant Buffer "PGlobals1992852134" (64 bytes) on set: 1, binding: 0, used in: Fragment  {
  Vector4 _CameraFadeParams at 32
  Vector4 _Color at 0
  Vector4 _ColorAddSubDiff at 48
  Vector3 _EmissionColor at 16
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on set: 1, binding: 2, used in: Vertex  {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "VGlobals1992852134" (192 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixV at 16
  Matrix4x4 unity_MatrixVP at 80
  Vector4 _MainTex_ST at 176
  Vector4 _ProjectionParams at 0
  Vector4 unity_ParticleUVShiftData at 144
  Float unity_ParticleUseMeshColors at 160
}

Set Buffer  "unity_ParticleInstanceData" to set: 0, binding: 4, used in: Vertex 
Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 416

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 26 233 246 249 301 346 377
                              Name 233  "vs_TEXCOORD3"
                              Name 377  "vs_TEXCOORD1"
                              Decorate 11 Location 0
                              Decorate 26 BuiltIn InstanceIndex
                              MemberDecorate 28 0 Offset 0
                              MemberDecorate 28 1 Offset 4
                              Decorate 28 Block
                              Decorate 30 DescriptorSet 1
                              Decorate 30 Binding 2
                              Decorate 38 ArrayStride 4
                              MemberDecorate 39 0 Offset 0
                              Decorate 40 ArrayStride 56
                              MemberDecorate 41 0 NonWritable
                              MemberDecorate 41 0 Offset 0
                              Decorate 41 BufferBlock
                              Decorate 43 DescriptorSet 0
                              Decorate 43 Binding 4
                              Decorate 155 ArrayStride 16
                              Decorate 156 ArrayStride 16
                              MemberDecorate 157 0 Offset 0
                              MemberDecorate 157 1 Offset 16
                              MemberDecorate 157 2 Offset 80
                              MemberDecorate 157 3 Offset 144
                              MemberDecorate 157 4 Offset 160
                              MemberDecorate 157 5 Offset 176
                              Decorate 157 Block
                              Decorate 159 DescriptorSet 1
                              Decorate 159 Binding 1
                              Decorate 233(vs_TEXCOORD3) Location 2
                              MemberDecorate 244 0 BuiltIn Position
                              MemberDecorate 244 1 BuiltIn PointSize
                              MemberDecorate 244 2 BuiltIn ClipDistance
                              Decorate 244 Block
                              Decorate 249 RelaxedPrecision
                              Decorate 249 Location 1
                              Decorate 250 RelaxedPrecision
                              Decorate 253 RelaxedPrecision
                              Decorate 301 Location 0
                              Decorate 346 Location 2
                              Decorate 377(vs_TEXCOORD1) Location 1
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              12:             TypeVector 6(float) 3
              17:    6(float) Constant 1065353216
              18:             TypeInt 32 0
              19:     18(int) Constant 3
              20:             TypePointer Private 6(float)
              22:             TypeInt 32 1
              23:             TypePointer Private 22(int)
              24:     23(ptr) Variable Private
              25:             TypePointer Input 22(int)
              26:     25(ptr) Variable Input
              28:             TypeStruct 22(int) 22(int)
              29:             TypePointer Uniform 28(struct)
              30:     29(ptr) Variable Uniform
              31:     22(int) Constant 0
              32:             TypePointer Uniform 22(int)
              36:      8(ptr) Variable Private
              37:     18(int) Constant 14
              38:             TypeArray 18(int) 37
              39:             TypeStruct 38
              40:             TypeRuntimeArray 39(struct)
              41:             TypeStruct 40
              42:             TypePointer Uniform 41(struct)
              43:     42(ptr) Variable Uniform
              45:     22(int) Constant 2
              46:             TypePointer Uniform 18(int)
              55:     22(int) Constant 1
              62:      8(ptr) Variable Private
              63:     18(int) Constant 2
              66:     18(int) Constant 0
              68:      8(ptr) Variable Private
              70:     22(int) Constant 4
              75:     22(int) Constant 3
              80:     22(int) Constant 5
              89:     18(int) Constant 1
              91:             TypePointer Private 12(fvec3)
              92:     91(ptr) Variable Private
              94:     22(int) Constant 6
              99:     22(int) Constant 7
             104:     22(int) Constant 8
             112:      8(ptr) Variable Private
             114:     22(int) Constant 9
             119:     22(int) Constant 10
             124:     22(int) Constant 11
             129:     22(int) Constant 12
             134:      8(ptr) Variable Private
             136:     22(int) Constant 13
             148:     20(ptr) Variable Private
             154:     18(int) Constant 4
             155:             TypeArray 7(fvec4) 154
             156:             TypeArray 7(fvec4) 154
             157:             TypeStruct 7(fvec4) 155 156 7(fvec4) 6(float) 7(fvec4)
             158:             TypePointer Uniform 157(struct)
             159:    158(ptr) Variable Uniform
             160:             TypePointer Uniform 7(fvec4)
             165:             TypePointer Uniform 6(float)
             232:             TypePointer Output 7(fvec4)
233(vs_TEXCOORD3):    232(ptr) Variable Output
             237:             TypePointer Output 6(float)
             243:             TypeArray 6(float) 89
             244:             TypeStruct 7(fvec4) 6(float) 243
             245:             TypePointer Output 244(struct)
             246:    245(ptr) Variable Output
             249:     10(ptr) Variable Input
             251:    6(float) Constant 3212836864
             252:    7(fvec4) ConstantComposite 251 251 251 251
             259:    7(fvec4) ConstantComposite 17 17 17 17
             261:             TypePointer Private 18(int)
             262:    261(ptr) Variable Private
             266:     18(int) Constant 255
             271:             TypeVector 18(int) 2
             272:             TypePointer Private 271(ivec2)
             273:    272(ptr) Variable Private
             282:     22(int) Constant 16
             288:     18(int) Constant 24
             294:             TypeVector 6(float) 2
             301:    232(ptr) Variable Output
             303:    6(float) Constant 998277249
             304:    7(fvec4) ConstantComposite 303 303 303 303
             306:     20(ptr) Variable Private
             345:             TypePointer Input 294(fvec2)
             346:    345(ptr) Variable Input
             357:             TypeBool
             358:             TypePointer Private 357(bool)
             359:    358(ptr) Variable Private
             362:    6(float) Constant 0
             365:             TypePointer Function 294(fvec2)
             376:             TypePointer Output 294(fvec2)
377(vs_TEXCOORD1):    376(ptr) Variable Output
             396:    6(float) Constant 1056964608
             397:   12(fvec3) ConstantComposite 396 396 396
               4:           2 Function None 3
               5:             Label
             366:    365(ptr) Variable Function
              13:    7(fvec4) Load 11
              14:   12(fvec3) VectorShuffle 13 13 0 1 2
              15:    7(fvec4) Load 9
              16:    7(fvec4) VectorShuffle 15 14 4 5 6 3
                              Store 9 16
              21:     20(ptr) AccessChain 9 19
                              Store 21 17
              27:     22(int) Load 26
              33:     32(ptr) AccessChain 30 31
              34:     22(int) Load 33
              35:     22(int) IAdd 27 34
                              Store 24 35
              44:     22(int) Load 24
              47:     46(ptr) AccessChain 43 31 44 31 45
              48:     18(int) Load 47
              49:    6(float) Bitcast 48
              50:     22(int) Load 24
              51:     46(ptr) AccessChain 43 31 50 31 31
              52:     18(int) Load 51
              53:    6(float) Bitcast 52
              54:     22(int) Load 24
              56:     46(ptr) AccessChain 43 31 54 31 55
              57:     18(int) Load 56
              58:    6(float) Bitcast 57
              59:   12(fvec3) CompositeConstruct 49 53 58
              60:    7(fvec4) Load 36
              61:    7(fvec4) VectorShuffle 60 59 4 5 6 3
                              Store 36 61
              64:     20(ptr) AccessChain 36 63
              65:    6(float) Load 64
              67:     20(ptr) AccessChain 62 66
                              Store 67 65
              69:     22(int) Load 24
              71:     46(ptr) AccessChain 43 31 69 31 70
              72:     18(int) Load 71
              73:    6(float) Bitcast 72
              74:     22(int) Load 24
              76:     46(ptr) AccessChain 43 31 74 31 75
              77:     18(int) Load 76
              78:    6(float) Bitcast 77
              79:     22(int) Load 24
              81:     46(ptr) AccessChain 43 31 79 31 80
              82:     18(int) Load 81
              83:    6(float) Bitcast 82
              84:   12(fvec3) CompositeConstruct 73 78 83
              85:    7(fvec4) Load 68
              86:    7(fvec4) VectorShuffle 85 84 4 5 6 3
                              Store 68 86
              87:     20(ptr) AccessChain 68 66
              88:    6(float) Load 87
              90:     20(ptr) AccessChain 62 89
                              Store 90 88
              93:     22(int) Load 24
              95:     46(ptr) AccessChain 43 31 93 31 94
              96:     18(int) Load 95
              97:    6(float) Bitcast 96
              98:     22(int) Load 24
             100:     46(ptr) AccessChain 43 31 98 31 99
             101:     18(int) Load 100
             102:    6(float) Bitcast 101
             103:     22(int) Load 24
             105:     46(ptr) AccessChain 43 31 103 31 104
             106:     18(int) Load 105
             107:    6(float) Bitcast 106
             108:   12(fvec3) CompositeConstruct 97 102 107
                              Store 92 108
             109:     20(ptr) AccessChain 92 89
             110:    6(float) Load 109
             111:     20(ptr) AccessChain 62 63
                              Store 111 110
             113:     22(int) Load 24
             115:     46(ptr) AccessChain 43 31 113 31 114
             116:     18(int) Load 115
             117:    6(float) Bitcast 116
             118:     22(int) Load 24
             120:     46(ptr) AccessChain 43 31 118 31 119
             121:     18(int) Load 120
             122:    6(float) Bitcast 121
             123:     22(int) Load 24
             125:     46(ptr) AccessChain 43 31 123 31 124
             126:     18(int) Load 125
             127:    6(float) Bitcast 126
             128:     22(int) Load 24
             130:     46(ptr) AccessChain 43 31 128 31 129
             131:     18(int) Load 130
             132:    6(float) Bitcast 131
             133:    7(fvec4) CompositeConstruct 117 122 127 132
                              Store 112 133
             135:     22(int) Load 24
             137:     46(ptr) AccessChain 43 31 135 31 136
             138:     18(int) Load 137
             139:    6(float) Bitcast 138
             140:     20(ptr) AccessChain 134 66
                              Store 140 139
             141:     20(ptr) AccessChain 134 66
             142:    6(float) Load 141
             143:    6(float) ExtInst 1(GLSL.std.450) 8(Floor) 142
             144:     20(ptr) AccessChain 134 66
                              Store 144 143
             145:     20(ptr) AccessChain 112 89
             146:    6(float) Load 145
             147:     20(ptr) AccessChain 62 19
                              Store 147 146
             149:    7(fvec4) Load 62
             150:    7(fvec4) Load 9
             151:    6(float) Dot 149 150
                              Store 148 151
             152:    6(float) Load 148
             153:    7(fvec4) CompositeConstruct 152 152 152 152
             161:    160(ptr) AccessChain 159 45 55
             162:    7(fvec4) Load 161
             163:    7(fvec4) FMul 153 162
                              Store 62 163
             164:    6(float) Load 148
             166:    165(ptr) AccessChain 159 55 55 63
             167:    6(float) Load 166
             168:    6(float) FMul 164 167
                              Store 148 168
             169:     20(ptr) AccessChain 36 89
             170:    6(float) Load 169
             171:     20(ptr) AccessChain 68 66
                              Store 171 170
             172:     20(ptr) AccessChain 68 63
             173:    6(float) Load 172
             174:     20(ptr) AccessChain 36 89
                              Store 174 173
             175:     20(ptr) AccessChain 92 66
             176:    6(float) Load 175
             177:     20(ptr) AccessChain 68 63
                              Store 177 176
             178:     20(ptr) AccessChain 92 63
             179:    6(float) Load 178
             180:     20(ptr) AccessChain 36 63
                              Store 180 179
             181:     20(ptr) AccessChain 112 66
             182:    6(float) Load 181
             183:     20(ptr) AccessChain 68 19
                              Store 183 182
             184:    7(fvec4) Load 68
             185:    7(fvec4) Load 9
             186:    6(float) Dot 184 185
             187:     20(ptr) AccessChain 92 66
                              Store 187 186
             188:    160(ptr) AccessChain 159 45 31
             189:    7(fvec4) Load 188
             190:   12(fvec3) Load 92
             191:    7(fvec4) VectorShuffle 190 190 0 0 0 0
             192:    7(fvec4) FMul 189 191
             193:    7(fvec4) Load 62
             194:    7(fvec4) FAdd 192 193
                              Store 62 194
             195:    165(ptr) AccessChain 159 55 31 63
             196:    6(float) Load 195
             197:     20(ptr) AccessChain 92 66
             198:    6(float) Load 197
             199:    6(float) FMul 196 198
             200:    6(float) Load 148
             201:    6(float) FAdd 199 200
             202:     20(ptr) AccessChain 92 66
                              Store 202 201
             203:     20(ptr) AccessChain 112 63
             204:    6(float) Load 203
             205:     20(ptr) AccessChain 36 19
                              Store 205 204
             206:    7(fvec4) Load 36
             207:    7(fvec4) Load 9
             208:    6(float) Dot 206 207
             209:     20(ptr) AccessChain 9 66
                              Store 209 208
             210:    160(ptr) AccessChain 159 45 45
             211:    7(fvec4) Load 210
             212:    7(fvec4) Load 9
             213:    7(fvec4) VectorShuffle 212 212 0 0 0 0
             214:    7(fvec4) FMul 211 213
             215:    7(fvec4) Load 62
             216:    7(fvec4) FAdd 214 215
                              Store 36 216
             217:    165(ptr) AccessChain 159 55 45 63
             218:    6(float) Load 217
             219:     20(ptr) AccessChain 9 66
             220:    6(float) Load 219
             221:    6(float) FMul 218 220
             222:     20(ptr) AccessChain 92 66
             223:    6(float) Load 222
             224:    6(float) FAdd 221 223
             225:     20(ptr) AccessChain 9 66
                              Store 225 224
             226:     20(ptr) AccessChain 9 66
             227:    6(float) Load 226
             228:    165(ptr) AccessChain 159 55 75 63
             229:    6(float) Load 228
             230:    6(float) FAdd 227 229
             231:     20(ptr) AccessChain 9 66
                              Store 231 230
             234:     20(ptr) AccessChain 9 66
             235:    6(float) Load 234
             236:    6(float) FNegate 235
             238:    237(ptr) AccessChain 233(vs_TEXCOORD3) 63
                              Store 238 236
             239:    7(fvec4) Load 36
             240:    160(ptr) AccessChain 159 45 75
             241:    7(fvec4) Load 240
             242:    7(fvec4) FAdd 239 241
                              Store 9 242
             247:    7(fvec4) Load 9
             248:    232(ptr) AccessChain 246 31
                              Store 248 247
             250:    7(fvec4) Load 249
             253:    7(fvec4) FAdd 250 252
                              Store 36 253
             254:    165(ptr) AccessChain 159 70
             255:    6(float) Load 254
             256:    7(fvec4) CompositeConstruct 255 255 255 255
             257:    7(fvec4) Load 36
             258:    7(fvec4) FMul 256 257
             260:    7(fvec4) FAdd 258 259
                              Store 36 260
             263:     20(ptr) AccessChain 112 19
             264:    6(float) Load 263
             265:     18(int) Bitcast 264
             267:     18(int) BitwiseAnd 265 266
                              Store 262 267
             268:     18(int) Load 262
             269:    6(float) ConvertUToF 268
             270:     20(ptr) AccessChain 62 66
                              Store 270 269
             274:     20(ptr) AccessChain 112 19
             275:    6(float) Load 274
             276:     18(int) Bitcast 275
             277:     18(int) BitFieldUExtract 276 104 104
             278:    261(ptr) AccessChain 273 66
                              Store 278 277
             279:     20(ptr) AccessChain 112 19
             280:    6(float) Load 279
             281:     18(int) Bitcast 280
             283:     18(int) BitFieldUExtract 281 282 104
             284:    261(ptr) AccessChain 273 89
                              Store 284 283
             285:     20(ptr) AccessChain 112 19
             286:    6(float) Load 285
             287:     18(int) Bitcast 286
             289:     18(int) ShiftRightLogical 287 288
                              Store 262 289
             290:     18(int) Load 262
             291:    6(float) ConvertUToF 290
             292:     20(ptr) AccessChain 62 19
                              Store 292 291
             293:  271(ivec2) Load 273
             295:  294(fvec2) ConvertUToF 293
             296:    7(fvec4) Load 62
             297:    7(fvec4) VectorShuffle 296 295 0 4 5 3
                              Store 62 297
             298:    7(fvec4) Load 36
             299:    7(fvec4) Load 62
             300:    7(fvec4) FMul 298 299
                              Store 36 300
             302:    7(fvec4) Load 36
             305:    7(fvec4) FMul 302 304
                              Store 301 305
             307:     20(ptr) AccessChain 134 66
             308:    6(float) Load 307
             309:    165(ptr) AccessChain 159 75 89
             310:    6(float) Load 309
             311:    6(float) FDiv 308 310
                              Store 306 311
             312:    6(float) Load 306
             313:    6(float) ExtInst 1(GLSL.std.450) 8(Floor) 312
                              Store 306 313
             314:    6(float) Load 306
             315:    6(float) FNegate 314
             316:    165(ptr) AccessChain 159 75 89
             317:    6(float) Load 316
             318:    6(float) FMul 315 317
             319:     20(ptr) AccessChain 134 66
             320:    6(float) Load 319
             321:    6(float) FAdd 318 320
             322:     20(ptr) AccessChain 134 66
                              Store 322 321
             323:     20(ptr) AccessChain 134 66
             324:    6(float) Load 323
             325:    6(float) ExtInst 1(GLSL.std.450) 8(Floor) 324
             326:     20(ptr) AccessChain 134 66
                              Store 326 325
             327:     20(ptr) AccessChain 134 66
             328:    6(float) Load 327
             329:    165(ptr) AccessChain 159 75 63
             330:    6(float) Load 329
             331:    6(float) FMul 328 330
             332:     20(ptr) AccessChain 134 66
                              Store 332 331
             333:    165(ptr) AccessChain 159 75 19
             334:    6(float) Load 333
             335:    6(float) FNegate 334
             336:    6(float) FAdd 335 17
                              Store 148 336
             337:    6(float) Load 306
             338:    6(float) FNegate 337
             339:    165(ptr) AccessChain 159 75 19
             340:    6(float) Load 339
             341:    6(float) FMul 338 340
             342:    6(float) Load 148
             343:    6(float) FAdd 341 342
             344:     20(ptr) AccessChain 134 89
                              Store 344 343
             347:  294(fvec2) Load 346
             348:    160(ptr) AccessChain 159 75
             349:    7(fvec4) Load 348
             350:  294(fvec2) VectorShuffle 349 349 2 3
             351:  294(fvec2) FMul 347 350
             352:    7(fvec4) Load 134
             353:  294(fvec2) VectorShuffle 352 352 0 1
             354:  294(fvec2) FAdd 351 353
             355:    7(fvec4) Load 134
             356:    7(fvec4) VectorShuffle 355 354 4 5 2 3
                              Store 134 356
             360:    165(ptr) AccessChain 159 75 66
             361:    6(float) Load 360
             363:   357(bool) FOrdNotEqual 361 362
                              Store 359 363
             364:   357(bool) Load 359
                              SelectionMerge 368 None
                              BranchConditional 364 367 371
             367:               Label
             369:    7(fvec4)   Load 134
             370:  294(fvec2)   VectorShuffle 369 369 0 1
                                Store 366 370
                                Branch 368
             371:               Label
             372:  294(fvec2)   Load 346
                                Store 366 372
                                Branch 368
             368:             Label
             373:  294(fvec2) Load 366
             374:    7(fvec4) Load 134
             375:    7(fvec4) VectorShuffle 374 373 4 5 2 3
                              Store 134 375
             378:    7(fvec4) Load 134
             379:  294(fvec2) VectorShuffle 378 378 0 1
             380:    160(ptr) AccessChain 159 80
             381:    7(fvec4) Load 380
             382:  294(fvec2) VectorShuffle 381 381 0 1
             383:  294(fvec2) FMul 379 382
             384:    160(ptr) AccessChain 159 80
             385:    7(fvec4) Load 384
             386:  294(fvec2) VectorShuffle 385 385 2 3
             387:  294(fvec2) FAdd 383 386
                              Store 377(vs_TEXCOORD1) 387
             388:     20(ptr) AccessChain 9 89
             389:    6(float) Load 388
             390:    165(ptr) AccessChain 159 31 66
             391:    6(float) Load 390
             392:    6(float) FMul 389 391
             393:     20(ptr) AccessChain 9 89
                              Store 393 392
             394:    7(fvec4) Load 9
             395:   12(fvec3) VectorShuffle 394 394 0 3 1
             398:   12(fvec3) FMul 395 397
             399:    7(fvec4) Load 134
             400:    7(fvec4) VectorShuffle 399 398 4 1 5 6
                              Store 134 400
             401:     20(ptr) AccessChain 9 19
             402:    6(float) Load 401
             403:    237(ptr) AccessChain 233(vs_TEXCOORD3) 19
                              Store 403 402
             404:    7(fvec4) Load 134
             405:  294(fvec2) VectorShuffle 404 404 2 2
             406:    7(fvec4) Load 134
             407:  294(fvec2) VectorShuffle 406 406 0 3
             408:  294(fvec2) FAdd 405 407
             409:    7(fvec4) Load 233(vs_TEXCOORD3)
             410:    7(fvec4) VectorShuffle 409 408 4 5 2 3
                              Store 233(vs_TEXCOORD3) 410
             411:    237(ptr) AccessChain 246 31 89
             412:    6(float) Load 411
             413:    6(float) FNegate 412
             414:    237(ptr) AccessChain 246 31 89
                              Store 414 413
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 137

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 22 40 98 134
                              ExecutionMode 4 OriginUpperLeft
                              Name 22  "vs_TEXCOORD1"
                              Name 98  "vs_TEXCOORD3"
                              Decorate 9 RelaxedPrecision
                              Decorate 12 RelaxedPrecision
                              Decorate 12 DescriptorSet 0
                              Decorate 12 Binding 2
                              Decorate 13 RelaxedPrecision
                              Decorate 16 RelaxedPrecision
                              Decorate 16 DescriptorSet 0
                              Decorate 16 Binding 0
                              Decorate 17 RelaxedPrecision
                              Decorate 22(vs_TEXCOORD1) Location 1
                              Decorate 25 RelaxedPrecision
                              Decorate 26 RelaxedPrecision
                              MemberDecorate 28 0 RelaxedPrecision
                              MemberDecorate 28 0 Offset 0
                              MemberDecorate 28 1 RelaxedPrecision
                              MemberDecorate 28 1 Offset 16
                              MemberDecorate 28 2 Offset 32
                              MemberDecorate 28 3 RelaxedPrecision
                              MemberDecorate 28 3 Offset 48
                              Decorate 28 Block
                              Decorate 30 DescriptorSet 1
                              Decorate 30 Binding 0
                              Decorate 35 RelaxedPrecision
                              Decorate 36 RelaxedPrecision
                              Decorate 40 Location 0
                              Decorate 45 RelaxedPrecision
                              Decorate 46 RelaxedPrecision
                              Decorate 48 RelaxedPrecision
                              Decorate 49 RelaxedPrecision
                              Decorate 56 RelaxedPrecision
                              Decorate 61 RelaxedPrecision
                              Decorate 68 RelaxedPrecision
                              Decorate 69 RelaxedPrecision
                              Decorate 70 RelaxedPrecision
                              Decorate 71 RelaxedPrecision
                              Decorate 74 RelaxedPrecision
                              Decorate 75 RelaxedPrecision
                              Decorate 75 DescriptorSet 0
                              Decorate 75 Binding 3
                              Decorate 76 RelaxedPrecision
                              Decorate 77 RelaxedPrecision
                              Decorate 77 DescriptorSet 0
                              Decorate 77 Binding 1
                              Decorate 78 RelaxedPrecision
                              Decorate 82 RelaxedPrecision
                              Decorate 83 RelaxedPrecision
                              Decorate 84 RelaxedPrecision
                              Decorate 89 RelaxedPrecision
                              Decorate 92 RelaxedPrecision
                              Decorate 95 RelaxedPrecision
                              Decorate 96 RelaxedPrecision
                              Decorate 97 RelaxedPrecision
                              Decorate 98(vs_TEXCOORD3) Location 2
                              Decorate 120 RelaxedPrecision
                              Decorate 124 RelaxedPrecision
                              Decorate 134 RelaxedPrecision
                              Decorate 134 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypeImage 6(float) 2D sampled format:Unknown
              11:             TypePointer UniformConstant 10
              12:     11(ptr) Variable UniformConstant
              14:             TypeSampler
              15:             TypePointer UniformConstant 14
              16:     15(ptr) Variable UniformConstant
              18:             TypeSampledImage 10
              20:             TypeVector 6(float) 2
              21:             TypePointer Input 20(fvec2)
22(vs_TEXCOORD1):     21(ptr) Variable Input
              25:      8(ptr) Variable Private
              27:             TypeVector 6(float) 3
              28:             TypeStruct 7(fvec4) 27(fvec3) 7(fvec4) 7(fvec4)
              29:             TypePointer Uniform 28(struct)
              30:     29(ptr) Variable Uniform
              31:             TypeInt 32 1
              32:     31(int) Constant 0
              33:             TypePointer Uniform 7(fvec4)
              37:             TypePointer Private 27(fvec3)
              38:     37(ptr) Variable Private
              39:             TypePointer Input 7(fvec4)
              40:     39(ptr) Variable Input
              43:     31(int) Constant 3
              51:             TypePointer Private 6(float)
              52:     51(ptr) Variable Private
              53:             TypeInt 32 0
              54:     53(int) Constant 3
              57:             TypePointer Input 6(float)
              61:     37(ptr) Variable Private
              74:     37(ptr) Variable Private
              75:     11(ptr) Variable UniformConstant
              77:     15(ptr) Variable UniformConstant
              83:     37(ptr) Variable Private
              85:     31(int) Constant 1
              86:     53(int) Constant 0
              87:             TypePointer Uniform 6(float)
              90:     53(int) Constant 1
              93:     53(int) Constant 2
98(vs_TEXCOORD3):     39(ptr) Variable Input
             101:     31(int) Constant 2
             115:    6(float) Constant 0
             116:    6(float) Constant 1065353216
             119:      8(ptr) Variable Private
             133:             TypePointer Output 7(fvec4)
             134:    133(ptr) Variable Output
               4:           2 Function None 3
               5:             Label
              13:          10 Load 12
              17:          14 Load 16
              19:          18 SampledImage 13 17
              23:   20(fvec2) Load 22(vs_TEXCOORD1)
              24:    7(fvec4) ImageSampleImplicitLod 19 23
                              Store 9 24
              26:    7(fvec4) Load 9
              34:     33(ptr) AccessChain 30 32
              35:    7(fvec4) Load 34
              36:    7(fvec4) FMul 26 35
                              Store 25 36
              41:    7(fvec4) Load 40
              42:   27(fvec3) VectorShuffle 41 41 0 1 2
              44:     33(ptr) AccessChain 30 43
              45:    7(fvec4) Load 44
              46:   27(fvec3) VectorShuffle 45 45 0 0 0
              47:   27(fvec3) FMul 42 46
              48:    7(fvec4) Load 25
              49:   27(fvec3) VectorShuffle 48 48 0 1 2
              50:   27(fvec3) FAdd 47 49
                              Store 38 50
              55:     51(ptr) AccessChain 25 54
              56:    6(float) Load 55
              58:     57(ptr) AccessChain 40 54
              59:    6(float) Load 58
              60:    6(float) FMul 56 59
                              Store 52 60
              62:   27(fvec3) Load 38
              63:   27(fvec3) FNegate 62
              64:   27(fvec3) Load 38
              65:   27(fvec3) ExtInst 1(GLSL.std.450) 4(FAbs) 64
              66:   27(fvec3) FAdd 63 65
                              Store 61 66
              67:     33(ptr) AccessChain 30 43
              68:    7(fvec4) Load 67
              69:   27(fvec3) VectorShuffle 68 68 1 1 1
              70:   27(fvec3) Load 61
              71:   27(fvec3) FMul 69 70
              72:   27(fvec3) Load 38
              73:   27(fvec3) FAdd 71 72
                              Store 61 73
              76:          10 Load 75
              78:          14 Load 77
              79:          18 SampledImage 76 78
              80:   20(fvec2) Load 22(vs_TEXCOORD1)
              81:    7(fvec4) ImageSampleImplicitLod 79 80
              82:   27(fvec3) VectorShuffle 81 81 0 1 2
                              Store 74 82
              84:   27(fvec3) Load 74
              88:     87(ptr) AccessChain 30 85 86
              89:    6(float) Load 88
              91:     87(ptr) AccessChain 30 85 90
              92:    6(float) Load 91
              94:     87(ptr) AccessChain 30 85 93
              95:    6(float) Load 94
              96:   27(fvec3) CompositeConstruct 89 92 95
              97:   27(fvec3) FMul 84 96
                              Store 83 97
              99:     57(ptr) AccessChain 98(vs_TEXCOORD3) 93
             100:    6(float) Load 99
             102:     87(ptr) AccessChain 30 101 86
             103:    6(float) Load 102
             104:    6(float) FNegate 103
             105:    6(float) FAdd 100 104
             106:     51(ptr) AccessChain 38 86
                              Store 106 105
             107:     51(ptr) AccessChain 38 86
             108:    6(float) Load 107
             109:     87(ptr) AccessChain 30 101 90
             110:    6(float) Load 109
             111:    6(float) FMul 108 110
             112:     51(ptr) AccessChain 38 86
                              Store 112 111
             113:     51(ptr) AccessChain 38 86
             114:    6(float) Load 113
             117:    6(float) ExtInst 1(GLSL.std.450) 43(FClamp) 114 115 116
             118:     51(ptr) AccessChain 38 86
                              Store 118 117
             120:   27(fvec3) Load 83
             121:   27(fvec3) Load 38
             122:   27(fvec3) VectorShuffle 121 121 0 0 0
             123:   27(fvec3) FMul 120 122
             124:   27(fvec3) Load 61
             125:   27(fvec3) FAdd 123 124
             126:    7(fvec4) Load 119
             127:    7(fvec4) VectorShuffle 126 125 4 5 6 3
                              Store 119 127
             128:     51(ptr) AccessChain 38 86
             129:    6(float) Load 128
             130:    6(float) Load 52
             131:    6(float) FMul 129 130
             132:     51(ptr) AccessChain 119 54
                              Store 132 131
             135:    7(fvec4) Load 119
                              Store 134 135
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: SOFTPARTICLES_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 18 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "$Globals" (176 bytes) on slot 0 {
  Vector4 _MainTex_ST at 64
}
Constant Buffer "UnityPerCamera" (144 bytes) on slot 1 {
  Vector4 _ProjectionParams at 80
}
Constant Buffer "UnityPerDraw" (176 bytes) on slot 2 {
  Matrix4x4 unity_ObjectToWorld at 0
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 3 {
  Matrix4x4 unity_MatrixV at 144
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float       
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xy          2     NONE   float   xy  
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
//
      vs_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_constantbuffer CB1[6], immediateIndexed
      dcl_constantbuffer CB2[4], immediateIndexed
      dcl_constantbuffer CB3[21], immediateIndexed
      dcl_input v0.xyz
      dcl_input v2.xyzw
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyzw
      dcl_output o2.xy
      dcl_output o3.xyzw
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb2[1].xyzw
   1: mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb2[2].xyzw, v0.zzzz, r0.xyzw
   3: add r0.xyzw, r0.xyzw, cb2[3].xyzw
   4: mul r1.xyzw, r0.yyyy, cb3[18].xyzw
   5: mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
   6: mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
   7: mad r1.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
   8: mov o0.xyzw, r1.xyzw
   9: mov o1.xyzw, v2.xyzw
  10: mad o2.xy, v3.xyxx, cb0[4].xyxx, cb0[4].zwzz
  11: mul r0.y, r0.y, cb3[10].z
  12: mad r0.x, cb3[9].z, r0.x, r0.y
  13: mad r0.x, cb3[11].z, r0.z, r0.x
  14: mad r0.x, cb3[12].z, r0.w, r0.x
  15: mov o3.z, -r0.x
  16: mul r0.x, r1.y, cb1[5].x
  17: mul r0.w, r0.x, l(0.500000)
  18: mul r0.xz, r1.xxwx, l(0.500000, 0.000000, 0.500000, 0.000000)
  19: mov o3.w, r1.w
  20: add o3.xy, r0.zzzz, r0.xwxx
  21: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 2 math, 1 temp registers, 1 textures
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (176 bytes) on slot 0 {
  Vector4 _Color at 80
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyz 
// TEXCOORD                 1   xy          2     NONE   float   xy  
// TEXCOORD                 3   xyzw        3     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[6], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v1.xyz
      dcl_input_ps linear v2.xy
      dcl_output o0.xyzw
      dcl_temps 1
   0: sample r0.xyzw, v2.xyxx, t0.xyzw, s0
   1: mul r0.xyz, r0.xyzx, cb0[5].xyzx
   2: mul o0.xyz, r0.xyzx, v1.xyzx
   3: mov o0.w, l(1.000000)
   4: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: SOFTPARTICLES_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles":
Shader Disassembly:
#ifdef VERTEX
#version 100

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying highp vec4 vs_COLOR0;
varying highp vec2 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD3.w = u_xlat1.w;
    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
varying highp vec4 vs_COLOR0;
varying highp vec2 vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
void main()
{
    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: SOFTPARTICLES_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (16 bytes) {
  Vector4 _Color at 0
}
Constant Buffer "$Globals" (224 bytes) {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_MatrixVP at 144
  Vector4 _ProjectionParams at 0
  Vector4 _MainTex_ST at 208
}

Shader Disassembly:
#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD3.w = u_xlat1.w;
    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _Color;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
mediump vec3 u_xlat16_1;
void main()
{
    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: SOFTPARTICLES_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (224 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_MatrixVP at 144
  Vector4 _ProjectionParams at 0
  Vector4 _MainTex_ST at 208
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 COLOR0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat2;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.mtl_Position = u_xlat1;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat2 = u_xlat0.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat0.x, u_xlat2);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat0.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat0.w, u_xlat0.x);
    output.TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0.x = u_xlat1.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * float2(0.5, 0.5);
    output.TEXCOORD3.w = u_xlat1.w;
    output.TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "FGlobals" (16 bytes) on slot 0 {
  Vector4 _Color at 0
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Color;
};

struct Mtl_FragmentIn
{
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: SOFTPARTICLES_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (16 bytes) {
  Vector4 _Color at 0
}
Constant Buffer "$Globals" (224 bytes) {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_MatrixVP at 144
  Vector4 _ProjectionParams at 0
  Vector4 _MainTex_ST at 208
}

Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
out vec4 vs_COLOR0;
out vec2 vs_TEXCOORD1;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD3.w = u_xlat1.w;
    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: SOFTPARTICLES_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Set 2D Texture "_MainTex" to set: 0, binding: 1, used in: Fragment  using sampler in set: 0, binding: 0, used in: Fragment 

Constant Buffer "PGlobals333338991" (16 bytes) on set: 1, binding: 0, used in: Fragment  {
  Vector4 _Color at 0
}
Constant Buffer "VGlobals333338991" (224 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_MatrixVP at 144
  Matrix4x4 unity_ObjectToWorld at 16
  Vector4 _MainTex_ST at 208
  Vector4 _ProjectionParams at 0
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 177

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 80 84 85 89 91 139
                              Name 89  "vs_TEXCOORD1"
                              Name 139  "vs_TEXCOORD3"
                              Decorate 11 Location 0
                              Decorate 16 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 Offset 16
                              MemberDecorate 19 2 Offset 80
                              MemberDecorate 19 3 Offset 144
                              MemberDecorate 19 4 Offset 208
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 1
                              MemberDecorate 78 0 BuiltIn Position
                              MemberDecorate 78 1 BuiltIn PointSize
                              MemberDecorate 78 2 BuiltIn ClipDistance
                              Decorate 78 Block
                              Decorate 84 Location 0
                              Decorate 85 RelaxedPrecision
                              Decorate 85 Location 1
                              Decorate 86 RelaxedPrecision
                              Decorate 89(vs_TEXCOORD1) Location 1
                              Decorate 91 Location 2
                              Decorate 139(vs_TEXCOORD3) Location 2
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              14:             TypeInt 32 0
              15:     14(int) Constant 4
              16:             TypeArray 7(fvec4) 15
              17:             TypeArray 7(fvec4) 15
              18:             TypeArray 7(fvec4) 15
              19:             TypeStruct 7(fvec4) 16 17 18 7(fvec4)
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 1
              24:             TypePointer Uniform 7(fvec4)
              28:     22(int) Constant 0
              36:     22(int) Constant 2
              45:     22(int) Constant 3
              49:      8(ptr) Variable Private
              76:     14(int) Constant 1
              77:             TypeArray 6(float) 76
              78:             TypeStruct 7(fvec4) 6(float) 77
              79:             TypePointer Output 78(struct)
              80:     79(ptr) Variable Output
              82:             TypePointer Output 7(fvec4)
              84:     82(ptr) Variable Output
              85:     10(ptr) Variable Input
              87:             TypeVector 6(float) 2
              88:             TypePointer Output 87(fvec2)
89(vs_TEXCOORD1):     88(ptr) Variable Output
              90:             TypePointer Input 87(fvec2)
              91:     90(ptr) Variable Input
              93:     22(int) Constant 4
             102:             TypePointer Private 6(float)
             103:    102(ptr) Variable Private
             106:     14(int) Constant 2
             107:             TypePointer Uniform 6(float)
             113:     14(int) Constant 0
             131:     14(int) Constant 3
139(vs_TEXCOORD3):     82(ptr) Variable Output
             143:             TypePointer Output 6(float)
             153:    6(float) Constant 1056964608
             158:   87(fvec2) ConstantComposite 153 153
               4:           2 Function None 3
               5:             Label
              12:    7(fvec4) Load 11
              13:    7(fvec4) VectorShuffle 12 12 1 1 1 1
              25:     24(ptr) AccessChain 21 23 23
              26:    7(fvec4) Load 25
              27:    7(fvec4) FMul 13 26
                              Store 9 27
              29:     24(ptr) AccessChain 21 23 28
              30:    7(fvec4) Load 29
              31:    7(fvec4) Load 11
              32:    7(fvec4) VectorShuffle 31 31 0 0 0 0
              33:    7(fvec4) FMul 30 32
              34:    7(fvec4) Load 9
              35:    7(fvec4) FAdd 33 34
                              Store 9 35
              37:     24(ptr) AccessChain 21 23 36
              38:    7(fvec4) Load 37
              39:    7(fvec4) Load 11
              40:    7(fvec4) VectorShuffle 39 39 2 2 2 2
              41:    7(fvec4) FMul 38 40
              42:    7(fvec4) Load 9
              43:    7(fvec4) FAdd 41 42
                              Store 9 43
              44:    7(fvec4) Load 9
              46:     24(ptr) AccessChain 21 23 45
              47:    7(fvec4) Load 46
              48:    7(fvec4) FAdd 44 47
                              Store 9 48
              50:    7(fvec4) Load 9
              51:    7(fvec4) VectorShuffle 50 50 1 1 1 1
              52:     24(ptr) AccessChain 21 45 23
              53:    7(fvec4) Load 52
              54:    7(fvec4) FMul 51 53
                              Store 49 54
              55:     24(ptr) AccessChain 21 45 28
              56:    7(fvec4) Load 55
              57:    7(fvec4) Load 9
              58:    7(fvec4) VectorShuffle 57 57 0 0 0 0
              59:    7(fvec4) FMul 56 58
              60:    7(fvec4) Load 49
              61:    7(fvec4) FAdd 59 60
                              Store 49 61
              62:     24(ptr) AccessChain 21 45 36
              63:    7(fvec4) Load 62
              64:    7(fvec4) Load 9
              65:    7(fvec4) VectorShuffle 64 64 2 2 2 2
              66:    7(fvec4) FMul 63 65
              67:    7(fvec4) Load 49
              68:    7(fvec4) FAdd 66 67
                              Store 49 68
              69:     24(ptr) AccessChain 21 45 45
              70:    7(fvec4) Load 69
              71:    7(fvec4) Load 9
              72:    7(fvec4) VectorShuffle 71 71 3 3 3 3
              73:    7(fvec4) FMul 70 72
              74:    7(fvec4) Load 49
              75:    7(fvec4) FAdd 73 74
                              Store 49 75
              81:    7(fvec4) Load 49
              83:     82(ptr) AccessChain 80 28
                              Store 83 81
              86:    7(fvec4) Load 85
                              Store 84 86
              92:   87(fvec2) Load 91
              94:     24(ptr) AccessChain 21 93
              95:    7(fvec4) Load 94
              96:   87(fvec2) VectorShuffle 95 95 0 1
              97:   87(fvec2) FMul 92 96
              98:     24(ptr) AccessChain 21 93
              99:    7(fvec4) Load 98
             100:   87(fvec2) VectorShuffle 99 99 2 3
             101:   87(fvec2) FAdd 97 100
                              Store 89(vs_TEXCOORD1) 101
             104:    102(ptr) AccessChain 9 76
             105:    6(float) Load 104
             108:    107(ptr) AccessChain 21 36 23 106
             109:    6(float) Load 108
             110:    6(float) FMul 105 109
                              Store 103 110
             111:    107(ptr) AccessChain 21 36 28 106
             112:    6(float) Load 111
             114:    102(ptr) AccessChain 9 113
             115:    6(float) Load 114
             116:    6(float) FMul 112 115
             117:    6(float) Load 103
             118:    6(float) FAdd 116 117
             119:    102(ptr) AccessChain 9 113
                              Store 119 118
             120:    107(ptr) AccessChain 21 36 36 106
             121:    6(float) Load 120
             122:    102(ptr) AccessChain 9 106
             123:    6(float) Load 122
             124:    6(float) FMul 121 123
             125:    102(ptr) AccessChain 9 113
             126:    6(float) Load 125
             127:    6(float) FAdd 124 126
             128:    102(ptr) AccessChain 9 113
                              Store 128 127
             129:    107(ptr) AccessChain 21 36 45 106
             130:    6(float) Load 129
             132:    102(ptr) AccessChain 9 131
             133:    6(float) Load 132
             134:    6(float) FMul 130 133
             135:    102(ptr) AccessChain 9 113
             136:    6(float) Load 135
             137:    6(float) FAdd 134 136
             138:    102(ptr) AccessChain 9 113
                              Store 138 137
             140:    102(ptr) AccessChain 9 113
             141:    6(float) Load 140
             142:    6(float) FNegate 141
             144:    143(ptr) AccessChain 139(vs_TEXCOORD3) 106
                              Store 144 142
             145:    102(ptr) AccessChain 49 76
             146:    6(float) Load 145
             147:    107(ptr) AccessChain 21 28 113
             148:    6(float) Load 147
             149:    6(float) FMul 146 148
             150:    102(ptr) AccessChain 9 113
                              Store 150 149
             151:    102(ptr) AccessChain 9 113
             152:    6(float) Load 151
             154:    6(float) FMul 152 153
             155:    102(ptr) AccessChain 9 131
                              Store 155 154
             156:    7(fvec4) Load 49
             157:   87(fvec2) VectorShuffle 156 156 0 3
             159:   87(fvec2) FMul 157 158
             160:    7(fvec4) Load 9
             161:    7(fvec4) VectorShuffle 160 159 4 1 5 3
                              Store 9 161
             162:    102(ptr) AccessChain 49 131
             163:    6(float) Load 162
             164:    143(ptr) AccessChain 139(vs_TEXCOORD3) 131
                              Store 164 163
             165:    7(fvec4) Load 9
             166:   87(fvec2) VectorShuffle 165 165 2 2
             167:    7(fvec4) Load 9
             168:   87(fvec2) VectorShuffle 167 167 0 3
             169:   87(fvec2) FAdd 166 168
             170:    7(fvec4) Load 139(vs_TEXCOORD3)
             171:    7(fvec4) VectorShuffle 170 169 4 5 2 3
                              Store 139(vs_TEXCOORD3) 171
             172:    143(ptr) AccessChain 80 28 76
             173:    6(float) Load 172
             174:    6(float) FNegate 173
             175:    143(ptr) AccessChain 80 28 76
                              Store 175 174
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 57

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 22 42 47
                              ExecutionMode 4 OriginUpperLeft
                              Name 22  "vs_TEXCOORD1"
                              Decorate 9 RelaxedPrecision
                              Decorate 12 RelaxedPrecision
                              Decorate 12 DescriptorSet 0
                              Decorate 12 Binding 1
                              Decorate 13 RelaxedPrecision
                              Decorate 16 RelaxedPrecision
                              Decorate 16 DescriptorSet 0
                              Decorate 16 Binding 0
                              Decorate 17 RelaxedPrecision
                              Decorate 22(vs_TEXCOORD1) Location 1
                              Decorate 26 RelaxedPrecision
                              Decorate 27 RelaxedPrecision
                              Decorate 28 RelaxedPrecision
                              MemberDecorate 29 0 RelaxedPrecision
                              MemberDecorate 29 0 Offset 0
                              Decorate 29 Block
                              Decorate 31 DescriptorSet 1
                              Decorate 31 Binding 0
                              Decorate 36 RelaxedPrecision
                              Decorate 37 RelaxedPrecision
                              Decorate 38 RelaxedPrecision
                              Decorate 40 RelaxedPrecision
                              Decorate 42 Location 0
                              Decorate 47 RelaxedPrecision
                              Decorate 47 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 3
               8:             TypePointer Private 7(fvec3)
               9:      8(ptr) Variable Private
              10:             TypeImage 6(float) 2D sampled format:Unknown
              11:             TypePointer UniformConstant 10
              12:     11(ptr) Variable UniformConstant
              14:             TypeSampler
              15:             TypePointer UniformConstant 14
              16:     15(ptr) Variable UniformConstant
              18:             TypeSampledImage 10
              20:             TypeVector 6(float) 2
              21:             TypePointer Input 20(fvec2)
22(vs_TEXCOORD1):     21(ptr) Variable Input
              24:             TypeVector 6(float) 4
              27:      8(ptr) Variable Private
              29:             TypeStruct 24(fvec4)
              30:             TypePointer Uniform 29(struct)
              31:     30(ptr) Variable Uniform
              32:             TypeInt 32 1
              33:     32(int) Constant 0
              34:             TypePointer Uniform 24(fvec4)
              39:      8(ptr) Variable Private
              41:             TypePointer Input 24(fvec4)
              42:     41(ptr) Variable Input
              46:             TypePointer Output 24(fvec4)
              47:     46(ptr) Variable Output
              51:    6(float) Constant 1065353216
              52:             TypeInt 32 0
              53:     52(int) Constant 3
              54:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              13:          10 Load 12
              17:          14 Load 16
              19:          18 SampledImage 13 17
              23:   20(fvec2) Load 22(vs_TEXCOORD1)
              25:   24(fvec4) ImageSampleImplicitLod 19 23
              26:    7(fvec3) VectorShuffle 25 25 0 1 2
                              Store 9 26
              28:    7(fvec3) Load 9
              35:     34(ptr) AccessChain 31 33
              36:   24(fvec4) Load 35
              37:    7(fvec3) VectorShuffle 36 36 0 1 2
              38:    7(fvec3) FMul 28 37
                              Store 27 38
              40:    7(fvec3) Load 27
              43:   24(fvec4) Load 42
              44:    7(fvec3) VectorShuffle 43 43 0 1 2
              45:    7(fvec3) FMul 40 44
                              Store 39 45
              48:    7(fvec3) Load 39
              49:   24(fvec4) Load 47
              50:   24(fvec4) VectorShuffle 49 48 4 5 6 3
                              Store 47 50
              55:     54(ptr) AccessChain 47 53
                              Store 55 51
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: SOFTPARTICLES_ON 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 18 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "$Globals" (176 bytes) on slot 0 {
  Vector4 _MainTex_ST at 64
}
Constant Buffer "UnityPerCamera" (144 bytes) on slot 1 {
  Vector4 _ProjectionParams at 80
}
Constant Buffer "UnityPerDraw" (176 bytes) on slot 2 {
  Matrix4x4 unity_ObjectToWorld at 0
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 3 {
  Matrix4x4 unity_MatrixV at 144
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float       
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xy          2     NONE   float   xy  
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
//
      vs_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_constantbuffer CB1[6], immediateIndexed
      dcl_constantbuffer CB2[4], immediateIndexed
      dcl_constantbuffer CB3[21], immediateIndexed
      dcl_input v0.xyz
      dcl_input v2.xyzw
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyzw
      dcl_output o2.xy
      dcl_output o3.xyzw
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb2[1].xyzw
   1: mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb2[2].xyzw, v0.zzzz, r0.xyzw
   3: add r0.xyzw, r0.xyzw, cb2[3].xyzw
   4: mul r1.xyzw, r0.yyyy, cb3[18].xyzw
   5: mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
   6: mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
   7: mad r1.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
   8: mov o0.xyzw, r1.xyzw
   9: mov o1.xyzw, v2.xyzw
  10: mad o2.xy, v3.xyxx, cb0[4].xyxx, cb0[4].zwzz
  11: mul r0.y, r0.y, cb3[10].z
  12: mad r0.x, cb3[9].z, r0.x, r0.y
  13: mad r0.x, cb3[11].z, r0.z, r0.x
  14: mad r0.x, cb3[12].z, r0.w, r0.x
  15: mov o3.z, -r0.x
  16: mul r0.x, r1.y, cb1[5].x
  17: mul r0.w, r0.x, l(0.500000)
  18: mul r0.xz, r1.xxwx, l(0.500000, 0.000000, 0.500000, 0.000000)
  19: mov o3.w, r1.w
  20: add o3.xy, r0.zzzz, r0.xwxx
  21: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 2 math, 1 temp registers, 1 textures
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (176 bytes) on slot 0 {
  Vector4 _Color at 80
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xy          2     NONE   float   xy  
// TEXCOORD                 3   xyzw        3     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[6], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v1.xyzw
      dcl_input_ps linear v2.xy
      dcl_output o0.xyzw
      dcl_temps 1
   0: sample r0.xyzw, v2.xyxx, t0.xyzw, s0
   1: mul r0.xyzw, r0.xyzw, cb0[5].xyzw
   2: mul o0.xyzw, r0.xyzw, v1.xyzw
   3: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: SOFTPARTICLES_ON 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles":
Shader Disassembly:
#ifdef VERTEX
#version 100

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying highp vec4 vs_COLOR0;
varying highp vec2 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD3.w = u_xlat1.w;
    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
varying highp vec4 vs_COLOR0;
varying highp vec2 vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    SV_Target0 = u_xlat0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: SOFTPARTICLES_ON 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (16 bytes) {
  Vector4 _Color at 0
}
Constant Buffer "$Globals" (224 bytes) {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_MatrixVP at 144
  Vector4 _ProjectionParams at 0
  Vector4 _MainTex_ST at 208
}

Shader Disassembly:
#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD3.w = u_xlat1.w;
    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _Color;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat16_0 = u_xlat16_0 * _Color;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    SV_Target0 = u_xlat0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: SOFTPARTICLES_ON 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (224 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_MatrixVP at 144
  Vector4 _ProjectionParams at 0
  Vector4 _MainTex_ST at 208
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 COLOR0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat2;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.mtl_Position = u_xlat1;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat2 = u_xlat0.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat0.x, u_xlat2);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat0.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat0.w, u_xlat0.x);
    output.TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0.x = u_xlat1.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * float2(0.5, 0.5);
    output.TEXCOORD3.w = u_xlat1.w;
    output.TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "FGlobals" (16 bytes) on slot 0 {
  Vector4 _Color at 0
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Color;
};

struct Mtl_FragmentIn
{
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    u_xlat0 = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy);
    u_xlat0 = u_xlat0 * FGlobals._Color;
    output.SV_Target0 = u_xlat0 * input.COLOR0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: SOFTPARTICLES_ON 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (16 bytes) {
  Vector4 _Color at 0
}
Constant Buffer "$Globals" (224 bytes) {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_MatrixVP at 144
  Vector4 _ProjectionParams at 0
  Vector4 _MainTex_ST at 208
}

Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
out vec4 vs_COLOR0;
out vec2 vs_TEXCOORD1;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD3.w = u_xlat1.w;
    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat0 = u_xlat10_0 * _Color;
    SV_Target0 = u_xlat0 * vs_COLOR0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: SOFTPARTICLES_ON 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Set 2D Texture "_MainTex" to set: 0, binding: 1, used in: Fragment  using sampler in set: 0, binding: 0, used in: Fragment 

Constant Buffer "PGlobals467937994" (16 bytes) on set: 1, binding: 0, used in: Fragment  {
  Vector4 _Color at 0
}
Constant Buffer "VGlobals467937994" (224 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_MatrixVP at 144
  Matrix4x4 unity_ObjectToWorld at 16
  Vector4 _MainTex_ST at 208
  Vector4 _ProjectionParams at 0
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 177

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 80 84 85 89 91 139
                              Name 89  "vs_TEXCOORD1"
                              Name 139  "vs_TEXCOORD3"
                              Decorate 11 Location 0
                              Decorate 16 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 Offset 16
                              MemberDecorate 19 2 Offset 80
                              MemberDecorate 19 3 Offset 144
                              MemberDecorate 19 4 Offset 208
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 1
                              MemberDecorate 78 0 BuiltIn Position
                              MemberDecorate 78 1 BuiltIn PointSize
                              MemberDecorate 78 2 BuiltIn ClipDistance
                              Decorate 78 Block
                              Decorate 84 Location 0
                              Decorate 85 RelaxedPrecision
                              Decorate 85 Location 1
                              Decorate 86 RelaxedPrecision
                              Decorate 89(vs_TEXCOORD1) Location 1
                              Decorate 91 Location 2
                              Decorate 139(vs_TEXCOORD3) Location 2
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              14:             TypeInt 32 0
              15:     14(int) Constant 4
              16:             TypeArray 7(fvec4) 15
              17:             TypeArray 7(fvec4) 15
              18:             TypeArray 7(fvec4) 15
              19:             TypeStruct 7(fvec4) 16 17 18 7(fvec4)
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 1
              24:             TypePointer Uniform 7(fvec4)
              28:     22(int) Constant 0
              36:     22(int) Constant 2
              45:     22(int) Constant 3
              49:      8(ptr) Variable Private
              76:     14(int) Constant 1
              77:             TypeArray 6(float) 76
              78:             TypeStruct 7(fvec4) 6(float) 77
              79:             TypePointer Output 78(struct)
              80:     79(ptr) Variable Output
              82:             TypePointer Output 7(fvec4)
              84:     82(ptr) Variable Output
              85:     10(ptr) Variable Input
              87:             TypeVector 6(float) 2
              88:             TypePointer Output 87(fvec2)
89(vs_TEXCOORD1):     88(ptr) Variable Output
              90:             TypePointer Input 87(fvec2)
              91:     90(ptr) Variable Input
              93:     22(int) Constant 4
             102:             TypePointer Private 6(float)
             103:    102(ptr) Variable Private
             106:     14(int) Constant 2
             107:             TypePointer Uniform 6(float)
             113:     14(int) Constant 0
             131:     14(int) Constant 3
139(vs_TEXCOORD3):     82(ptr) Variable Output
             143:             TypePointer Output 6(float)
             153:    6(float) Constant 1056964608
             158:   87(fvec2) ConstantComposite 153 153
               4:           2 Function None 3
               5:             Label
              12:    7(fvec4) Load 11
              13:    7(fvec4) VectorShuffle 12 12 1 1 1 1
              25:     24(ptr) AccessChain 21 23 23
              26:    7(fvec4) Load 25
              27:    7(fvec4) FMul 13 26
                              Store 9 27
              29:     24(ptr) AccessChain 21 23 28
              30:    7(fvec4) Load 29
              31:    7(fvec4) Load 11
              32:    7(fvec4) VectorShuffle 31 31 0 0 0 0
              33:    7(fvec4) FMul 30 32
              34:    7(fvec4) Load 9
              35:    7(fvec4) FAdd 33 34
                              Store 9 35
              37:     24(ptr) AccessChain 21 23 36
              38:    7(fvec4) Load 37
              39:    7(fvec4) Load 11
              40:    7(fvec4) VectorShuffle 39 39 2 2 2 2
              41:    7(fvec4) FMul 38 40
              42:    7(fvec4) Load 9
              43:    7(fvec4) FAdd 41 42
                              Store 9 43
              44:    7(fvec4) Load 9
              46:     24(ptr) AccessChain 21 23 45
              47:    7(fvec4) Load 46
              48:    7(fvec4) FAdd 44 47
                              Store 9 48
              50:    7(fvec4) Load 9
              51:    7(fvec4) VectorShuffle 50 50 1 1 1 1
              52:     24(ptr) AccessChain 21 45 23
              53:    7(fvec4) Load 52
              54:    7(fvec4) FMul 51 53
                              Store 49 54
              55:     24(ptr) AccessChain 21 45 28
              56:    7(fvec4) Load 55
              57:    7(fvec4) Load 9
              58:    7(fvec4) VectorShuffle 57 57 0 0 0 0
              59:    7(fvec4) FMul 56 58
              60:    7(fvec4) Load 49
              61:    7(fvec4) FAdd 59 60
                              Store 49 61
              62:     24(ptr) AccessChain 21 45 36
              63:    7(fvec4) Load 62
              64:    7(fvec4) Load 9
              65:    7(fvec4) VectorShuffle 64 64 2 2 2 2
              66:    7(fvec4) FMul 63 65
              67:    7(fvec4) Load 49
              68:    7(fvec4) FAdd 66 67
                              Store 49 68
              69:     24(ptr) AccessChain 21 45 45
              70:    7(fvec4) Load 69
              71:    7(fvec4) Load 9
              72:    7(fvec4) VectorShuffle 71 71 3 3 3 3
              73:    7(fvec4) FMul 70 72
              74:    7(fvec4) Load 49
              75:    7(fvec4) FAdd 73 74
                              Store 49 75
              81:    7(fvec4) Load 49
              83:     82(ptr) AccessChain 80 28
                              Store 83 81
              86:    7(fvec4) Load 85
                              Store 84 86
              92:   87(fvec2) Load 91
              94:     24(ptr) AccessChain 21 93
              95:    7(fvec4) Load 94
              96:   87(fvec2) VectorShuffle 95 95 0 1
              97:   87(fvec2) FMul 92 96
              98:     24(ptr) AccessChain 21 93
              99:    7(fvec4) Load 98
             100:   87(fvec2) VectorShuffle 99 99 2 3
             101:   87(fvec2) FAdd 97 100
                              Store 89(vs_TEXCOORD1) 101
             104:    102(ptr) AccessChain 9 76
             105:    6(float) Load 104
             108:    107(ptr) AccessChain 21 36 23 106
             109:    6(float) Load 108
             110:    6(float) FMul 105 109
                              Store 103 110
             111:    107(ptr) AccessChain 21 36 28 106
             112:    6(float) Load 111
             114:    102(ptr) AccessChain 9 113
             115:    6(float) Load 114
             116:    6(float) FMul 112 115
             117:    6(float) Load 103
             118:    6(float) FAdd 116 117
             119:    102(ptr) AccessChain 9 113
                              Store 119 118
             120:    107(ptr) AccessChain 21 36 36 106
             121:    6(float) Load 120
             122:    102(ptr) AccessChain 9 106
             123:    6(float) Load 122
             124:    6(float) FMul 121 123
             125:    102(ptr) AccessChain 9 113
             126:    6(float) Load 125
             127:    6(float) FAdd 124 126
             128:    102(ptr) AccessChain 9 113
                              Store 128 127
             129:    107(ptr) AccessChain 21 36 45 106
             130:    6(float) Load 129
             132:    102(ptr) AccessChain 9 131
             133:    6(float) Load 132
             134:    6(float) FMul 130 133
             135:    102(ptr) AccessChain 9 113
             136:    6(float) Load 135
             137:    6(float) FAdd 134 136
             138:    102(ptr) AccessChain 9 113
                              Store 138 137
             140:    102(ptr) AccessChain 9 113
             141:    6(float) Load 140
             142:    6(float) FNegate 141
             144:    143(ptr) AccessChain 139(vs_TEXCOORD3) 106
                              Store 144 142
             145:    102(ptr) AccessChain 49 76
             146:    6(float) Load 145
             147:    107(ptr) AccessChain 21 28 113
             148:    6(float) Load 147
             149:    6(float) FMul 146 148
             150:    102(ptr) AccessChain 9 113
                              Store 150 149
             151:    102(ptr) AccessChain 9 113
             152:    6(float) Load 151
             154:    6(float) FMul 152 153
             155:    102(ptr) AccessChain 9 131
                              Store 155 154
             156:    7(fvec4) Load 49
             157:   87(fvec2) VectorShuffle 156 156 0 3
             159:   87(fvec2) FMul 157 158
             160:    7(fvec4) Load 9
             161:    7(fvec4) VectorShuffle 160 159 4 1 5 3
                              Store 9 161
             162:    102(ptr) AccessChain 49 131
             163:    6(float) Load 162
             164:    143(ptr) AccessChain 139(vs_TEXCOORD3) 131
                              Store 164 163
             165:    7(fvec4) Load 9
             166:   87(fvec2) VectorShuffle 165 165 2 2
             167:    7(fvec4) Load 9
             168:   87(fvec2) VectorShuffle 167 167 0 3
             169:   87(fvec2) FAdd 166 168
             170:    7(fvec4) Load 139(vs_TEXCOORD3)
             171:    7(fvec4) VectorShuffle 170 169 4 5 2 3
                              Store 139(vs_TEXCOORD3) 171
             172:    143(ptr) AccessChain 80 28 76
             173:    6(float) Load 172
             174:    6(float) FNegate 173
             175:    143(ptr) AccessChain 80 28 76
                              Store 175 174
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 46

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 22 39 43
                              ExecutionMode 4 OriginUpperLeft
                              Name 22  "vs_TEXCOORD1"
                              Decorate 9 RelaxedPrecision
                              Decorate 12 RelaxedPrecision
                              Decorate 12 DescriptorSet 0
                              Decorate 12 Binding 1
                              Decorate 13 RelaxedPrecision
                              Decorate 16 RelaxedPrecision
                              Decorate 16 DescriptorSet 0
                              Decorate 16 Binding 0
                              Decorate 17 RelaxedPrecision
                              Decorate 22(vs_TEXCOORD1) Location 1
                              Decorate 25 RelaxedPrecision
                              Decorate 26 RelaxedPrecision
                              MemberDecorate 27 0 RelaxedPrecision
                              MemberDecorate 27 0 Offset 0
                              Decorate 27 Block
                              Decorate 29 DescriptorSet 1
                              Decorate 29 Binding 0
                              Decorate 34 RelaxedPrecision
                              Decorate 35 RelaxedPrecision
                              Decorate 37 RelaxedPrecision
                              Decorate 39 Location 0
                              Decorate 43 RelaxedPrecision
                              Decorate 43 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypeImage 6(float) 2D sampled format:Unknown
              11:             TypePointer UniformConstant 10
              12:     11(ptr) Variable UniformConstant
              14:             TypeSampler
              15:             TypePointer UniformConstant 14
              16:     15(ptr) Variable UniformConstant
              18:             TypeSampledImage 10
              20:             TypeVector 6(float) 2
              21:             TypePointer Input 20(fvec2)
22(vs_TEXCOORD1):     21(ptr) Variable Input
              25:      8(ptr) Variable Private
              27:             TypeStruct 7(fvec4)
              28:             TypePointer Uniform 27(struct)
              29:     28(ptr) Variable Uniform
              30:             TypeInt 32 1
              31:     30(int) Constant 0
              32:             TypePointer Uniform 7(fvec4)
              36:      8(ptr) Variable Private
              38:             TypePointer Input 7(fvec4)
              39:     38(ptr) Variable Input
              42:             TypePointer Output 7(fvec4)
              43:     42(ptr) Variable Output
               4:           2 Function None 3
               5:             Label
              13:          10 Load 12
              17:          14 Load 16
              19:          18 SampledImage 13 17
              23:   20(fvec2) Load 22(vs_TEXCOORD1)
              24:    7(fvec4) ImageSampleImplicitLod 19 23
                              Store 9 24
              26:    7(fvec4) Load 9
              33:     32(ptr) AccessChain 29 31
              34:    7(fvec4) Load 33
              35:    7(fvec4) FMul 26 34
                              Store 25 35
              37:    7(fvec4) Load 25
              40:    7(fvec4) Load 39
              41:    7(fvec4) FMul 37 40
                              Store 36 41
              44:    7(fvec4) Load 36
                              Store 43 44
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: SOFTPARTICLES_ON 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 18 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "$Globals" (192 bytes) on slot 0 {
  Vector4 _MainTex_ST at 64
}
Constant Buffer "UnityPerCamera" (144 bytes) on slot 1 {
  Vector4 _ProjectionParams at 80
}
Constant Buffer "UnityPerDraw" (176 bytes) on slot 2 {
  Matrix4x4 unity_ObjectToWorld at 0
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 3 {
  Matrix4x4 unity_MatrixV at 144
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float       
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xy          2     NONE   float   xy  
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
//
      vs_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_constantbuffer CB1[6], immediateIndexed
      dcl_constantbuffer CB2[4], immediateIndexed
      dcl_constantbuffer CB3[21], immediateIndexed
      dcl_input v0.xyz
      dcl_input v2.xyzw
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyzw
      dcl_output o2.xy
      dcl_output o3.xyzw
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb2[1].xyzw
   1: mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb2[2].xyzw, v0.zzzz, r0.xyzw
   3: add r0.xyzw, r0.xyzw, cb2[3].xyzw
   4: mul r1.xyzw, r0.yyyy, cb3[18].xyzw
   5: mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
   6: mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
   7: mad r1.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
   8: mov o0.xyzw, r1.xyzw
   9: mov o1.xyzw, v2.xyzw
  10: mad o2.xy, v3.xyxx, cb0[4].xyxx, cb0[4].zwzz
  11: mul r0.y, r0.y, cb3[10].z
  12: mad r0.x, cb3[9].z, r0.x, r0.y
  13: mad r0.x, cb3[11].z, r0.z, r0.x
  14: mad r0.x, cb3[12].z, r0.w, r0.x
  15: mov o3.z, -r0.x
  16: mul r0.x, r1.y, cb1[5].x
  17: mul r0.w, r0.x, l(0.500000)
  18: mul r0.xz, r1.xxwx, l(0.500000, 0.000000, 0.500000, 0.000000)
  19: mov o3.w, r1.w
  20: add o3.xy, r0.zzzz, r0.xwxx
  21: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 5 math, 2 temp registers, 1 textures
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (192 bytes) on slot 0 {
  Vector4 _Color at 80
  Vector4 _ColorAddSubDiff at 176
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xy          2     NONE   float   xy  
// TEXCOORD                 3   xyzw        3     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[12], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v1.xyzw
      dcl_input_ps linear v2.xy
      dcl_output o0.xyzw
      dcl_temps 2
   0: sample r0.xyzw, v2.xyxx, t0.xyzw, s0
   1: mul r0.xyzw, r0.xyzw, cb0[5].xyzw
   2: mad r0.xyz, v1.xyzx, cb0[11].xxxx, r0.xyzx
   3: mul o0.w, r0.w, v1.w
   4: add r1.xyz, -r0.xyzx, |r0.xyzx|
   5: mad o0.xyz, cb0[11].yyyy, r1.xyzx, r0.xyzx
   6: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: SOFTPARTICLES_ON 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles":
Shader Disassembly:
#ifdef VERTEX
#version 100

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying highp vec4 vs_COLOR0;
varying highp vec2 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD3.w = u_xlat1.w;
    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _ColorAddSubDiff;
uniform lowp sampler2D _MainTex;
varying highp vec4 vs_COLOR0;
varying highp vec2 vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat10;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat1.xyz = vs_COLOR0.xyz * _ColorAddSubDiff.xxx + u_xlat16_0.xyz;
    u_xlat10 = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.w = u_xlat10;
    u_xlat16_2.xyz = (-u_xlat1.xyz) + abs(u_xlat1.xyz);
    SV_Target0.xyz = _ColorAddSubDiff.yyy * u_xlat16_2.xyz + u_xlat1.xyz;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: SOFTPARTICLES_ON 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (32 bytes) {
  Vector4 _Color at 0
  Vector4 _ColorAddSubDiff at 16
}
Constant Buffer "$Globals" (224 bytes) {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_MatrixVP at 144
  Vector4 _ProjectionParams at 0
  Vector4 _MainTex_ST at 208
}

Shader Disassembly:
#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD3.w = u_xlat1.w;
    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _ColorAddSubDiff;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat10;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat16_0 = u_xlat16_0 * _Color;
    u_xlat1.xyz = vs_COLOR0.xyz * _ColorAddSubDiff.xxx + u_xlat16_0.xyz;
    u_xlat10 = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.w = u_xlat10;
    u_xlat16_2.xyz = (-u_xlat1.xyz) + abs(u_xlat1.xyz);
    SV_Target0.xyz = _ColorAddSubDiff.yyy * u_xlat16_2.xyz + u_xlat1.xyz;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: SOFTPARTICLES_ON 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (224 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_MatrixVP at 144
  Vector4 _ProjectionParams at 0
  Vector4 _MainTex_ST at 208
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 COLOR0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat2;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.mtl_Position = u_xlat1;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat2 = u_xlat0.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat0.x, u_xlat2);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat0.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat0.w, u_xlat0.x);
    output.TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0.x = u_xlat1.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * float2(0.5, 0.5);
    output.TEXCOORD3.w = u_xlat1.w;
    output.TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "FGlobals" (32 bytes) on slot 0 {
  Vector4 _Color at 0
  Vector4 _ColorAddSubDiff at 16
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Color;
    float4 _ColorAddSubDiff;
};

struct Mtl_FragmentIn
{
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float3 u_xlat1;
    u_xlat0 = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy);
    u_xlat0 = u_xlat0 * FGlobals._Color;
    u_xlat0.xyz = fma(input.COLOR0.xyz, FGlobals._ColorAddSubDiff.xxx, u_xlat0.xyz);
    output.SV_Target0.w = u_xlat0.w * input.COLOR0.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + abs(u_xlat0.xyz);
    output.SV_Target0.xyz = fma(FGlobals._ColorAddSubDiff.yyy, u_xlat1.xyz, u_xlat0.xyz);
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: SOFTPARTICLES_ON 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (32 bytes) {
  Vector4 _Color at 0
  Vector4 _ColorAddSubDiff at 16
}
Constant Buffer "$Globals" (224 bytes) {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_MatrixVP at 144
  Vector4 _ProjectionParams at 0
  Vector4 _MainTex_ST at 208
}

Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
out vec4 vs_COLOR0;
out vec2 vs_TEXCOORD1;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD3.w = u_xlat1.w;
    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Color;
uniform 	vec4 _ColorAddSubDiff;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat0 = u_xlat10_0 * _Color;
    u_xlat0.xyz = vs_COLOR0.xyz * _ColorAddSubDiff.xxx + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w * vs_COLOR0.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + abs(u_xlat0.xyz);
    SV_Target0.xyz = _ColorAddSubDiff.yyy * u_xlat1.xyz + u_xlat0.xyz;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: SOFTPARTICLES_ON 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Set 2D Texture "_MainTex" to set: 0, binding: 1, used in: Fragment  using sampler in set: 0, binding: 0, used in: Fragment 

Constant Buffer "PGlobals1811070932" (32 bytes) on set: 1, binding: 0, used in: Fragment  {
  Vector4 _Color at 0
  Vector4 _ColorAddSubDiff at 16
}
Constant Buffer "VGlobals1811070932" (224 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_MatrixVP at 144
  Matrix4x4 unity_ObjectToWorld at 16
  Vector4 _MainTex_ST at 208
  Vector4 _ProjectionParams at 0
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 177

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 80 84 85 89 91 139
                              Name 89  "vs_TEXCOORD1"
                              Name 139  "vs_TEXCOORD3"
                              Decorate 11 Location 0
                              Decorate 16 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 Offset 16
                              MemberDecorate 19 2 Offset 80
                              MemberDecorate 19 3 Offset 144
                              MemberDecorate 19 4 Offset 208
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 1
                              MemberDecorate 78 0 BuiltIn Position
                              MemberDecorate 78 1 BuiltIn PointSize
                              MemberDecorate 78 2 BuiltIn ClipDistance
                              Decorate 78 Block
                              Decorate 84 Location 0
                              Decorate 85 RelaxedPrecision
                              Decorate 85 Location 1
                              Decorate 86 RelaxedPrecision
                              Decorate 89(vs_TEXCOORD1) Location 1
                              Decorate 91 Location 2
                              Decorate 139(vs_TEXCOORD3) Location 2
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              14:             TypeInt 32 0
              15:     14(int) Constant 4
              16:             TypeArray 7(fvec4) 15
              17:             TypeArray 7(fvec4) 15
              18:             TypeArray 7(fvec4) 15
              19:             TypeStruct 7(fvec4) 16 17 18 7(fvec4)
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 1
              24:             TypePointer Uniform 7(fvec4)
              28:     22(int) Constant 0
              36:     22(int) Constant 2
              45:     22(int) Constant 3
              49:      8(ptr) Variable Private
              76:     14(int) Constant 1
              77:             TypeArray 6(float) 76
              78:             TypeStruct 7(fvec4) 6(float) 77
              79:             TypePointer Output 78(struct)
              80:     79(ptr) Variable Output
              82:             TypePointer Output 7(fvec4)
              84:     82(ptr) Variable Output
              85:     10(ptr) Variable Input
              87:             TypeVector 6(float) 2
              88:             TypePointer Output 87(fvec2)
89(vs_TEXCOORD1):     88(ptr) Variable Output
              90:             TypePointer Input 87(fvec2)
              91:     90(ptr) Variable Input
              93:     22(int) Constant 4
             102:             TypePointer Private 6(float)
             103:    102(ptr) Variable Private
             106:     14(int) Constant 2
             107:             TypePointer Uniform 6(float)
             113:     14(int) Constant 0
             131:     14(int) Constant 3
139(vs_TEXCOORD3):     82(ptr) Variable Output
             143:             TypePointer Output 6(float)
             153:    6(float) Constant 1056964608
             158:   87(fvec2) ConstantComposite 153 153
               4:           2 Function None 3
               5:             Label
              12:    7(fvec4) Load 11
              13:    7(fvec4) VectorShuffle 12 12 1 1 1 1
              25:     24(ptr) AccessChain 21 23 23
              26:    7(fvec4) Load 25
              27:    7(fvec4) FMul 13 26
                              Store 9 27
              29:     24(ptr) AccessChain 21 23 28
              30:    7(fvec4) Load 29
              31:    7(fvec4) Load 11
              32:    7(fvec4) VectorShuffle 31 31 0 0 0 0
              33:    7(fvec4) FMul 30 32
              34:    7(fvec4) Load 9
              35:    7(fvec4) FAdd 33 34
                              Store 9 35
              37:     24(ptr) AccessChain 21 23 36
              38:    7(fvec4) Load 37
              39:    7(fvec4) Load 11
              40:    7(fvec4) VectorShuffle 39 39 2 2 2 2
              41:    7(fvec4) FMul 38 40
              42:    7(fvec4) Load 9
              43:    7(fvec4) FAdd 41 42
                              Store 9 43
              44:    7(fvec4) Load 9
              46:     24(ptr) AccessChain 21 23 45
              47:    7(fvec4) Load 46
              48:    7(fvec4) FAdd 44 47
                              Store 9 48
              50:    7(fvec4) Load 9
              51:    7(fvec4) VectorShuffle 50 50 1 1 1 1
              52:     24(ptr) AccessChain 21 45 23
              53:    7(fvec4) Load 52
              54:    7(fvec4) FMul 51 53
                              Store 49 54
              55:     24(ptr) AccessChain 21 45 28
              56:    7(fvec4) Load 55
              57:    7(fvec4) Load 9
              58:    7(fvec4) VectorShuffle 57 57 0 0 0 0
              59:    7(fvec4) FMul 56 58
              60:    7(fvec4) Load 49
              61:    7(fvec4) FAdd 59 60
                              Store 49 61
              62:     24(ptr) AccessChain 21 45 36
              63:    7(fvec4) Load 62
              64:    7(fvec4) Load 9
              65:    7(fvec4) VectorShuffle 64 64 2 2 2 2
              66:    7(fvec4) FMul 63 65
              67:    7(fvec4) Load 49
              68:    7(fvec4) FAdd 66 67
                              Store 49 68
              69:     24(ptr) AccessChain 21 45 45
              70:    7(fvec4) Load 69
              71:    7(fvec4) Load 9
              72:    7(fvec4) VectorShuffle 71 71 3 3 3 3
              73:    7(fvec4) FMul 70 72
              74:    7(fvec4) Load 49
              75:    7(fvec4) FAdd 73 74
                              Store 49 75
              81:    7(fvec4) Load 49
              83:     82(ptr) AccessChain 80 28
                              Store 83 81
              86:    7(fvec4) Load 85
                              Store 84 86
              92:   87(fvec2) Load 91
              94:     24(ptr) AccessChain 21 93
              95:    7(fvec4) Load 94
              96:   87(fvec2) VectorShuffle 95 95 0 1
              97:   87(fvec2) FMul 92 96
              98:     24(ptr) AccessChain 21 93
              99:    7(fvec4) Load 98
             100:   87(fvec2) VectorShuffle 99 99 2 3
             101:   87(fvec2) FAdd 97 100
                              Store 89(vs_TEXCOORD1) 101
             104:    102(ptr) AccessChain 9 76
             105:    6(float) Load 104
             108:    107(ptr) AccessChain 21 36 23 106
             109:    6(float) Load 108
             110:    6(float) FMul 105 109
                              Store 103 110
             111:    107(ptr) AccessChain 21 36 28 106
             112:    6(float) Load 111
             114:    102(ptr) AccessChain 9 113
             115:    6(float) Load 114
             116:    6(float) FMul 112 115
             117:    6(float) Load 103
             118:    6(float) FAdd 116 117
             119:    102(ptr) AccessChain 9 113
                              Store 119 118
             120:    107(ptr) AccessChain 21 36 36 106
             121:    6(float) Load 120
             122:    102(ptr) AccessChain 9 106
             123:    6(float) Load 122
             124:    6(float) FMul 121 123
             125:    102(ptr) AccessChain 9 113
             126:    6(float) Load 125
             127:    6(float) FAdd 124 126
             128:    102(ptr) AccessChain 9 113
                              Store 128 127
             129:    107(ptr) AccessChain 21 36 45 106
             130:    6(float) Load 129
             132:    102(ptr) AccessChain 9 131
             133:    6(float) Load 132
             134:    6(float) FMul 130 133
             135:    102(ptr) AccessChain 9 113
             136:    6(float) Load 135
             137:    6(float) FAdd 134 136
             138:    102(ptr) AccessChain 9 113
                              Store 138 137
             140:    102(ptr) AccessChain 9 113
             141:    6(float) Load 140
             142:    6(float) FNegate 141
             144:    143(ptr) AccessChain 139(vs_TEXCOORD3) 106
                              Store 144 142
             145:    102(ptr) AccessChain 49 76
             146:    6(float) Load 145
             147:    107(ptr) AccessChain 21 28 113
             148:    6(float) Load 147
             149:    6(float) FMul 146 148
             150:    102(ptr) AccessChain 9 113
                              Store 150 149
             151:    102(ptr) AccessChain 9 113
             152:    6(float) Load 151
             154:    6(float) FMul 152 153
             155:    102(ptr) AccessChain 9 131
                              Store 155 154
             156:    7(fvec4) Load 49
             157:   87(fvec2) VectorShuffle 156 156 0 3
             159:   87(fvec2) FMul 157 158
             160:    7(fvec4) Load 9
             161:    7(fvec4) VectorShuffle 160 159 4 1 5 3
                              Store 9 161
             162:    102(ptr) AccessChain 49 131
             163:    6(float) Load 162
             164:    143(ptr) AccessChain 139(vs_TEXCOORD3) 131
                              Store 164 163
             165:    7(fvec4) Load 9
             166:   87(fvec2) VectorShuffle 165 165 2 2
             167:    7(fvec4) Load 9
             168:   87(fvec2) VectorShuffle 167 167 0 3
             169:   87(fvec2) FAdd 166 168
             170:    7(fvec4) Load 139(vs_TEXCOORD3)
             171:    7(fvec4) VectorShuffle 170 169 4 5 2 3
                              Store 139(vs_TEXCOORD3) 171
             172:    143(ptr) AccessChain 80 28 76
             173:    6(float) Load 172
             174:    6(float) FNegate 173
             175:    143(ptr) AccessChain 80 28 76
                              Store 175 174
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 82

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 22 40 62
                              ExecutionMode 4 OriginUpperLeft
                              Name 22  "vs_TEXCOORD1"
                              Decorate 9 RelaxedPrecision
                              Decorate 12 RelaxedPrecision
                              Decorate 12 DescriptorSet 0
                              Decorate 12 Binding 1
                              Decorate 13 RelaxedPrecision
                              Decorate 16 RelaxedPrecision
                              Decorate 16 DescriptorSet 0
                              Decorate 16 Binding 0
                              Decorate 17 RelaxedPrecision
                              Decorate 22(vs_TEXCOORD1) Location 1
                              Decorate 25 RelaxedPrecision
                              Decorate 26 RelaxedPrecision
                              MemberDecorate 27 0 RelaxedPrecision
                              MemberDecorate 27 0 Offset 0
                              MemberDecorate 27 1 RelaxedPrecision
                              MemberDecorate 27 1 Offset 16
                              Decorate 27 Block
                              Decorate 29 DescriptorSet 1
                              Decorate 29 Binding 0
                              Decorate 34 RelaxedPrecision
                              Decorate 35 RelaxedPrecision
                              Decorate 40 Location 0
                              Decorate 45 RelaxedPrecision
                              Decorate 46 RelaxedPrecision
                              Decorate 48 RelaxedPrecision
                              Decorate 49 RelaxedPrecision
                              Decorate 56 RelaxedPrecision
                              Decorate 62 RelaxedPrecision
                              Decorate 62 Location 0
                              Decorate 66 RelaxedPrecision
                              Decorate 73 RelaxedPrecision
                              Decorate 74 RelaxedPrecision
                              Decorate 75 RelaxedPrecision
                              Decorate 76 RelaxedPrecision
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypeImage 6(float) 2D sampled format:Unknown
              11:             TypePointer UniformConstant 10
              12:     11(ptr) Variable UniformConstant
              14:             TypeSampler
              15:             TypePointer UniformConstant 14
              16:     15(ptr) Variable UniformConstant
              18:             TypeSampledImage 10
              20:             TypeVector 6(float) 2
              21:             TypePointer Input 20(fvec2)
22(vs_TEXCOORD1):     21(ptr) Variable Input
              25:      8(ptr) Variable Private
              27:             TypeStruct 7(fvec4) 7(fvec4)
              28:             TypePointer Uniform 27(struct)
              29:     28(ptr) Variable Uniform
              30:             TypeInt 32 1
              31:     30(int) Constant 0
              32:             TypePointer Uniform 7(fvec4)
              36:             TypeVector 6(float) 3
              37:             TypePointer Private 36(fvec3)
              38:     37(ptr) Variable Private
              39:             TypePointer Input 7(fvec4)
              40:     39(ptr) Variable Input
              43:     30(int) Constant 1
              51:             TypePointer Private 6(float)
              52:     51(ptr) Variable Private
              53:             TypeInt 32 0
              54:     53(int) Constant 3
              57:             TypePointer Input 6(float)
              61:             TypePointer Output 7(fvec4)
              62:     61(ptr) Variable Output
              64:             TypePointer Output 6(float)
              66:     37(ptr) Variable Private
               4:           2 Function None 3
               5:             Label
              13:          10 Load 12
              17:          14 Load 16
              19:          18 SampledImage 13 17
              23:   20(fvec2) Load 22(vs_TEXCOORD1)
              24:    7(fvec4) ImageSampleImplicitLod 19 23
                              Store 9 24
              26:    7(fvec4) Load 9
              33:     32(ptr) AccessChain 29 31
              34:    7(fvec4) Load 33
              35:    7(fvec4) FMul 26 34
                              Store 25 35
              41:    7(fvec4) Load 40
              42:   36(fvec3) VectorShuffle 41 41 0 1 2
              44:     32(ptr) AccessChain 29 43
              45:    7(fvec4) Load 44
              46:   36(fvec3) VectorShuffle 45 45 0 0 0
              47:   36(fvec3) FMul 42 46
              48:    7(fvec4) Load 25
              49:   36(fvec3) VectorShuffle 48 48 0 1 2
              50:   36(fvec3) FAdd 47 49
                              Store 38 50
              55:     51(ptr) AccessChain 25 54
              56:    6(float) Load 55
              58:     57(ptr) AccessChain 40 54
              59:    6(float) Load 58
              60:    6(float) FMul 56 59
                              Store 52 60
              63:    6(float) Load 52
              65:     64(ptr) AccessChain 62 54
                              Store 65 63
              67:   36(fvec3) Load 38
              68:   36(fvec3) FNegate 67
              69:   36(fvec3) Load 38
              70:   36(fvec3) ExtInst 1(GLSL.std.450) 4(FAbs) 69
              71:   36(fvec3) FAdd 68 70
                              Store 66 71
              72:     32(ptr) AccessChain 29 43
              73:    7(fvec4) Load 72
              74:   36(fvec3) VectorShuffle 73 73 1 1 1
              75:   36(fvec3) Load 66
              76:   36(fvec3) FMul 74 75
              77:   36(fvec3) Load 38
              78:   36(fvec3) FAdd 76 77
              79:    7(fvec4) Load 62
              80:    7(fvec4) VectorShuffle 79 78 4 5 6 3
                              Store 62 80
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: SOFTPARTICLES_ON _EMISSION 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON _FADING_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 18 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "$Globals" (192 bytes) on slot 0 {
  Vector4 _MainTex_ST at 64
}
Constant Buffer "UnityPerCamera" (144 bytes) on slot 1 {
  Vector4 _ProjectionParams at 80
}
Constant Buffer "UnityPerDraw" (176 bytes) on slot 2 {
  Matrix4x4 unity_ObjectToWorld at 0
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 3 {
  Matrix4x4 unity_MatrixV at 144
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float       
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xy          2     NONE   float   xy  
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
//
      vs_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_constantbuffer CB1[6], immediateIndexed
      dcl_constantbuffer CB2[4], immediateIndexed
      dcl_constantbuffer CB3[21], immediateIndexed
      dcl_input v0.xyz
      dcl_input v2.xyzw
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyzw
      dcl_output o2.xy
      dcl_output o3.xyzw
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb2[1].xyzw
   1: mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb2[2].xyzw, v0.zzzz, r0.xyzw
   3: add r0.xyzw, r0.xyzw, cb2[3].xyzw
   4: mul r1.xyzw, r0.yyyy, cb3[18].xyzw
   5: mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
   6: mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
   7: mad r1.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
   8: mov o0.xyzw, r1.xyzw
   9: mov o1.xyzw, v2.xyzw
  10: mad o2.xy, v3.xyxx, cb0[4].xyxx, cb0[4].zwzz
  11: mul r0.y, r0.y, cb3[10].z
  12: mad r0.x, cb3[9].z, r0.x, r0.y
  13: mad r0.x, cb3[11].z, r0.z, r0.x
  14: mad r0.x, cb3[12].z, r0.w, r0.x
  15: mov o3.z, -r0.x
  16: mul r0.x, r1.y, cb1[5].x
  17: mul r0.w, r0.x, l(0.500000)
  18: mul r0.xz, r1.xxwx, l(0.500000, 0.000000, 0.500000, 0.000000)
  19: mov o3.w, r1.w
  20: add o3.xy, r0.zzzz, r0.xwxx
  21: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 20 math, 3 temp registers, 3 textures, 2 branches
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_CameraDepthTexture" to slot 1 sampler slot 2
Set 2D Texture "_EmissionMap" to slot 2 sampler slot 1

Constant Buffer "$Globals" (192 bytes) on slot 0 {
  Vector4 _Color at 80
  Vector3 _EmissionColor at 100
  Vector4 _SoftParticleFadeParams at 128
  Vector4 _CameraFadeParams at 144
  Vector4 _ColorAddSubDiff at 176
}
Constant Buffer "UnityPerCamera" (144 bytes) on slot 1 {
  Vector4 _ZBufferParams at 112
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xy          2     NONE   float   xy  
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[12], immediateIndexed
      dcl_constantbuffer CB1[8], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_sampler s2, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_resource_texture2d (float,float,float,float) t2
      dcl_input_ps linear v1.xyzw
      dcl_input_ps linear v2.xy
      dcl_input_ps linear v3.xyzw
      dcl_output o0.xyzw
      dcl_temps 3
   0: sample r0.xyzw, v2.xyxx, t0.xyzw, s0
   1: mul r0.xyzw, r0.xyzw, cb0[5].xyzw
   2: mad r0.xyz, v1.xyzx, cb0[11].xxxx, r0.xyzx
   3: add r1.xyz, -r0.xyzx, |r0.xyzx|
   4: mad r0.xyz, cb0[11].yyyy, r1.xyzx, r0.xyzx
   5: mul r0.w, r0.w, v1.w
   6: lt r1.xy, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[8].xyxx
   7: or r1.x, r1.y, r1.x
   8: if_nz r1.x
   9:   div r1.xy, v3.xyxx, v3.wwww
  10:   sample r1.xyzw, r1.xyxx, t1.xyzw, s2
  11:   mad r1.x, cb1[7].z, r1.x, cb1[7].w
  12:   div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
  13:   add r1.x, r1.x, -cb0[8].x
  14:   add r1.x, r1.x, -v3.z
  15:   mul_sat r1.x, r1.x, cb0[8].y
  16:   mul r0.w, r0.w, r1.x
  17: else 
  18:   mov r1.x, l(1.000000)
  19: endif 
  20: add r1.y, v3.z, -cb0[9].x
  21: mul_sat r1.y, r1.y, cb0[9].y
  22: mul o0.w, r0.w, r1.y
  23: sample r2.xyzw, v2.xyxx, t2.xyzw, s1
  24: mul r2.xyz, r2.xyzx, cb0[6].yzwy
  25: mul r1.yzw, r1.yyyy, r2.xxyz
  26: mad o0.xyz, r1.yzwy, r1.xxxx, r0.xyzx
  27: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: SOFTPARTICLES_ON _EMISSION 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON _FADING_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles":
Shader Disassembly:
#ifdef VERTEX
#version 100

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying highp vec4 vs_COLOR0;
varying highp vec2 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD3.w = u_xlat1.w;
    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _Color;
uniform 	mediump vec3 _EmissionColor;
uniform 	vec4 _SoftParticleFadeParams;
uniform 	vec4 _CameraFadeParams;
uniform 	mediump vec4 _ColorAddSubDiff;
uniform lowp sampler2D _MainTex;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _EmissionMap;
varying highp vec4 vs_COLOR0;
varying highp vec2 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
vec2 u_xlat6;
bvec2 u_xlatb6;
lowp vec3 u_xlat10_8;
float u_xlat11;
mediump float u_xlat16_11;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat1.xyz = vs_COLOR0.xyz * _ColorAddSubDiff.xxx + u_xlat16_0.xyz;
    u_xlat16_2.xyz = (-u_xlat1.xyz) + abs(u_xlat1.xyz);
    u_xlat16_2.xyz = _ColorAddSubDiff.yyy * u_xlat16_2.xyz + u_xlat1.xyz;
    u_xlat1.x = u_xlat16_0.w * vs_COLOR0.w;
    u_xlatb6.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb6.x = u_xlatb6.y || u_xlatb6.x;
    if(u_xlatb6.x){
        u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat6.x = texture2D(_CameraDepthTexture, u_xlat6.xy).x;
        u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat6.x = u_xlat6.x + (-_SoftParticleFadeParams.x);
        u_xlat6.x = u_xlat6.x + (-vs_TEXCOORD3.z);
        u_xlat6.x = u_xlat6.x * _SoftParticleFadeParams.y;
        u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
        u_xlat11 = u_xlat6.x * u_xlat1.x;
        u_xlat16_11 = u_xlat11;
    } else {
        u_xlat16_11 = u_xlat1.x;
        u_xlat6.x = 1.0;
    }
    u_xlat3.x = vs_TEXCOORD3.z + (-_CameraFadeParams.x);
    u_xlat3.x = u_xlat3.x * _CameraFadeParams.y;
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat0.w = u_xlat16_11 * u_xlat3.x;
    u_xlat10_8.xyz = texture2D(_EmissionMap, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_8.xyz * vec3(_EmissionColor.x, _EmissionColor.y, _EmissionColor.z);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat16_4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat6.xxx + u_xlat16_2.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: SOFTPARTICLES_ON _EMISSION 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON _FADING_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_CameraDepthTexture" to slot 1
Set 2D Texture "_EmissionMap" to slot 2

Constant Buffer "$Globals" (96 bytes) {
  Vector4 _ZBufferParams at 0
  Vector4 _Color at 16
  Vector3 _EmissionColor at 32
  Vector4 _SoftParticleFadeParams at 48
  Vector4 _CameraFadeParams at 64
  Vector4 _ColorAddSubDiff at 80
}
Constant Buffer "$Globals" (224 bytes) {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_MatrixVP at 144
  Vector4 _ProjectionParams at 0
  Vector4 _MainTex_ST at 208
}

Shader Disassembly:
#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD3.w = u_xlat1.w;
    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _Color;
uniform 	mediump vec3 _EmissionColor;
uniform 	vec4 _SoftParticleFadeParams;
uniform 	vec4 _CameraFadeParams;
uniform 	mediump vec4 _ColorAddSubDiff;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;
in highp vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
vec2 u_xlat6;
bvec2 u_xlatb6;
mediump vec3 u_xlat16_8;
float u_xlat11;
mediump float u_xlat16_11;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat16_0 = u_xlat16_0 * _Color;
    u_xlat1.xyz = vs_COLOR0.xyz * _ColorAddSubDiff.xxx + u_xlat16_0.xyz;
    u_xlat16_2.xyz = (-u_xlat1.xyz) + abs(u_xlat1.xyz);
    u_xlat16_2.xyz = _ColorAddSubDiff.yyy * u_xlat16_2.xyz + u_xlat1.xyz;
    u_xlat1.x = u_xlat16_0.w * vs_COLOR0.w;
    u_xlatb6.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb6.x = u_xlatb6.y || u_xlatb6.x;
    if(u_xlatb6.x){
        u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
        u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat6.x = u_xlat6.x + (-_SoftParticleFadeParams.x);
        u_xlat6.x = u_xlat6.x + (-vs_TEXCOORD3.z);
        u_xlat6.x = u_xlat6.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
        u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
        u_xlat11 = u_xlat6.x * u_xlat1.x;
        u_xlat16_11 = u_xlat11;
    } else {
        u_xlat16_11 = u_xlat1.x;
        u_xlat6.x = 1.0;
    }
    u_xlat3.x = vs_TEXCOORD3.z + (-_CameraFadeParams.x);
    u_xlat3.x = u_xlat3.x * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat16_11 * u_xlat3.x;
    u_xlat16_8.xyz = texture(_EmissionMap, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_8.xyz * vec3(_EmissionColor.x, _EmissionColor.y, _EmissionColor.z);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat16_4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat6.xxx + u_xlat16_2.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: SOFTPARTICLES_ON _EMISSION 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON _FADING_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (224 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_MatrixVP at 144
  Vector4 _ProjectionParams at 0
  Vector4 _MainTex_ST at 208
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 COLOR0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat2;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.mtl_Position = u_xlat1;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat2 = u_xlat0.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat0.x, u_xlat2);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat0.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat0.w, u_xlat0.x);
    output.TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0.x = u_xlat1.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * float2(0.5, 0.5);
    output.TEXCOORD3.w = u_xlat1.w;
    output.TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_CameraDepthTexture" to slot 1 sampler slot 2
Set 2D Texture "_EmissionMap" to slot 2 sampler slot 1

Constant Buffer "FGlobals" (96 bytes) on slot 0 {
  Vector4 _ZBufferParams at 0
  Vector4 _Color at 16
  Vector3 _EmissionColor at 32
  Vector4 _SoftParticleFadeParams at 48
  Vector4 _CameraFadeParams at 64
  Vector4 _ColorAddSubDiff at 80
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ZBufferParams;
    float4 _Color;
    float3 _EmissionColor;
    float4 _SoftParticleFadeParams;
    float4 _CameraFadeParams;
    float4 _ColorAddSubDiff;
};

struct Mtl_FragmentIn
{
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_EmissionMap [[ sampler (1) ]],
    sampler sampler_CameraDepthTexture [[ sampler (2) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _CameraDepthTexture [[ texture(1) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float3 u_xlat1;
    bool2 u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat4;
    float u_xlat9;
    u_xlat0 = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy);
    u_xlat0 = u_xlat0 * FGlobals._Color;
    u_xlat0.xyz = fma(input.COLOR0.xyz, FGlobals._ColorAddSubDiff.xxx, u_xlat0.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) + abs(u_xlat0.xyz);
    u_xlat0.xyz = fma(FGlobals._ColorAddSubDiff.yyy, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat9 = u_xlat0.w * input.COLOR0.w;
    u_xlatb1.xy = (float2(0.0, 0.0)<FGlobals._SoftParticleFadeParams.xy);
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = input.TEXCOORD3.xy / input.TEXCOORD3.ww;
        u_xlat1.x = _CameraDepthTexture.sample(sampler_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = fma(FGlobals._ZBufferParams.z, u_xlat1.x, FGlobals._ZBufferParams.w);
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat1.x = u_xlat1.x + (-FGlobals._SoftParticleFadeParams.x);
        u_xlat1.x = u_xlat1.x + (-input.TEXCOORD3.z);
        u_xlat1.x = u_xlat1.x * FGlobals._SoftParticleFadeParams.y;
        u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
        u_xlat9 = u_xlat9 * u_xlat1.x;
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat4.x = input.TEXCOORD3.z + (-FGlobals._CameraFadeParams.x);
    u_xlat4.x = u_xlat4.x * FGlobals._CameraFadeParams.y;
    u_xlat4.x = clamp(u_xlat4.x, 0.0f, 1.0f);
    output.SV_Target0.w = u_xlat9 * u_xlat4.x;
    u_xlat2.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD1.xy).xyz;
    u_xlat2.xyz = u_xlat2.xyz * FGlobals._EmissionColor.xxyz.yzw;
    u_xlat4.xyz = u_xlat4.xxx * u_xlat2.xyz;
    output.SV_Target0.xyz = fma(u_xlat4.xyz, u_xlat1.xxx, u_xlat0.xyz);
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: SOFTPARTICLES_ON _EMISSION 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON _FADING_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_CameraDepthTexture" to slot 1
Set 2D Texture "_EmissionMap" to slot 2

Constant Buffer "$Globals" (96 bytes) {
  Vector4 _ZBufferParams at 0
  Vector4 _Color at 16
  Vector3 _EmissionColor at 32
  Vector4 _SoftParticleFadeParams at 48
  Vector4 _CameraFadeParams at 64
  Vector4 _ColorAddSubDiff at 80
}
Constant Buffer "$Globals" (224 bytes) {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_MatrixVP at 144
  Vector4 _ProjectionParams at 0
  Vector4 _MainTex_ST at 208
}

Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
out vec4 vs_COLOR0;
out vec2 vs_TEXCOORD1;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD3.w = u_xlat1.w;
    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _Color;
uniform 	vec3 _EmissionColor;
uniform 	vec4 _SoftParticleFadeParams;
uniform 	vec4 _CameraFadeParams;
uniform 	vec4 _ColorAddSubDiff;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(2) uniform  sampler2D _EmissionMap;
in  vec4 vs_COLOR0;
in  vec2 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
vec4 u_xlat10_1;
bvec2 u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat4;
float u_xlat9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat0 = u_xlat10_0 * _Color;
    u_xlat0.xyz = vs_COLOR0.xyz * _ColorAddSubDiff.xxx + u_xlat0.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) + abs(u_xlat0.xyz);
    u_xlat0.xyz = _ColorAddSubDiff.yyy * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat9 = u_xlat0.w * vs_COLOR0.w;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_1 = texture(_CameraDepthTexture, u_xlat1.xy);
        u_xlat1.x = _ZBufferParams.z * u_xlat10_1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD3.z);
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
        u_xlat9 = u_xlat9 * u_xlat1.x;
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat4.x = vs_TEXCOORD3.z + (-_CameraFadeParams.x);
    u_xlat4.x = u_xlat4.x * _CameraFadeParams.y;
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
    SV_Target0.w = u_xlat9 * u_xlat4.x;
    u_xlat10_2 = texture(_EmissionMap, vs_TEXCOORD1.xy);
    u_xlat2.xyz = u_xlat10_2.xyz * vec3(_EmissionColor.x, _EmissionColor.y, _EmissionColor.z);
    u_xlat4.xyz = u_xlat4.xxx * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat0.xyz;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: SOFTPARTICLES_ON _EMISSION 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON _FADING_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Set 2D Texture "_CameraDepthTexture" to set: 0, binding: 4, used in: Fragment  using sampler in set: 0, binding: 2, used in: Fragment 
Set 2D Texture "_EmissionMap" to set: 0, binding: 5, used in: Fragment  using sampler in set: 0, binding: 1, used in: Fragment 
Set 2D Texture "_MainTex" to set: 0, binding: 3, used in: Fragment  using sampler in set: 0, binding: 0, used in: Fragment 

Constant Buffer "PGlobals3221378922" (96 bytes) on set: 1, binding: 0, used in: Fragment  {
  Vector4 _CameraFadeParams at 64
  Vector4 _Color at 16
  Vector4 _ColorAddSubDiff at 80
  Vector3 _EmissionColor at 32
  Vector4 _SoftParticleFadeParams at 48
  Vector4 _ZBufferParams at 0
}
Constant Buffer "VGlobals3221378922" (224 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_MatrixVP at 144
  Matrix4x4 unity_ObjectToWorld at 16
  Vector4 _MainTex_ST at 208
  Vector4 _ProjectionParams at 0
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 177

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 80 84 85 89 91 139
                              Name 89  "vs_TEXCOORD1"
                              Name 139  "vs_TEXCOORD3"
                              Decorate 11 Location 0
                              Decorate 16 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 Offset 16
                              MemberDecorate 19 2 Offset 80
                              MemberDecorate 19 3 Offset 144
                              MemberDecorate 19 4 Offset 208
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 1
                              MemberDecorate 78 0 BuiltIn Position
                              MemberDecorate 78 1 BuiltIn PointSize
                              MemberDecorate 78 2 BuiltIn ClipDistance
                              Decorate 78 Block
                              Decorate 84 Location 0
                              Decorate 85 RelaxedPrecision
                              Decorate 85 Location 1
                              Decorate 86 RelaxedPrecision
                              Decorate 89(vs_TEXCOORD1) Location 1
                              Decorate 91 Location 2
                              Decorate 139(vs_TEXCOORD3) Location 2
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              14:             TypeInt 32 0
              15:     14(int) Constant 4
              16:             TypeArray 7(fvec4) 15
              17:             TypeArray 7(fvec4) 15
              18:             TypeArray 7(fvec4) 15
              19:             TypeStruct 7(fvec4) 16 17 18 7(fvec4)
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 1
              24:             TypePointer Uniform 7(fvec4)
              28:     22(int) Constant 0
              36:     22(int) Constant 2
              45:     22(int) Constant 3
              49:      8(ptr) Variable Private
              76:     14(int) Constant 1
              77:             TypeArray 6(float) 76
              78:             TypeStruct 7(fvec4) 6(float) 77
              79:             TypePointer Output 78(struct)
              80:     79(ptr) Variable Output
              82:             TypePointer Output 7(fvec4)
              84:     82(ptr) Variable Output
              85:     10(ptr) Variable Input
              87:             TypeVector 6(float) 2
              88:             TypePointer Output 87(fvec2)
89(vs_TEXCOORD1):     88(ptr) Variable Output
              90:             TypePointer Input 87(fvec2)
              91:     90(ptr) Variable Input
              93:     22(int) Constant 4
             102:             TypePointer Private 6(float)
             103:    102(ptr) Variable Private
             106:     14(int) Constant 2
             107:             TypePointer Uniform 6(float)
             113:     14(int) Constant 0
             131:     14(int) Constant 3
139(vs_TEXCOORD3):     82(ptr) Variable Output
             143:             TypePointer Output 6(float)
             153:    6(float) Constant 1056964608
             158:   87(fvec2) ConstantComposite 153 153
               4:           2 Function None 3
               5:             Label
              12:    7(fvec4) Load 11
              13:    7(fvec4) VectorShuffle 12 12 1 1 1 1
              25:     24(ptr) AccessChain 21 23 23
              26:    7(fvec4) Load 25
              27:    7(fvec4) FMul 13 26
                              Store 9 27
              29:     24(ptr) AccessChain 21 23 28
              30:    7(fvec4) Load 29
              31:    7(fvec4) Load 11
              32:    7(fvec4) VectorShuffle 31 31 0 0 0 0
              33:    7(fvec4) FMul 30 32
              34:    7(fvec4) Load 9
              35:    7(fvec4) FAdd 33 34
                              Store 9 35
              37:     24(ptr) AccessChain 21 23 36
              38:    7(fvec4) Load 37
              39:    7(fvec4) Load 11
              40:    7(fvec4) VectorShuffle 39 39 2 2 2 2
              41:    7(fvec4) FMul 38 40
              42:    7(fvec4) Load 9
              43:    7(fvec4) FAdd 41 42
                              Store 9 43
              44:    7(fvec4) Load 9
              46:     24(ptr) AccessChain 21 23 45
              47:    7(fvec4) Load 46
              48:    7(fvec4) FAdd 44 47
                              Store 9 48
              50:    7(fvec4) Load 9
              51:    7(fvec4) VectorShuffle 50 50 1 1 1 1
              52:     24(ptr) AccessChain 21 45 23
              53:    7(fvec4) Load 52
              54:    7(fvec4) FMul 51 53
                              Store 49 54
              55:     24(ptr) AccessChain 21 45 28
              56:    7(fvec4) Load 55
              57:    7(fvec4) Load 9
              58:    7(fvec4) VectorShuffle 57 57 0 0 0 0
              59:    7(fvec4) FMul 56 58
              60:    7(fvec4) Load 49
              61:    7(fvec4) FAdd 59 60
                              Store 49 61
              62:     24(ptr) AccessChain 21 45 36
              63:    7(fvec4) Load 62
              64:    7(fvec4) Load 9
              65:    7(fvec4) VectorShuffle 64 64 2 2 2 2
              66:    7(fvec4) FMul 63 65
              67:    7(fvec4) Load 49
              68:    7(fvec4) FAdd 66 67
                              Store 49 68
              69:     24(ptr) AccessChain 21 45 45
              70:    7(fvec4) Load 69
              71:    7(fvec4) Load 9
              72:    7(fvec4) VectorShuffle 71 71 3 3 3 3
              73:    7(fvec4) FMul 70 72
              74:    7(fvec4) Load 49
              75:    7(fvec4) FAdd 73 74
                              Store 49 75
              81:    7(fvec4) Load 49
              83:     82(ptr) AccessChain 80 28
                              Store 83 81
              86:    7(fvec4) Load 85
                              Store 84 86
              92:   87(fvec2) Load 91
              94:     24(ptr) AccessChain 21 93
              95:    7(fvec4) Load 94
              96:   87(fvec2) VectorShuffle 95 95 0 1
              97:   87(fvec2) FMul 92 96
              98:     24(ptr) AccessChain 21 93
              99:    7(fvec4) Load 98
             100:   87(fvec2) VectorShuffle 99 99 2 3
             101:   87(fvec2) FAdd 97 100
                              Store 89(vs_TEXCOORD1) 101
             104:    102(ptr) AccessChain 9 76
             105:    6(float) Load 104
             108:    107(ptr) AccessChain 21 36 23 106
             109:    6(float) Load 108
             110:    6(float) FMul 105 109
                              Store 103 110
             111:    107(ptr) AccessChain 21 36 28 106
             112:    6(float) Load 111
             114:    102(ptr) AccessChain 9 113
             115:    6(float) Load 114
             116:    6(float) FMul 112 115
             117:    6(float) Load 103
             118:    6(float) FAdd 116 117
             119:    102(ptr) AccessChain 9 113
                              Store 119 118
             120:    107(ptr) AccessChain 21 36 36 106
             121:    6(float) Load 120
             122:    102(ptr) AccessChain 9 106
             123:    6(float) Load 122
             124:    6(float) FMul 121 123
             125:    102(ptr) AccessChain 9 113
             126:    6(float) Load 125
             127:    6(float) FAdd 124 126
             128:    102(ptr) AccessChain 9 113
                              Store 128 127
             129:    107(ptr) AccessChain 21 36 45 106
             130:    6(float) Load 129
             132:    102(ptr) AccessChain 9 131
             133:    6(float) Load 132
             134:    6(float) FMul 130 133
             135:    102(ptr) AccessChain 9 113
             136:    6(float) Load 135
             137:    6(float) FAdd 134 136
             138:    102(ptr) AccessChain 9 113
                              Store 138 137
             140:    102(ptr) AccessChain 9 113
             141:    6(float) Load 140
             142:    6(float) FNegate 141
             144:    143(ptr) AccessChain 139(vs_TEXCOORD3) 106
                              Store 144 142
             145:    102(ptr) AccessChain 49 76
             146:    6(float) Load 145
             147:    107(ptr) AccessChain 21 28 113
             148:    6(float) Load 147
             149:    6(float) FMul 146 148
             150:    102(ptr) AccessChain 9 113
                              Store 150 149
             151:    102(ptr) AccessChain 9 113
             152:    6(float) Load 151
             154:    6(float) FMul 152 153
             155:    102(ptr) AccessChain 9 131
                              Store 155 154
             156:    7(fvec4) Load 49
             157:   87(fvec2) VectorShuffle 156 156 0 3
             159:   87(fvec2) FMul 157 158
             160:    7(fvec4) Load 9
             161:    7(fvec4) VectorShuffle 160 159 4 1 5 3
                              Store 9 161
             162:    102(ptr) AccessChain 49 131
             163:    6(float) Load 162
             164:    143(ptr) AccessChain 139(vs_TEXCOORD3) 131
                              Store 164 163
             165:    7(fvec4) Load 9
             166:   87(fvec2) VectorShuffle 165 165 2 2
             167:    7(fvec4) Load 9
             168:   87(fvec2) VectorShuffle 167 167 0 3
             169:   87(fvec2) FAdd 166 168
             170:    7(fvec4) Load 139(vs_TEXCOORD3)
             171:    7(fvec4) VectorShuffle 170 169 4 5 2 3
                              Store 139(vs_TEXCOORD3) 171
             172:    143(ptr) AccessChain 80 28 76
             173:    6(float) Load 172
             174:    6(float) FNegate 173
             175:    143(ptr) AccessChain 80 28 76
                              Store 175 174
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 231

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 22 40 102 228
                              ExecutionMode 4 OriginUpperLeft
                              Name 22  "vs_TEXCOORD1"
                              Name 102  "vs_TEXCOORD3"
                              Decorate 9 RelaxedPrecision
                              Decorate 12 RelaxedPrecision
                              Decorate 12 DescriptorSet 0
                              Decorate 12 Binding 3
                              Decorate 13 RelaxedPrecision
                              Decorate 16 RelaxedPrecision
                              Decorate 16 DescriptorSet 0
                              Decorate 16 Binding 0
                              Decorate 17 RelaxedPrecision
                              Decorate 22(vs_TEXCOORD1) Location 1
                              Decorate 25 RelaxedPrecision
                              Decorate 26 RelaxedPrecision
                              MemberDecorate 28 0 Offset 0
                              MemberDecorate 28 1 RelaxedPrecision
                              MemberDecorate 28 1 Offset 16
                              MemberDecorate 28 2 RelaxedPrecision
                              MemberDecorate 28 2 Offset 32
                              MemberDecorate 28 3 Offset 48
                              MemberDecorate 28 4 Offset 64
                              MemberDecorate 28 5 RelaxedPrecision
                              MemberDecorate 28 5 Offset 80
                              Decorate 28 Block
                              Decorate 30 DescriptorSet 1
                              Decorate 30 Binding 0
                              Decorate 35 RelaxedPrecision
                              Decorate 36 RelaxedPrecision
                              Decorate 40 Location 0
                              Decorate 45 RelaxedPrecision
                              Decorate 46 RelaxedPrecision
                              Decorate 48 RelaxedPrecision
                              Decorate 49 RelaxedPrecision
                              Decorate 51 RelaxedPrecision
                              Decorate 58 RelaxedPrecision
                              Decorate 59 RelaxedPrecision
                              Decorate 60 RelaxedPrecision
                              Decorate 61 RelaxedPrecision
                              Decorate 68 RelaxedPrecision
                              Decorate 102(vs_TEXCOORD3) Location 2
                              Decorate 108 DescriptorSet 0
                              Decorate 108 Binding 4
                              Decorate 110 DescriptorSet 0
                              Decorate 110 Binding 2
                              Decorate 164 RelaxedPrecision
                              Decorate 190 RelaxedPrecision
                              Decorate 195 RelaxedPrecision
                              Decorate 196 RelaxedPrecision
                              Decorate 196 DescriptorSet 0
                              Decorate 196 Binding 5
                              Decorate 197 RelaxedPrecision
                              Decorate 198 RelaxedPrecision
                              Decorate 198 DescriptorSet 0
                              Decorate 198 Binding 1
                              Decorate 199 RelaxedPrecision
                              Decorate 203 RelaxedPrecision
                              Decorate 204 RelaxedPrecision
                              Decorate 205 RelaxedPrecision
                              Decorate 208 RelaxedPrecision
                              Decorate 210 RelaxedPrecision
                              Decorate 212 RelaxedPrecision
                              Decorate 213 RelaxedPrecision
                              Decorate 214 RelaxedPrecision
                              Decorate 217 RelaxedPrecision
                              Decorate 223 RelaxedPrecision
                              Decorate 228 RelaxedPrecision
                              Decorate 228 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypeImage 6(float) 2D sampled format:Unknown
              11:             TypePointer UniformConstant 10
              12:     11(ptr) Variable UniformConstant
              14:             TypeSampler
              15:             TypePointer UniformConstant 14
              16:     15(ptr) Variable UniformConstant
              18:             TypeSampledImage 10
              20:             TypeVector 6(float) 2
              21:             TypePointer Input 20(fvec2)
22(vs_TEXCOORD1):     21(ptr) Variable Input
              25:      8(ptr) Variable Private
              27:             TypeVector 6(float) 3
              28:             TypeStruct 7(fvec4) 7(fvec4) 27(fvec3) 7(fvec4) 7(fvec4) 7(fvec4)
              29:             TypePointer Uniform 28(struct)
              30:     29(ptr) Variable Uniform
              31:             TypeInt 32 1
              32:     31(int) Constant 1
              33:             TypePointer Uniform 7(fvec4)
              37:             TypePointer Private 27(fvec3)
              38:     37(ptr) Variable Private
              39:             TypePointer Input 7(fvec4)
              40:     39(ptr) Variable Input
              43:     31(int) Constant 5
              51:     37(ptr) Variable Private
              64:             TypeInt 32 0
              65:     64(int) Constant 3
              66:             TypePointer Private 6(float)
              69:             TypePointer Input 6(float)
              73:     64(int) Constant 0
              75:             TypeBool
              76:             TypeVector 75(bool) 2
              77:             TypePointer Private 76(bvec2)
              78:     77(ptr) Variable Private
              79:    6(float) Constant 0
              80:    7(fvec4) ConstantComposite 79 79 79 79
              81:     31(int) Constant 3
              85:             TypeVector 75(bool) 4
              88:     64(int) Constant 1
              89:             TypePointer Private 75(bool)
             100:             TypePointer Private 20(fvec2)
             101:    100(ptr) Variable Private
102(vs_TEXCOORD3):     39(ptr) Variable Input
             108:     11(ptr) Variable UniformConstant
             110:     15(ptr) Variable UniformConstant
             117:     31(int) Constant 0
             118:     64(int) Constant 2
             119:             TypePointer Uniform 6(float)
             129:    6(float) Constant 1065353216
             158:     66(ptr) Variable Private
             164:     66(ptr) Variable Private
             170:     37(ptr) Variable Private
             173:     31(int) Constant 4
             189:      8(ptr) Variable Private
             195:     37(ptr) Variable Private
             196:     11(ptr) Variable UniformConstant
             198:     15(ptr) Variable UniformConstant
             204:     37(ptr) Variable Private
             206:     31(int) Constant 2
             227:             TypePointer Output 7(fvec4)
             228:    227(ptr) Variable Output
               4:           2 Function None 3
               5:             Label
              13:          10 Load 12
              17:          14 Load 16
              19:          18 SampledImage 13 17
              23:   20(fvec2) Load 22(vs_TEXCOORD1)
              24:    7(fvec4) ImageSampleImplicitLod 19 23
                              Store 9 24
              26:    7(fvec4) Load 9
              34:     33(ptr) AccessChain 30 32
              35:    7(fvec4) Load 34
              36:    7(fvec4) FMul 26 35
                              Store 25 36
              41:    7(fvec4) Load 40
              42:   27(fvec3) VectorShuffle 41 41 0 1 2
              44:     33(ptr) AccessChain 30 43
              45:    7(fvec4) Load 44
              46:   27(fvec3) VectorShuffle 45 45 0 0 0
              47:   27(fvec3) FMul 42 46
              48:    7(fvec4) Load 25
              49:   27(fvec3) VectorShuffle 48 48 0 1 2
              50:   27(fvec3) FAdd 47 49
                              Store 38 50
              52:   27(fvec3) Load 38
              53:   27(fvec3) FNegate 52
              54:   27(fvec3) Load 38
              55:   27(fvec3) ExtInst 1(GLSL.std.450) 4(FAbs) 54
              56:   27(fvec3) FAdd 53 55
                              Store 51 56
              57:     33(ptr) AccessChain 30 43
              58:    7(fvec4) Load 57
              59:   27(fvec3) VectorShuffle 58 58 1 1 1
              60:   27(fvec3) Load 51
              61:   27(fvec3) FMul 59 60
              62:   27(fvec3) Load 38
              63:   27(fvec3) FAdd 61 62
                              Store 51 63
              67:     66(ptr) AccessChain 25 65
              68:    6(float) Load 67
              70:     69(ptr) AccessChain 40 65
              71:    6(float) Load 70
              72:    6(float) FMul 68 71
              74:     66(ptr) AccessChain 38 73
                              Store 74 72
              82:     33(ptr) AccessChain 30 81
              83:    7(fvec4) Load 82
              84:    7(fvec4) VectorShuffle 83 83 0 1 0 0
              86:   85(bvec4) FOrdLessThan 80 84
              87:   76(bvec2) VectorShuffle 86 86 0 1
                              Store 78 87
              90:     89(ptr) AccessChain 78 88
              91:    75(bool) Load 90
              92:     89(ptr) AccessChain 78 73
              93:    75(bool) Load 92
              94:    75(bool) LogicalOr 91 93
              95:     89(ptr) AccessChain 78 73
                              Store 95 94
              96:     89(ptr) AccessChain 78 73
              97:    75(bool) Load 96
                              SelectionMerge 99 None
                              BranchConditional 97 98 166
              98:               Label
             103:    7(fvec4)   Load 102(vs_TEXCOORD3)
             104:   20(fvec2)   VectorShuffle 103 103 0 1
             105:    7(fvec4)   Load 102(vs_TEXCOORD3)
             106:   20(fvec2)   VectorShuffle 105 105 3 3
             107:   20(fvec2)   FDiv 104 106
                                Store 101 107
             109:          10   Load 108
             111:          14   Load 110
             112:          18   SampledImage 109 111
             113:   20(fvec2)   Load 101
             114:    7(fvec4)   ImageSampleImplicitLod 112 113
             115:    6(float)   CompositeExtract 114 0
             116:     66(ptr)   AccessChain 101 73
                                Store 116 115
             120:    119(ptr)   AccessChain 30 117 118
             121:    6(float)   Load 120
             122:     66(ptr)   AccessChain 101 73
             123:    6(float)   Load 122
             124:    6(float)   FMul 121 123
             125:    119(ptr)   AccessChain 30 117 65
             126:    6(float)   Load 125
             127:    6(float)   FAdd 124 126
             128:     66(ptr)   AccessChain 101 73
                                Store 128 127
             130:     66(ptr)   AccessChain 101 73
             131:    6(float)   Load 130
             132:    6(float)   FDiv 129 131
             133:     66(ptr)   AccessChain 101 73
                                Store 133 132
             134:     66(ptr)   AccessChain 101 73
             135:    6(float)   Load 134
             136:    119(ptr)   AccessChain 30 81 73
             137:    6(float)   Load 136
             138:    6(float)   FNegate 137
             139:    6(float)   FAdd 135 138
             140:     66(ptr)   AccessChain 101 73
                                Store 140 139
             141:     66(ptr)   AccessChain 101 73
             142:    6(float)   Load 141
             143:     69(ptr)   AccessChain 102(vs_TEXCOORD3) 118
             144:    6(float)   Load 143
             145:    6(float)   FNegate 144
             146:    6(float)   FAdd 142 145
             147:     66(ptr)   AccessChain 101 73
                                Store 147 146
             148:     66(ptr)   AccessChain 101 73
             149:    6(float)   Load 148
             150:    119(ptr)   AccessChain 30 81 88
             151:    6(float)   Load 150
             152:    6(float)   FMul 149 151
             153:     66(ptr)   AccessChain 101 73
                                Store 153 152
             154:     66(ptr)   AccessChain 101 73
             155:    6(float)   Load 154
             156:    6(float)   ExtInst 1(GLSL.std.450) 43(FClamp) 155 79 129
             157:     66(ptr)   AccessChain 101 73
                                Store 157 156
             159:     66(ptr)   AccessChain 101 73
             160:    6(float)   Load 159
             161:     66(ptr)   AccessChain 38 73
             162:    6(float)   Load 161
             163:    6(float)   FMul 160 162
                                Store 158 163
             165:    6(float)   Load 158
                                Store 164 165
                                Branch 99
             166:               Label
             167:     66(ptr)   AccessChain 38 73
             168:    6(float)   Load 167
                                Store 164 168
             169:     66(ptr)   AccessChain 101 73
                                Store 169 129
                                Branch 99
              99:             Label
             171:     69(ptr) AccessChain 102(vs_TEXCOORD3) 118
             172:    6(float) Load 171
             174:    119(ptr) AccessChain 30 173 73
             175:    6(float) Load 174
             176:    6(float) FNegate 175
             177:    6(float) FAdd 172 176
             178:     66(ptr) AccessChain 170 73
                              Store 178 177
             179:     66(ptr) AccessChain 170 73
             180:    6(float) Load 179
             181:    119(ptr) AccessChain 30 173 88
             182:    6(float) Load 181
             183:    6(float) FMul 180 182
             184:     66(ptr) AccessChain 170 73
                              Store 184 183
             185:     66(ptr) AccessChain 170 73
             186:    6(float) Load 185
             187:    6(float) ExtInst 1(GLSL.std.450) 43(FClamp) 186 79 129
             188:     66(ptr) AccessChain 170 73
                              Store 188 187
             190:    6(float) Load 164
             191:     66(ptr) AccessChain 170 73
             192:    6(float) Load 191
             193:    6(float) FMul 190 192
             194:     66(ptr) AccessChain 189 65
                              Store 194 193
             197:          10 Load 196
             199:          14 Load 198
             200:          18 SampledImage 197 199
             201:   20(fvec2) Load 22(vs_TEXCOORD1)
             202:    7(fvec4) ImageSampleImplicitLod 200 201
             203:   27(fvec3) VectorShuffle 202 202 0 1 2
                              Store 195 203
             205:   27(fvec3) Load 195
             207:    119(ptr) AccessChain 30 206 73
             208:    6(float) Load 207
             209:    119(ptr) AccessChain 30 206 88
             210:    6(float) Load 209
             211:    119(ptr) AccessChain 30 206 118
             212:    6(float) Load 211
             213:   27(fvec3) CompositeConstruct 208 210 212
             214:   27(fvec3) FMul 205 213
                              Store 204 214
             215:   27(fvec3) Load 170
             216:   27(fvec3) VectorShuffle 215 215 0 0 0
             217:   27(fvec3) Load 204
             218:   27(fvec3) FMul 216 217
                              Store 170 218
             219:   27(fvec3) Load 170
             220:   20(fvec2) Load 101
             221:   27(fvec3) VectorShuffle 220 220 0 0 0
             222:   27(fvec3) FMul 219 221
             223:   27(fvec3) Load 51
             224:   27(fvec3) FAdd 222 223
             225:    7(fvec4) Load 189
             226:    7(fvec4) VectorShuffle 225 224 4 5 6 3
                              Store 189 226
             229:    7(fvec4) Load 189
                              Store 228 229
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 33 math, 6 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "$Globals" (208 bytes) on slot 0 {
  Vector4 unity_ParticleUVShiftData at 64
  Float unity_ParticleUseMeshColors at 80
  Vector4 _MainTex_ST at 96
}
Constant Buffer "UnityPerCamera" (144 bytes) on slot 1 {
  Vector4 _ProjectionParams at 80
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 2 {
  Matrix4x4 unity_MatrixV at 144
  Matrix4x4 unity_MatrixVP at 272
}
Constant Buffer "UnityDrawCallInfo" (16 bytes) on slot 3 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float       
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
// SV_InstanceID            0   x           4   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xy          2     NONE   float   xy  
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
//
      vs_5_0
      dcl_globalFlags refactoringAllowed
      dcl_constantbuffer CB0[7], immediateIndexed
      dcl_constantbuffer CB1[6], immediateIndexed
      dcl_constantbuffer CB2[21], immediateIndexed
      dcl_constantbuffer CB3[1], immediateIndexed
      dcl_resource_structured t0, 56
      dcl_input v0.xyz
      dcl_input v2.xyzw
      dcl_input v3.xy
      dcl_input_sgv v4.x, instance_id
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyzw
      dcl_output o2.xy
      dcl_output o3.xyzw
      dcl_temps 6
   0: mov r0.xyz, v0.xyzx
   1: mov r0.w, l(1.000000)
   2: iadd r1.x, v4.x, cb3[0].x
   3: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r2.xyz, r1.x, l(0), t0.zxyx
   4: mov r3.x, r2.z
   5: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r4.xyz, r1.x, l(12), t0.yxzx
   6: mov r3.y, r4.x
   7: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r1.yzw, r1.x, l(24), t0.xxyz
   8: mov r3.z, r1.z
   9: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r5.xyzw, r1.x, l(36), t0.xyzw
  10: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r1.x, r1.x, l(52), t0.xxxx
  11: round_ni r1.x, r1.x
  12: mov r3.w, r5.y
  13: dp4 r1.z, r3.xyzw, r0.xyzw
  14: mul r3.xyzw, r1.zzzz, cb2[18].xyzw
  15: mul r1.z, r1.z, cb2[10].z
  16: mov r4.x, r2.y
  17: mov r2.y, r4.z
  18: mov r4.z, r1.y
  19: mov r2.z, r1.w
  20: mov r4.w, r5.x
  21: dp4 r1.y, r4.xyzw, r0.xyzw
  22: mad r3.xyzw, cb2[17].xyzw, r1.yyyy, r3.xyzw
  23: mad r1.y, cb2[9].z, r1.y, r1.z
  24: mov r2.w, r5.z
  25: dp4 r0.x, r2.xyzw, r0.xyzw
  26: mad r2.xyzw, cb2[19].xyzw, r0.xxxx, r3.xyzw
  27: mad r0.x, cb2[11].z, r0.x, r1.y
  28: add r0.x, r0.x, cb2[12].z
  29: mov o3.z, -r0.x
  30: add r0.xyzw, r2.xyzw, cb2[20].xyzw
  31: mov o0.xyzw, r0.xyzw
  32: and r0.z, r5.w, l(255)
  33: utof r2.x, r0.z
  34: ubfe r1.yz, l(0, 8, 8, 0), l(0, 8, 16, 0), r5.wwww
  35: ushr r0.z, r5.w, l(24)
  36: utof r2.w, r0.z
  37: utof r2.yz, r1.yyzy
  38: mul r2.xyzw, r2.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
  39: add r3.xyzw, v2.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
  40: mad r3.xyzw, cb0[5].xxxx, r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  41: mul o1.xyzw, r2.xyzw, r3.xyzw
  42: div r0.z, r1.x, cb0[4].y
  43: round_ni r0.z, r0.z
  44: mad r1.x, -r0.z, cb0[4].y, r1.x
  45: round_ni r1.x, r1.x
  46: mul r1.x, r1.x, cb0[4].z
  47: add r1.z, -cb0[4].w, l(1.000000)
  48: mad r1.y, -r0.z, cb0[4].w, r1.z
  49: mad r1.xy, v3.xyxx, cb0[4].zwzz, r1.xyxx
  50: ne r0.z, cb0[4].x, l(0.000000)
  51: movc r1.xy, r0.zzzz, r1.xyxx, v3.xyxx
  52: mad o2.xy, r1.xyxx, cb0[6].xyxx, cb0[6].zwzz
  53: mul r0.y, r0.y, cb1[5].x
  54: mul r1.xzw, r0.xxwy, l(0.500000, 0.000000, 0.500000, 0.500000)
  55: mov o3.w, r0.w
  56: add o3.xy, r1.zzzz, r1.xwxx
  57: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 2 math, 1 temp registers, 1 textures
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (208 bytes) on slot 0 {
  Vector4 _Color at 112
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyz 
// TEXCOORD                 1   xy          2     NONE   float   xy  
// TEXCOORD                 3   xyzw        3     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_5_0
      dcl_globalFlags refactoringAllowed
      dcl_constantbuffer CB0[8], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v1.xyz
      dcl_input_ps linear v2.xy
      dcl_output o0.xyzw
      dcl_temps 1
   0: sample_indexable(texture2d)(float,float,float,float) r0.xyz, v2.xyxx, t0.xyzw, s0
   1: mul r0.xyz, r0.xyzx, cb0[7].xyzx
   2: mul o0.xyz, r0.xyzx, v1.xyzx
   3: mov o0.w, l(1.000000)
   4: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (16 bytes) {
  Vector4 _Color at 0
}
Constant Buffer "$Globals" (208 bytes) {
  Matrix4x4 unity_MatrixV at 16
  Matrix4x4 unity_MatrixVP at 80
  Vector4 _ProjectionParams at 0
  ScalarInt unity_BaseInstanceID at 144
  Vector4 unity_ParticleUVShiftData at 160
  Float unity_ParticleUseMeshColors at 176
  Vector4 _MainTex_ST at 192
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
uniform 	vec4 _MainTex_ST;
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
layout(location = 0) out highp vec4 vs_COLOR0;
layout(location = 1) out highp vec2 vs_TEXCOORD1;
layout(location = 2) out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat7;
uvec2 u_xlatu7;
float u_xlat12;
uint u_xlatu12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat3.x = u_xlat2.z;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat4.x;
    u_xlat7.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]));
    u_xlat3.z = u_xlat7.y;
    u_xlat5 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.w = u_xlat5.y;
    u_xlat13 = dot(u_xlat3, u_xlat0);
    u_xlat3 = vec4(u_xlat13) * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat13 = u_xlat13 * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = u_xlat2.y;
    u_xlat2.y = u_xlat4.z;
    u_xlat4.z = u_xlat7.x;
    u_xlat2.z = u_xlat7.z;
    u_xlat4.w = u_xlat5.x;
    u_xlat7.x = dot(u_xlat4, u_xlat0);
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat7.xxxx + u_xlat3;
    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat7.x + u_xlat13;
    u_xlat2.w = u_xlat5.z;
    u_xlat0.x = dot(u_xlat2, u_xlat0);
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.xxxx + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.x + u_xlat7.x;
    u_xlat0.x = u_xlat0.x + hlslcc_mtx4x4unity_MatrixV[3].z;
    vs_TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat0;
    u_xlat2 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat2 = vec4(unity_ParticleUseMeshColors) * u_xlat2 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu12 = floatBitsToUint(u_xlat5.w) & 255u;
    u_xlat3.x = float(u_xlatu12);
    u_xlatu7.x = bitfieldExtract(floatBitsToUint(u_xlat5.w), int(8), int(8));
    u_xlatu7.y = bitfieldExtract(floatBitsToUint(u_xlat5.w), int(16), int(8));
    u_xlatu12 = floatBitsToUint(u_xlat5.w) >> 24u;
    u_xlat3.w = float(u_xlatu12);
    u_xlat3.yz = vec2(u_xlatu7.xy);
    u_xlat2 = u_xlat2 * u_xlat3;
    vs_COLOR0 = u_xlat2 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat12 = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat12 = floor(u_xlat12);
    u_xlat1.x = (-u_xlat12) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_ParticleUVShiftData.z;
    u_xlat13 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat12) * unity_ParticleUVShiftData.w + u_xlat13;
    u_xlat1.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb12 = unity_ParticleUVShiftData.x!=0.0;
    u_xlat1.xy = (bool(u_xlatb12)) ? u_xlat1.xy : in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.w = u_xlat0.w;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _Color;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
layout(location = 0) in highp vec4 vs_COLOR0;
layout(location = 1) in highp vec2 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
mediump vec3 u_xlat16_1;
void main()
{
    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (192 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 16
  Matrix4x4 unity_MatrixVP at 80
  Vector4 _ProjectionParams at 0
  Vector4 unity_ParticleUVShiftData at 144
  Float unity_ParticleUseMeshColors at 160
  Vector4 _MainTex_ST at 176
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float unity_ParticleUseMeshColors;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 COLOR0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
};

template <int N> vec<uint, N> bitFieldExtractU(const vec<uint, N> width, const vec<uint, N> offset, const vec<uint, N> src)
{
	vec<bool, N> isWidthZero = (width == 0);
	vec<bool, N> needsClamp = ((width + offset) < 32);
	vec<uint, N> clampVersion = src << (32-(width+offset));
	clampVersion = clampVersion >> (32 - width);
	vec<uint, N> simpleVersion = src >> offset;
	vec<uint, N> res = select(simpleVersion, clampVersion, needsClamp);
	return select(res, vec<uint, N>(0), isWidthZero);
}; 
vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    int u_xlati1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat7;
    uint2 u_xlatu7;
    float u_xlat12;
    uint u_xlatu12;
    bool u_xlatb12;
    float u_xlat13;
    u_xlat0.xyz = input.POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat2.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 1]));
    u_xlat3.x = u_xlat2.z;
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 2]));
    u_xlat3.y = u_xlat4.x;
    u_xlat7.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 2]));
    u_xlat3.z = u_xlat7.y;
    u_xlat5 = float4(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 3]));
    u_xlat1.x = as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x34 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.w = u_xlat5.y;
    u_xlat13 = dot(u_xlat3, u_xlat0);
    u_xlat3 = float4(u_xlat13) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat13 = u_xlat13 * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = u_xlat2.y;
    u_xlat2.y = u_xlat4.z;
    u_xlat4.z = u_xlat7.x;
    u_xlat2.z = u_xlat7.z;
    u_xlat4.w = u_xlat5.x;
    u_xlat7.x = dot(u_xlat4, u_xlat0);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat7.xxxx, u_xlat3);
    u_xlat7.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat7.x, u_xlat13);
    u_xlat2.w = u_xlat5.z;
    u_xlat0.x = dot(u_xlat2, u_xlat0);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.xxxx, u_xlat3);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat0.x, u_xlat7.x);
    u_xlat0.x = u_xlat0.x + VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z;
    output.TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0 = u_xlat2 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    output.mtl_Position = u_xlat0;
    u_xlat2 = input.COLOR0 + float4(-1.0, -1.0, -1.0, -1.0);
    u_xlat2 = fma(float4(VGlobals.unity_ParticleUseMeshColors), u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlatu12 = as_type<uint>(u_xlat5.w) & 0xffu;
    u_xlat3.x = float(u_xlatu12);
    u_xlatu7.xy = bitFieldExtractU(uint2(0x8u, 0x8u), uint2(0x8u, 0x10u), as_type<uint2>(u_xlat5.ww));
    u_xlatu12 = as_type<uint>(u_xlat5.w) >> 0x18u;
    u_xlat3.w = float(u_xlatu12);
    u_xlat3.yz = float2(u_xlatu7.xy);
    u_xlat2 = u_xlat2 * u_xlat3;
    output.COLOR0 = u_xlat2 * float4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat12 = u_xlat1.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat12 = floor(u_xlat12);
    u_xlat1.x = fma((-u_xlat12), VGlobals.unity_ParticleUVShiftData.y, u_xlat1.x);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat13 = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = fma((-u_xlat12), VGlobals.unity_ParticleUVShiftData.w, u_xlat13);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat1.xy);
    u_xlatb12 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat1.xy = (bool(u_xlatb12)) ? u_xlat1.xy : input.TEXCOORD0.xy;
    output.TEXCOORD1.xy = fma(u_xlat1.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat0.y = u_xlat0.y * VGlobals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD3.w = u_xlat0.w;
    output.TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "FGlobals" (16 bytes) on slot 0 {
  Vector4 _Color at 0
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Color;
};

struct Mtl_FragmentIn
{
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (16 bytes) {
  Vector4 _Color at 0
}
Constant Buffer "$Globals" (208 bytes) {
  Matrix4x4 unity_MatrixV at 16
  Matrix4x4 unity_MatrixVP at 80
  Vector4 _ProjectionParams at 0
  ScalarInt unity_BaseInstanceID at 144
  Vector4 unity_ParticleUVShiftData at 160
  Float unity_ParticleUseMeshColors at 176
  Vector4 _MainTex_ST at 192
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require
#ifdef GL_ARB_shader_storage_buffer_object
#extension GL_ARB_shader_storage_buffer_object : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
uniform 	vec4 _MainTex_ST;
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in  vec4 in_POSITION0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
layout(location = 0) out vec4 vs_COLOR0;
layout(location = 1) out vec2 vs_TEXCOORD1;
layout(location = 2) out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat7;
uvec2 u_xlatu7;
float u_xlat12;
uint u_xlatu12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat3.x = u_xlat2.z;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat4.x;
    u_xlat7.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]));
    u_xlat3.z = u_xlat7.y;
    u_xlat5 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.w = u_xlat5.y;
    u_xlat13 = dot(u_xlat3, u_xlat0);
    u_xlat3 = vec4(u_xlat13) * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat13 = u_xlat13 * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = u_xlat2.y;
    u_xlat2.y = u_xlat4.z;
    u_xlat4.z = u_xlat7.x;
    u_xlat2.z = u_xlat7.z;
    u_xlat4.w = u_xlat5.x;
    u_xlat7.x = dot(u_xlat4, u_xlat0);
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat7.xxxx + u_xlat3;
    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat7.x + u_xlat13;
    u_xlat2.w = u_xlat5.z;
    u_xlat0.x = dot(u_xlat2, u_xlat0);
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.xxxx + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.x + u_xlat7.x;
    u_xlat0.x = u_xlat0.x + hlslcc_mtx4x4unity_MatrixV[3].z;
    vs_TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat0;
    u_xlatu12 = floatBitsToUint(u_xlat5.w) & 255u;
    u_xlat2.x = float(u_xlatu12);
    u_xlatu7.x = bitfieldExtract(floatBitsToUint(u_xlat5.w), int(8), int(8));
    u_xlatu7.y = bitfieldExtract(floatBitsToUint(u_xlat5.w), int(16), int(8));
    u_xlatu12 = floatBitsToUint(u_xlat5.w) >> 24u;
    u_xlat2.w = float(u_xlatu12);
    u_xlat2.yz = vec2(u_xlatu7.xy);
    u_xlat2 = u_xlat2 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat3 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat3 = vec4(unity_ParticleUseMeshColors) * u_xlat3 + vec4(1.0, 1.0, 1.0, 1.0);
    vs_COLOR0 = u_xlat2 * u_xlat3;
    u_xlat12 = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat12 = floor(u_xlat12);
    u_xlat1.x = (-u_xlat12) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_ParticleUVShiftData.z;
    u_xlat13 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat12) * unity_ParticleUVShiftData.w + u_xlat13;
    u_xlat1.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb12 = unity_ParticleUVShiftData.x!=0.0;
    u_xlat1.xy = (bool(u_xlatb12)) ? u_xlat1.xy : in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.w = u_xlat0.w;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
layout(location = 0) in  vec4 vs_COLOR0;
layout(location = 1) in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat10_0;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Set 2D Texture "_MainTex" to set: 0, binding: 1, used in: Fragment  using sampler in set: 0, binding: 0, used in: Fragment 

Constant Buffer "PGlobals3970563665" (16 bytes) on set: 1, binding: 0, used in: Fragment  {
  Vector4 _Color at 0
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on set: 1, binding: 2, used in: Vertex  {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "VGlobals3970563665" (192 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixV at 16
  Matrix4x4 unity_MatrixVP at 80
  Vector4 _MainTex_ST at 176
  Vector4 _ProjectionParams at 0
  Vector4 unity_ParticleUVShiftData at 144
  Float unity_ParticleUseMeshColors at 160
}

Set Buffer  "unity_ParticleInstanceData" to set: 0, binding: 2, used in: Vertex 
Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 416

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 26 233 246 249 301 346 377
                              Name 233  "vs_TEXCOORD3"
                              Name 377  "vs_TEXCOORD1"
                              Decorate 11 Location 0
                              Decorate 26 BuiltIn InstanceIndex
                              MemberDecorate 28 0 Offset 0
                              MemberDecorate 28 1 Offset 4
                              Decorate 28 Block
                              Decorate 30 DescriptorSet 1
                              Decorate 30 Binding 2
                              Decorate 38 ArrayStride 4
                              MemberDecorate 39 0 Offset 0
                              Decorate 40 ArrayStride 56
                              MemberDecorate 41 0 NonWritable
                              MemberDecorate 41 0 Offset 0
                              Decorate 41 BufferBlock
                              Decorate 43 DescriptorSet 0
                              Decorate 43 Binding 2
                              Decorate 155 ArrayStride 16
                              Decorate 156 ArrayStride 16
                              MemberDecorate 157 0 Offset 0
                              MemberDecorate 157 1 Offset 16
                              MemberDecorate 157 2 Offset 80
                              MemberDecorate 157 3 Offset 144
                              MemberDecorate 157 4 Offset 160
                              MemberDecorate 157 5 Offset 176
                              Decorate 157 Block
                              Decorate 159 DescriptorSet 1
                              Decorate 159 Binding 1
                              Decorate 233(vs_TEXCOORD3) Location 2
                              MemberDecorate 244 0 BuiltIn Position
                              MemberDecorate 244 1 BuiltIn PointSize
                              MemberDecorate 244 2 BuiltIn ClipDistance
                              Decorate 244 Block
                              Decorate 249 RelaxedPrecision
                              Decorate 249 Location 1
                              Decorate 250 RelaxedPrecision
                              Decorate 253 RelaxedPrecision
                              Decorate 301 Location 0
                              Decorate 346 Location 2
                              Decorate 377(vs_TEXCOORD1) Location 1
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              12:             TypeVector 6(float) 3
              17:    6(float) Constant 1065353216
              18:             TypeInt 32 0
              19:     18(int) Constant 3
              20:             TypePointer Private 6(float)
              22:             TypeInt 32 1
              23:             TypePointer Private 22(int)
              24:     23(ptr) Variable Private
              25:             TypePointer Input 22(int)
              26:     25(ptr) Variable Input
              28:             TypeStruct 22(int) 22(int)
              29:             TypePointer Uniform 28(struct)
              30:     29(ptr) Variable Uniform
              31:     22(int) Constant 0
              32:             TypePointer Uniform 22(int)
              36:      8(ptr) Variable Private
              37:     18(int) Constant 14
              38:             TypeArray 18(int) 37
              39:             TypeStruct 38
              40:             TypeRuntimeArray 39(struct)
              41:             TypeStruct 40
              42:             TypePointer Uniform 41(struct)
              43:     42(ptr) Variable Uniform
              45:     22(int) Constant 2
              46:             TypePointer Uniform 18(int)
              55:     22(int) Constant 1
              62:      8(ptr) Variable Private
              63:     18(int) Constant 2
              66:     18(int) Constant 0
              68:      8(ptr) Variable Private
              70:     22(int) Constant 4
              75:     22(int) Constant 3
              80:     22(int) Constant 5
              89:     18(int) Constant 1
              91:             TypePointer Private 12(fvec3)
              92:     91(ptr) Variable Private
              94:     22(int) Constant 6
              99:     22(int) Constant 7
             104:     22(int) Constant 8
             112:      8(ptr) Variable Private
             114:     22(int) Constant 9
             119:     22(int) Constant 10
             124:     22(int) Constant 11
             129:     22(int) Constant 12
             134:      8(ptr) Variable Private
             136:     22(int) Constant 13
             148:     20(ptr) Variable Private
             154:     18(int) Constant 4
             155:             TypeArray 7(fvec4) 154
             156:             TypeArray 7(fvec4) 154
             157:             TypeStruct 7(fvec4) 155 156 7(fvec4) 6(float) 7(fvec4)
             158:             TypePointer Uniform 157(struct)
             159:    158(ptr) Variable Uniform
             160:             TypePointer Uniform 7(fvec4)
             165:             TypePointer Uniform 6(float)
             232:             TypePointer Output 7(fvec4)
233(vs_TEXCOORD3):    232(ptr) Variable Output
             237:             TypePointer Output 6(float)
             243:             TypeArray 6(float) 89
             244:             TypeStruct 7(fvec4) 6(float) 243
             245:             TypePointer Output 244(struct)
             246:    245(ptr) Variable Output
             249:     10(ptr) Variable Input
             251:    6(float) Constant 3212836864
             252:    7(fvec4) ConstantComposite 251 251 251 251
             259:    7(fvec4) ConstantComposite 17 17 17 17
             261:             TypePointer Private 18(int)
             262:    261(ptr) Variable Private
             266:     18(int) Constant 255
             271:             TypeVector 18(int) 2
             272:             TypePointer Private 271(ivec2)
             273:    272(ptr) Variable Private
             282:     22(int) Constant 16
             288:     18(int) Constant 24
             294:             TypeVector 6(float) 2
             301:    232(ptr) Variable Output
             303:    6(float) Constant 998277249
             304:    7(fvec4) ConstantComposite 303 303 303 303
             306:     20(ptr) Variable Private
             345:             TypePointer Input 294(fvec2)
             346:    345(ptr) Variable Input
             357:             TypeBool
             358:             TypePointer Private 357(bool)
             359:    358(ptr) Variable Private
             362:    6(float) Constant 0
             365:             TypePointer Function 294(fvec2)
             376:             TypePointer Output 294(fvec2)
377(vs_TEXCOORD1):    376(ptr) Variable Output
             396:    6(float) Constant 1056964608
             397:   12(fvec3) ConstantComposite 396 396 396
               4:           2 Function None 3
               5:             Label
             366:    365(ptr) Variable Function
              13:    7(fvec4) Load 11
              14:   12(fvec3) VectorShuffle 13 13 0 1 2
              15:    7(fvec4) Load 9
              16:    7(fvec4) VectorShuffle 15 14 4 5 6 3
                              Store 9 16
              21:     20(ptr) AccessChain 9 19
                              Store 21 17
              27:     22(int) Load 26
              33:     32(ptr) AccessChain 30 31
              34:     22(int) Load 33
              35:     22(int) IAdd 27 34
                              Store 24 35
              44:     22(int) Load 24
              47:     46(ptr) AccessChain 43 31 44 31 45
              48:     18(int) Load 47
              49:    6(float) Bitcast 48
              50:     22(int) Load 24
              51:     46(ptr) AccessChain 43 31 50 31 31
              52:     18(int) Load 51
              53:    6(float) Bitcast 52
              54:     22(int) Load 24
              56:     46(ptr) AccessChain 43 31 54 31 55
              57:     18(int) Load 56
              58:    6(float) Bitcast 57
              59:   12(fvec3) CompositeConstruct 49 53 58
              60:    7(fvec4) Load 36
              61:    7(fvec4) VectorShuffle 60 59 4 5 6 3
                              Store 36 61
              64:     20(ptr) AccessChain 36 63
              65:    6(float) Load 64
              67:     20(ptr) AccessChain 62 66
                              Store 67 65
              69:     22(int) Load 24
              71:     46(ptr) AccessChain 43 31 69 31 70
              72:     18(int) Load 71
              73:    6(float) Bitcast 72
              74:     22(int) Load 24
              76:     46(ptr) AccessChain 43 31 74 31 75
              77:     18(int) Load 76
              78:    6(float) Bitcast 77
              79:     22(int) Load 24
              81:     46(ptr) AccessChain 43 31 79 31 80
              82:     18(int) Load 81
              83:    6(float) Bitcast 82
              84:   12(fvec3) CompositeConstruct 73 78 83
              85:    7(fvec4) Load 68
              86:    7(fvec4) VectorShuffle 85 84 4 5 6 3
                              Store 68 86
              87:     20(ptr) AccessChain 68 66
              88:    6(float) Load 87
              90:     20(ptr) AccessChain 62 89
                              Store 90 88
              93:     22(int) Load 24
              95:     46(ptr) AccessChain 43 31 93 31 94
              96:     18(int) Load 95
              97:    6(float) Bitcast 96
              98:     22(int) Load 24
             100:     46(ptr) AccessChain 43 31 98 31 99
             101:     18(int) Load 100
             102:    6(float) Bitcast 101
             103:     22(int) Load 24
             105:     46(ptr) AccessChain 43 31 103 31 104
             106:     18(int) Load 105
             107:    6(float) Bitcast 106
             108:   12(fvec3) CompositeConstruct 97 102 107
                              Store 92 108
             109:     20(ptr) AccessChain 92 89
             110:    6(float) Load 109
             111:     20(ptr) AccessChain 62 63
                              Store 111 110
             113:     22(int) Load 24
             115:     46(ptr) AccessChain 43 31 113 31 114
             116:     18(int) Load 115
             117:    6(float) Bitcast 116
             118:     22(int) Load 24
             120:     46(ptr) AccessChain 43 31 118 31 119
             121:     18(int) Load 120
             122:    6(float) Bitcast 121
             123:     22(int) Load 24
             125:     46(ptr) AccessChain 43 31 123 31 124
             126:     18(int) Load 125
             127:    6(float) Bitcast 126
             128:     22(int) Load 24
             130:     46(ptr) AccessChain 43 31 128 31 129
             131:     18(int) Load 130
             132:    6(float) Bitcast 131
             133:    7(fvec4) CompositeConstruct 117 122 127 132
                              Store 112 133
             135:     22(int) Load 24
             137:     46(ptr) AccessChain 43 31 135 31 136
             138:     18(int) Load 137
             139:    6(float) Bitcast 138
             140:     20(ptr) AccessChain 134 66
                              Store 140 139
             141:     20(ptr) AccessChain 134 66
             142:    6(float) Load 141
             143:    6(float) ExtInst 1(GLSL.std.450) 8(Floor) 142
             144:     20(ptr) AccessChain 134 66
                              Store 144 143
             145:     20(ptr) AccessChain 112 89
             146:    6(float) Load 145
             147:     20(ptr) AccessChain 62 19
                              Store 147 146
             149:    7(fvec4) Load 62
             150:    7(fvec4) Load 9
             151:    6(float) Dot 149 150
                              Store 148 151
             152:    6(float) Load 148
             153:    7(fvec4) CompositeConstruct 152 152 152 152
             161:    160(ptr) AccessChain 159 45 55
             162:    7(fvec4) Load 161
             163:    7(fvec4) FMul 153 162
                              Store 62 163
             164:    6(float) Load 148
             166:    165(ptr) AccessChain 159 55 55 63
             167:    6(float) Load 166
             168:    6(float) FMul 164 167
                              Store 148 168
             169:     20(ptr) AccessChain 36 89
             170:    6(float) Load 169
             171:     20(ptr) AccessChain 68 66
                              Store 171 170
             172:     20(ptr) AccessChain 68 63
             173:    6(float) Load 172
             174:     20(ptr) AccessChain 36 89
                              Store 174 173
             175:     20(ptr) AccessChain 92 66
             176:    6(float) Load 175
             177:     20(ptr) AccessChain 68 63
                              Store 177 176
             178:     20(ptr) AccessChain 92 63
             179:    6(float) Load 178
             180:     20(ptr) AccessChain 36 63
                              Store 180 179
             181:     20(ptr) AccessChain 112 66
             182:    6(float) Load 181
             183:     20(ptr) AccessChain 68 19
                              Store 183 182
             184:    7(fvec4) Load 68
             185:    7(fvec4) Load 9
             186:    6(float) Dot 184 185
             187:     20(ptr) AccessChain 92 66
                              Store 187 186
             188:    160(ptr) AccessChain 159 45 31
             189:    7(fvec4) Load 188
             190:   12(fvec3) Load 92
             191:    7(fvec4) VectorShuffle 190 190 0 0 0 0
             192:    7(fvec4) FMul 189 191
             193:    7(fvec4) Load 62
             194:    7(fvec4) FAdd 192 193
                              Store 62 194
             195:    165(ptr) AccessChain 159 55 31 63
             196:    6(float) Load 195
             197:     20(ptr) AccessChain 92 66
             198:    6(float) Load 197
             199:    6(float) FMul 196 198
             200:    6(float) Load 148
             201:    6(float) FAdd 199 200
             202:     20(ptr) AccessChain 92 66
                              Store 202 201
             203:     20(ptr) AccessChain 112 63
             204:    6(float) Load 203
             205:     20(ptr) AccessChain 36 19
                              Store 205 204
             206:    7(fvec4) Load 36
             207:    7(fvec4) Load 9
             208:    6(float) Dot 206 207
             209:     20(ptr) AccessChain 9 66
                              Store 209 208
             210:    160(ptr) AccessChain 159 45 45
             211:    7(fvec4) Load 210
             212:    7(fvec4) Load 9
             213:    7(fvec4) VectorShuffle 212 212 0 0 0 0
             214:    7(fvec4) FMul 211 213
             215:    7(fvec4) Load 62
             216:    7(fvec4) FAdd 214 215
                              Store 36 216
             217:    165(ptr) AccessChain 159 55 45 63
             218:    6(float) Load 217
             219:     20(ptr) AccessChain 9 66
             220:    6(float) Load 219
             221:    6(float) FMul 218 220
             222:     20(ptr) AccessChain 92 66
             223:    6(float) Load 222
             224:    6(float) FAdd 221 223
             225:     20(ptr) AccessChain 9 66
                              Store 225 224
             226:     20(ptr) AccessChain 9 66
             227:    6(float) Load 226
             228:    165(ptr) AccessChain 159 55 75 63
             229:    6(float) Load 228
             230:    6(float) FAdd 227 229
             231:     20(ptr) AccessChain 9 66
                              Store 231 230
             234:     20(ptr) AccessChain 9 66
             235:    6(float) Load 234
             236:    6(float) FNegate 235
             238:    237(ptr) AccessChain 233(vs_TEXCOORD3) 63
                              Store 238 236
             239:    7(fvec4) Load 36
             240:    160(ptr) AccessChain 159 45 75
             241:    7(fvec4) Load 240
             242:    7(fvec4) FAdd 239 241
                              Store 9 242
             247:    7(fvec4) Load 9
             248:    232(ptr) AccessChain 246 31
                              Store 248 247
             250:    7(fvec4) Load 249
             253:    7(fvec4) FAdd 250 252
                              Store 36 253
             254:    165(ptr) AccessChain 159 70
             255:    6(float) Load 254
             256:    7(fvec4) CompositeConstruct 255 255 255 255
             257:    7(fvec4) Load 36
             258:    7(fvec4) FMul 256 257
             260:    7(fvec4) FAdd 258 259
                              Store 36 260
             263:     20(ptr) AccessChain 112 19
             264:    6(float) Load 263
             265:     18(int) Bitcast 264
             267:     18(int) BitwiseAnd 265 266
                              Store 262 267
             268:     18(int) Load 262
             269:    6(float) ConvertUToF 268
             270:     20(ptr) AccessChain 62 66
                              Store 270 269
             274:     20(ptr) AccessChain 112 19
             275:    6(float) Load 274
             276:     18(int) Bitcast 275
             277:     18(int) BitFieldUExtract 276 104 104
             278:    261(ptr) AccessChain 273 66
                              Store 278 277
             279:     20(ptr) AccessChain 112 19
             280:    6(float) Load 279
             281:     18(int) Bitcast 280
             283:     18(int) BitFieldUExtract 281 282 104
             284:    261(ptr) AccessChain 273 89
                              Store 284 283
             285:     20(ptr) AccessChain 112 19
             286:    6(float) Load 285
             287:     18(int) Bitcast 286
             289:     18(int) ShiftRightLogical 287 288
                              Store 262 289
             290:     18(int) Load 262
             291:    6(float) ConvertUToF 290
             292:     20(ptr) AccessChain 62 19
                              Store 292 291
             293:  271(ivec2) Load 273
             295:  294(fvec2) ConvertUToF 293
             296:    7(fvec4) Load 62
             297:    7(fvec4) VectorShuffle 296 295 0 4 5 3
                              Store 62 297
             298:    7(fvec4) Load 36
             299:    7(fvec4) Load 62
             300:    7(fvec4) FMul 298 299
                              Store 36 300
             302:    7(fvec4) Load 36
             305:    7(fvec4) FMul 302 304
                              Store 301 305
             307:     20(ptr) AccessChain 134 66
             308:    6(float) Load 307
             309:    165(ptr) AccessChain 159 75 89
             310:    6(float) Load 309
             311:    6(float) FDiv 308 310
                              Store 306 311
             312:    6(float) Load 306
             313:    6(float) ExtInst 1(GLSL.std.450) 8(Floor) 312
                              Store 306 313
             314:    6(float) Load 306
             315:    6(float) FNegate 314
             316:    165(ptr) AccessChain 159 75 89
             317:    6(float) Load 316
             318:    6(float) FMul 315 317
             319:     20(ptr) AccessChain 134 66
             320:    6(float) Load 319
             321:    6(float) FAdd 318 320
             322:     20(ptr) AccessChain 134 66
                              Store 322 321
             323:     20(ptr) AccessChain 134 66
             324:    6(float) Load 323
             325:    6(float) ExtInst 1(GLSL.std.450) 8(Floor) 324
             326:     20(ptr) AccessChain 134 66
                              Store 326 325
             327:     20(ptr) AccessChain 134 66
             328:    6(float) Load 327
             329:    165(ptr) AccessChain 159 75 63
             330:    6(float) Load 329
             331:    6(float) FMul 328 330
             332:     20(ptr) AccessChain 134 66
                              Store 332 331
             333:    165(ptr) AccessChain 159 75 19
             334:    6(float) Load 333
             335:    6(float) FNegate 334
             336:    6(float) FAdd 335 17
                              Store 148 336
             337:    6(float) Load 306
             338:    6(float) FNegate 337
             339:    165(ptr) AccessChain 159 75 19
             340:    6(float) Load 339
             341:    6(float) FMul 338 340
             342:    6(float) Load 148
             343:    6(float) FAdd 341 342
             344:     20(ptr) AccessChain 134 89
                              Store 344 343
             347:  294(fvec2) Load 346
             348:    160(ptr) AccessChain 159 75
             349:    7(fvec4) Load 348
             350:  294(fvec2) VectorShuffle 349 349 2 3
             351:  294(fvec2) FMul 347 350
             352:    7(fvec4) Load 134
             353:  294(fvec2) VectorShuffle 352 352 0 1
             354:  294(fvec2) FAdd 351 353
             355:    7(fvec4) Load 134
             356:    7(fvec4) VectorShuffle 355 354 4 5 2 3
                              Store 134 356
             360:    165(ptr) AccessChain 159 75 66
             361:    6(float) Load 360
             363:   357(bool) FOrdNotEqual 361 362
                              Store 359 363
             364:   357(bool) Load 359
                              SelectionMerge 368 None
                              BranchConditional 364 367 371
             367:               Label
             369:    7(fvec4)   Load 134
             370:  294(fvec2)   VectorShuffle 369 369 0 1
                                Store 366 370
                                Branch 368
             371:               Label
             372:  294(fvec2)   Load 346
                                Store 366 372
                                Branch 368
             368:             Label
             373:  294(fvec2) Load 366
             374:    7(fvec4) Load 134
             375:    7(fvec4) VectorShuffle 374 373 4 5 2 3
                              Store 134 375
             378:    7(fvec4) Load 134
             379:  294(fvec2) VectorShuffle 378 378 0 1
             380:    160(ptr) AccessChain 159 80
             381:    7(fvec4) Load 380
             382:  294(fvec2) VectorShuffle 381 381 0 1
             383:  294(fvec2) FMul 379 382
             384:    160(ptr) AccessChain 159 80
             385:    7(fvec4) Load 384
             386:  294(fvec2) VectorShuffle 385 385 2 3
             387:  294(fvec2) FAdd 383 386
                              Store 377(vs_TEXCOORD1) 387
             388:     20(ptr) AccessChain 9 89
             389:    6(float) Load 388
             390:    165(ptr) AccessChain 159 31 66
             391:    6(float) Load 390
             392:    6(float) FMul 389 391
             393:     20(ptr) AccessChain 9 89
                              Store 393 392
             394:    7(fvec4) Load 9
             395:   12(fvec3) VectorShuffle 394 394 0 3 1
             398:   12(fvec3) FMul 395 397
             399:    7(fvec4) Load 134
             400:    7(fvec4) VectorShuffle 399 398 4 1 5 6
                              Store 134 400
             401:     20(ptr) AccessChain 9 19
             402:    6(float) Load 401
             403:    237(ptr) AccessChain 233(vs_TEXCOORD3) 19
                              Store 403 402
             404:    7(fvec4) Load 134
             405:  294(fvec2) VectorShuffle 404 404 2 2
             406:    7(fvec4) Load 134
             407:  294(fvec2) VectorShuffle 406 406 0 3
             408:  294(fvec2) FAdd 405 407
             409:    7(fvec4) Load 233(vs_TEXCOORD3)
             410:    7(fvec4) VectorShuffle 409 408 4 5 2 3
                              Store 233(vs_TEXCOORD3) 410
             411:    237(ptr) AccessChain 246 31 89
             412:    6(float) Load 411
             413:    6(float) FNegate 412
             414:    237(ptr) AccessChain 246 31 89
                              Store 414 413
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 57

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 22 42 47
                              ExecutionMode 4 OriginUpperLeft
                              Name 22  "vs_TEXCOORD1"
                              Decorate 9 RelaxedPrecision
                              Decorate 12 RelaxedPrecision
                              Decorate 12 DescriptorSet 0
                              Decorate 12 Binding 1
                              Decorate 13 RelaxedPrecision
                              Decorate 16 RelaxedPrecision
                              Decorate 16 DescriptorSet 0
                              Decorate 16 Binding 0
                              Decorate 17 RelaxedPrecision
                              Decorate 22(vs_TEXCOORD1) Location 1
                              Decorate 26 RelaxedPrecision
                              Decorate 27 RelaxedPrecision
                              Decorate 28 RelaxedPrecision
                              MemberDecorate 29 0 RelaxedPrecision
                              MemberDecorate 29 0 Offset 0
                              Decorate 29 Block
                              Decorate 31 DescriptorSet 1
                              Decorate 31 Binding 0
                              Decorate 36 RelaxedPrecision
                              Decorate 37 RelaxedPrecision
                              Decorate 38 RelaxedPrecision
                              Decorate 40 RelaxedPrecision
                              Decorate 42 Location 0
                              Decorate 47 RelaxedPrecision
                              Decorate 47 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 3
               8:             TypePointer Private 7(fvec3)
               9:      8(ptr) Variable Private
              10:             TypeImage 6(float) 2D sampled format:Unknown
              11:             TypePointer UniformConstant 10
              12:     11(ptr) Variable UniformConstant
              14:             TypeSampler
              15:             TypePointer UniformConstant 14
              16:     15(ptr) Variable UniformConstant
              18:             TypeSampledImage 10
              20:             TypeVector 6(float) 2
              21:             TypePointer Input 20(fvec2)
22(vs_TEXCOORD1):     21(ptr) Variable Input
              24:             TypeVector 6(float) 4
              27:      8(ptr) Variable Private
              29:             TypeStruct 24(fvec4)
              30:             TypePointer Uniform 29(struct)
              31:     30(ptr) Variable Uniform
              32:             TypeInt 32 1
              33:     32(int) Constant 0
              34:             TypePointer Uniform 24(fvec4)
              39:      8(ptr) Variable Private
              41:             TypePointer Input 24(fvec4)
              42:     41(ptr) Variable Input
              46:             TypePointer Output 24(fvec4)
              47:     46(ptr) Variable Output
              51:    6(float) Constant 1065353216
              52:             TypeInt 32 0
              53:     52(int) Constant 3
              54:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              13:          10 Load 12
              17:          14 Load 16
              19:          18 SampledImage 13 17
              23:   20(fvec2) Load 22(vs_TEXCOORD1)
              25:   24(fvec4) ImageSampleImplicitLod 19 23
              26:    7(fvec3) VectorShuffle 25 25 0 1 2
                              Store 9 26
              28:    7(fvec3) Load 9
              35:     34(ptr) AccessChain 31 33
              36:   24(fvec4) Load 35
              37:    7(fvec3) VectorShuffle 36 36 0 1 2
              38:    7(fvec3) FMul 28 37
                              Store 27 38
              40:    7(fvec3) Load 27
              43:   24(fvec4) Load 42
              44:    7(fvec3) VectorShuffle 43 43 0 1 2
              45:    7(fvec3) FMul 40 44
                              Store 39 45
              48:    7(fvec3) Load 39
              49:   24(fvec4) Load 47
              50:   24(fvec4) VectorShuffle 49 48 4 5 6 3
                              Store 47 50
              55:     54(ptr) AccessChain 47 53
                              Store 55 51
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 33 math, 6 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "$Globals" (208 bytes) on slot 0 {
  Vector4 unity_ParticleUVShiftData at 64
  Float unity_ParticleUseMeshColors at 80
  Vector4 _MainTex_ST at 96
}
Constant Buffer "UnityPerCamera" (144 bytes) on slot 1 {
  Vector4 _ProjectionParams at 80
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 2 {
  Matrix4x4 unity_MatrixV at 144
  Matrix4x4 unity_MatrixVP at 272
}
Constant Buffer "UnityDrawCallInfo" (16 bytes) on slot 3 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float       
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
// SV_InstanceID            0   x           4   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xy          2     NONE   float   xy  
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
//
      vs_5_0
      dcl_globalFlags refactoringAllowed
      dcl_constantbuffer CB0[7], immediateIndexed
      dcl_constantbuffer CB1[6], immediateIndexed
      dcl_constantbuffer CB2[21], immediateIndexed
      dcl_constantbuffer CB3[1], immediateIndexed
      dcl_resource_structured t0, 56
      dcl_input v0.xyz
      dcl_input v2.xyzw
      dcl_input v3.xy
      dcl_input_sgv v4.x, instance_id
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyzw
      dcl_output o2.xy
      dcl_output o3.xyzw
      dcl_temps 6
   0: mov r0.xyz, v0.xyzx
   1: mov r0.w, l(1.000000)
   2: iadd r1.x, v4.x, cb3[0].x
   3: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r2.xyz, r1.x, l(0), t0.zxyx
   4: mov r3.x, r2.z
   5: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r4.xyz, r1.x, l(12), t0.yxzx
   6: mov r3.y, r4.x
   7: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r1.yzw, r1.x, l(24), t0.xxyz
   8: mov r3.z, r1.z
   9: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r5.xyzw, r1.x, l(36), t0.xyzw
  10: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r1.x, r1.x, l(52), t0.xxxx
  11: round_ni r1.x, r1.x
  12: mov r3.w, r5.y
  13: dp4 r1.z, r3.xyzw, r0.xyzw
  14: mul r3.xyzw, r1.zzzz, cb2[18].xyzw
  15: mul r1.z, r1.z, cb2[10].z
  16: mov r4.x, r2.y
  17: mov r2.y, r4.z
  18: mov r4.z, r1.y
  19: mov r2.z, r1.w
  20: mov r4.w, r5.x
  21: dp4 r1.y, r4.xyzw, r0.xyzw
  22: mad r3.xyzw, cb2[17].xyzw, r1.yyyy, r3.xyzw
  23: mad r1.y, cb2[9].z, r1.y, r1.z
  24: mov r2.w, r5.z
  25: dp4 r0.x, r2.xyzw, r0.xyzw
  26: mad r2.xyzw, cb2[19].xyzw, r0.xxxx, r3.xyzw
  27: mad r0.x, cb2[11].z, r0.x, r1.y
  28: add r0.x, r0.x, cb2[12].z
  29: mov o3.z, -r0.x
  30: add r0.xyzw, r2.xyzw, cb2[20].xyzw
  31: mov o0.xyzw, r0.xyzw
  32: and r0.z, r5.w, l(255)
  33: utof r2.x, r0.z
  34: ubfe r1.yz, l(0, 8, 8, 0), l(0, 8, 16, 0), r5.wwww
  35: ushr r0.z, r5.w, l(24)
  36: utof r2.w, r0.z
  37: utof r2.yz, r1.yyzy
  38: mul r2.xyzw, r2.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
  39: add r3.xyzw, v2.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
  40: mad r3.xyzw, cb0[5].xxxx, r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  41: mul o1.xyzw, r2.xyzw, r3.xyzw
  42: div r0.z, r1.x, cb0[4].y
  43: round_ni r0.z, r0.z
  44: mad r1.x, -r0.z, cb0[4].y, r1.x
  45: round_ni r1.x, r1.x
  46: mul r1.x, r1.x, cb0[4].z
  47: add r1.z, -cb0[4].w, l(1.000000)
  48: mad r1.y, -r0.z, cb0[4].w, r1.z
  49: mad r1.xy, v3.xyxx, cb0[4].zwzz, r1.xyxx
  50: ne r0.z, cb0[4].x, l(0.000000)
  51: movc r1.xy, r0.zzzz, r1.xyxx, v3.xyxx
  52: mad o2.xy, r1.xyxx, cb0[6].xyxx, cb0[6].zwzz
  53: mul r0.y, r0.y, cb1[5].x
  54: mul r1.xzw, r0.xxwy, l(0.500000, 0.000000, 0.500000, 0.500000)
  55: mov o3.w, r0.w
  56: add o3.xy, r1.zzzz, r1.xwxx
  57: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 2 math, 1 temp registers, 1 textures
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (208 bytes) on slot 0 {
  Vector4 _Color at 112
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xy          2     NONE   float   xy  
// TEXCOORD                 3   xyzw        3     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_5_0
      dcl_globalFlags refactoringAllowed
      dcl_constantbuffer CB0[8], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v1.xyzw
      dcl_input_ps linear v2.xy
      dcl_output o0.xyzw
      dcl_temps 1
   0: sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s0
   1: mul r0.xyzw, r0.xyzw, cb0[7].xyzw
   2: mul o0.xyzw, r0.xyzw, v1.xyzw
   3: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (16 bytes) {
  Vector4 _Color at 0
}
Constant Buffer "$Globals" (208 bytes) {
  Matrix4x4 unity_MatrixV at 16
  Matrix4x4 unity_MatrixVP at 80
  Vector4 _ProjectionParams at 0
  ScalarInt unity_BaseInstanceID at 144
  Vector4 unity_ParticleUVShiftData at 160
  Float unity_ParticleUseMeshColors at 176
  Vector4 _MainTex_ST at 192
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
uniform 	vec4 _MainTex_ST;
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
layout(location = 0) out highp vec4 vs_COLOR0;
layout(location = 1) out highp vec2 vs_TEXCOORD1;
layout(location = 2) out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat7;
uvec2 u_xlatu7;
float u_xlat12;
uint u_xlatu12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat3.x = u_xlat2.z;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat4.x;
    u_xlat7.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]));
    u_xlat3.z = u_xlat7.y;
    u_xlat5 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.w = u_xlat5.y;
    u_xlat13 = dot(u_xlat3, u_xlat0);
    u_xlat3 = vec4(u_xlat13) * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat13 = u_xlat13 * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = u_xlat2.y;
    u_xlat2.y = u_xlat4.z;
    u_xlat4.z = u_xlat7.x;
    u_xlat2.z = u_xlat7.z;
    u_xlat4.w = u_xlat5.x;
    u_xlat7.x = dot(u_xlat4, u_xlat0);
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat7.xxxx + u_xlat3;
    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat7.x + u_xlat13;
    u_xlat2.w = u_xlat5.z;
    u_xlat0.x = dot(u_xlat2, u_xlat0);
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.xxxx + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.x + u_xlat7.x;
    u_xlat0.x = u_xlat0.x + hlslcc_mtx4x4unity_MatrixV[3].z;
    vs_TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat0;
    u_xlat2 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat2 = vec4(unity_ParticleUseMeshColors) * u_xlat2 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu12 = floatBitsToUint(u_xlat5.w) & 255u;
    u_xlat3.x = float(u_xlatu12);
    u_xlatu7.x = bitfieldExtract(floatBitsToUint(u_xlat5.w), int(8), int(8));
    u_xlatu7.y = bitfieldExtract(floatBitsToUint(u_xlat5.w), int(16), int(8));
    u_xlatu12 = floatBitsToUint(u_xlat5.w) >> 24u;
    u_xlat3.w = float(u_xlatu12);
    u_xlat3.yz = vec2(u_xlatu7.xy);
    u_xlat2 = u_xlat2 * u_xlat3;
    vs_COLOR0 = u_xlat2 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat12 = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat12 = floor(u_xlat12);
    u_xlat1.x = (-u_xlat12) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_ParticleUVShiftData.z;
    u_xlat13 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat12) * unity_ParticleUVShiftData.w + u_xlat13;
    u_xlat1.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb12 = unity_ParticleUVShiftData.x!=0.0;
    u_xlat1.xy = (bool(u_xlatb12)) ? u_xlat1.xy : in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.w = u_xlat0.w;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _Color;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
layout(location = 0) in highp vec4 vs_COLOR0;
layout(location = 1) in highp vec2 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat16_0 = u_xlat16_0 * _Color;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    SV_Target0 = u_xlat0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (192 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 16
  Matrix4x4 unity_MatrixVP at 80
  Vector4 _ProjectionParams at 0
  Vector4 unity_ParticleUVShiftData at 144
  Float unity_ParticleUseMeshColors at 160
  Vector4 _MainTex_ST at 176
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float unity_ParticleUseMeshColors;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 COLOR0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
};

template <int N> vec<uint, N> bitFieldExtractU(const vec<uint, N> width, const vec<uint, N> offset, const vec<uint, N> src)
{
	vec<bool, N> isWidthZero = (width == 0);
	vec<bool, N> needsClamp = ((width + offset) < 32);
	vec<uint, N> clampVersion = src << (32-(width+offset));
	clampVersion = clampVersion >> (32 - width);
	vec<uint, N> simpleVersion = src >> offset;
	vec<uint, N> res = select(simpleVersion, clampVersion, needsClamp);
	return select(res, vec<uint, N>(0), isWidthZero);
}; 
vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    int u_xlati1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat7;
    uint2 u_xlatu7;
    float u_xlat12;
    uint u_xlatu12;
    bool u_xlatb12;
    float u_xlat13;
    u_xlat0.xyz = input.POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat2.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 1]));
    u_xlat3.x = u_xlat2.z;
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 2]));
    u_xlat3.y = u_xlat4.x;
    u_xlat7.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 2]));
    u_xlat3.z = u_xlat7.y;
    u_xlat5 = float4(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 3]));
    u_xlat1.x = as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x34 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.w = u_xlat5.y;
    u_xlat13 = dot(u_xlat3, u_xlat0);
    u_xlat3 = float4(u_xlat13) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat13 = u_xlat13 * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = u_xlat2.y;
    u_xlat2.y = u_xlat4.z;
    u_xlat4.z = u_xlat7.x;
    u_xlat2.z = u_xlat7.z;
    u_xlat4.w = u_xlat5.x;
    u_xlat7.x = dot(u_xlat4, u_xlat0);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat7.xxxx, u_xlat3);
    u_xlat7.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat7.x, u_xlat13);
    u_xlat2.w = u_xlat5.z;
    u_xlat0.x = dot(u_xlat2, u_xlat0);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.xxxx, u_xlat3);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat0.x, u_xlat7.x);
    u_xlat0.x = u_xlat0.x + VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z;
    output.TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0 = u_xlat2 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    output.mtl_Position = u_xlat0;
    u_xlat2 = input.COLOR0 + float4(-1.0, -1.0, -1.0, -1.0);
    u_xlat2 = fma(float4(VGlobals.unity_ParticleUseMeshColors), u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlatu12 = as_type<uint>(u_xlat5.w) & 0xffu;
    u_xlat3.x = float(u_xlatu12);
    u_xlatu7.xy = bitFieldExtractU(uint2(0x8u, 0x8u), uint2(0x8u, 0x10u), as_type<uint2>(u_xlat5.ww));
    u_xlatu12 = as_type<uint>(u_xlat5.w) >> 0x18u;
    u_xlat3.w = float(u_xlatu12);
    u_xlat3.yz = float2(u_xlatu7.xy);
    u_xlat2 = u_xlat2 * u_xlat3;
    output.COLOR0 = u_xlat2 * float4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat12 = u_xlat1.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat12 = floor(u_xlat12);
    u_xlat1.x = fma((-u_xlat12), VGlobals.unity_ParticleUVShiftData.y, u_xlat1.x);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat13 = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = fma((-u_xlat12), VGlobals.unity_ParticleUVShiftData.w, u_xlat13);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat1.xy);
    u_xlatb12 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat1.xy = (bool(u_xlatb12)) ? u_xlat1.xy : input.TEXCOORD0.xy;
    output.TEXCOORD1.xy = fma(u_xlat1.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat0.y = u_xlat0.y * VGlobals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD3.w = u_xlat0.w;
    output.TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "FGlobals" (16 bytes) on slot 0 {
  Vector4 _Color at 0
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Color;
};

struct Mtl_FragmentIn
{
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    u_xlat0 = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy);
    u_xlat0 = u_xlat0 * FGlobals._Color;
    output.SV_Target0 = u_xlat0 * input.COLOR0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (16 bytes) {
  Vector4 _Color at 0
}
Constant Buffer "$Globals" (208 bytes) {
  Matrix4x4 unity_MatrixV at 16
  Matrix4x4 unity_MatrixVP at 80
  Vector4 _ProjectionParams at 0
  ScalarInt unity_BaseInstanceID at 144
  Vector4 unity_ParticleUVShiftData at 160
  Float unity_ParticleUseMeshColors at 176
  Vector4 _MainTex_ST at 192
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require
#ifdef GL_ARB_shader_storage_buffer_object
#extension GL_ARB_shader_storage_buffer_object : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
uniform 	vec4 _MainTex_ST;
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in  vec4 in_POSITION0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
layout(location = 0) out vec4 vs_COLOR0;
layout(location = 1) out vec2 vs_TEXCOORD1;
layout(location = 2) out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat7;
uvec2 u_xlatu7;
float u_xlat12;
uint u_xlatu12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat3.x = u_xlat2.z;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat4.x;
    u_xlat7.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]));
    u_xlat3.z = u_xlat7.y;
    u_xlat5 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.w = u_xlat5.y;
    u_xlat13 = dot(u_xlat3, u_xlat0);
    u_xlat3 = vec4(u_xlat13) * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat13 = u_xlat13 * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = u_xlat2.y;
    u_xlat2.y = u_xlat4.z;
    u_xlat4.z = u_xlat7.x;
    u_xlat2.z = u_xlat7.z;
    u_xlat4.w = u_xlat5.x;
    u_xlat7.x = dot(u_xlat4, u_xlat0);
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat7.xxxx + u_xlat3;
    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat7.x + u_xlat13;
    u_xlat2.w = u_xlat5.z;
    u_xlat0.x = dot(u_xlat2, u_xlat0);
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.xxxx + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.x + u_xlat7.x;
    u_xlat0.x = u_xlat0.x + hlslcc_mtx4x4unity_MatrixV[3].z;
    vs_TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat0;
    u_xlatu12 = floatBitsToUint(u_xlat5.w) & 255u;
    u_xlat2.x = float(u_xlatu12);
    u_xlatu7.x = bitfieldExtract(floatBitsToUint(u_xlat5.w), int(8), int(8));
    u_xlatu7.y = bitfieldExtract(floatBitsToUint(u_xlat5.w), int(16), int(8));
    u_xlatu12 = floatBitsToUint(u_xlat5.w) >> 24u;
    u_xlat2.w = float(u_xlatu12);
    u_xlat2.yz = vec2(u_xlatu7.xy);
    u_xlat2 = u_xlat2 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat3 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat3 = vec4(unity_ParticleUseMeshColors) * u_xlat3 + vec4(1.0, 1.0, 1.0, 1.0);
    vs_COLOR0 = u_xlat2 * u_xlat3;
    u_xlat12 = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat12 = floor(u_xlat12);
    u_xlat1.x = (-u_xlat12) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_ParticleUVShiftData.z;
    u_xlat13 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat12) * unity_ParticleUVShiftData.w + u_xlat13;
    u_xlat1.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb12 = unity_ParticleUVShiftData.x!=0.0;
    u_xlat1.xy = (bool(u_xlatb12)) ? u_xlat1.xy : in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.w = u_xlat0.w;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
layout(location = 0) in  vec4 vs_COLOR0;
layout(location = 1) in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat0 = u_xlat10_0 * _Color;
    SV_Target0 = u_xlat0 * vs_COLOR0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON 
Local Keywords: _ALPHABLEND_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Set 2D Texture "_MainTex" to set: 0, binding: 1, used in: Fragment  using sampler in set: 0, binding: 0, used in: Fragment 

Constant Buffer "PGlobals2471230605" (16 bytes) on set: 1, binding: 0, used in: Fragment  {
  Vector4 _Color at 0
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on set: 1, binding: 2, used in: Vertex  {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "VGlobals2471230605" (192 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixV at 16
  Matrix4x4 unity_MatrixVP at 80
  Vector4 _MainTex_ST at 176
  Vector4 _ProjectionParams at 0
  Vector4 unity_ParticleUVShiftData at 144
  Float unity_ParticleUseMeshColors at 160
}

Set Buffer  "unity_ParticleInstanceData" to set: 0, binding: 2, used in: Vertex 
Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 416

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 26 233 246 249 301 346 377
                              Name 233  "vs_TEXCOORD3"
                              Name 377  "vs_TEXCOORD1"
                              Decorate 11 Location 0
                              Decorate 26 BuiltIn InstanceIndex
                              MemberDecorate 28 0 Offset 0
                              MemberDecorate 28 1 Offset 4
                              Decorate 28 Block
                              Decorate 30 DescriptorSet 1
                              Decorate 30 Binding 2
                              Decorate 38 ArrayStride 4
                              MemberDecorate 39 0 Offset 0
                              Decorate 40 ArrayStride 56
                              MemberDecorate 41 0 NonWritable
                              MemberDecorate 41 0 Offset 0
                              Decorate 41 BufferBlock
                              Decorate 43 DescriptorSet 0
                              Decorate 43 Binding 2
                              Decorate 155 ArrayStride 16
                              Decorate 156 ArrayStride 16
                              MemberDecorate 157 0 Offset 0
                              MemberDecorate 157 1 Offset 16
                              MemberDecorate 157 2 Offset 80
                              MemberDecorate 157 3 Offset 144
                              MemberDecorate 157 4 Offset 160
                              MemberDecorate 157 5 Offset 176
                              Decorate 157 Block
                              Decorate 159 DescriptorSet 1
                              Decorate 159 Binding 1
                              Decorate 233(vs_TEXCOORD3) Location 2
                              MemberDecorate 244 0 BuiltIn Position
                              MemberDecorate 244 1 BuiltIn PointSize
                              MemberDecorate 244 2 BuiltIn ClipDistance
                              Decorate 244 Block
                              Decorate 249 RelaxedPrecision
                              Decorate 249 Location 1
                              Decorate 250 RelaxedPrecision
                              Decorate 253 RelaxedPrecision
                              Decorate 301 Location 0
                              Decorate 346 Location 2
                              Decorate 377(vs_TEXCOORD1) Location 1
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              12:             TypeVector 6(float) 3
              17:    6(float) Constant 1065353216
              18:             TypeInt 32 0
              19:     18(int) Constant 3
              20:             TypePointer Private 6(float)
              22:             TypeInt 32 1
              23:             TypePointer Private 22(int)
              24:     23(ptr) Variable Private
              25:             TypePointer Input 22(int)
              26:     25(ptr) Variable Input
              28:             TypeStruct 22(int) 22(int)
              29:             TypePointer Uniform 28(struct)
              30:     29(ptr) Variable Uniform
              31:     22(int) Constant 0
              32:             TypePointer Uniform 22(int)
              36:      8(ptr) Variable Private
              37:     18(int) Constant 14
              38:             TypeArray 18(int) 37
              39:             TypeStruct 38
              40:             TypeRuntimeArray 39(struct)
              41:             TypeStruct 40
              42:             TypePointer Uniform 41(struct)
              43:     42(ptr) Variable Uniform
              45:     22(int) Constant 2
              46:             TypePointer Uniform 18(int)
              55:     22(int) Constant 1
              62:      8(ptr) Variable Private
              63:     18(int) Constant 2
              66:     18(int) Constant 0
              68:      8(ptr) Variable Private
              70:     22(int) Constant 4
              75:     22(int) Constant 3
              80:     22(int) Constant 5
              89:     18(int) Constant 1
              91:             TypePointer Private 12(fvec3)
              92:     91(ptr) Variable Private
              94:     22(int) Constant 6
              99:     22(int) Constant 7
             104:     22(int) Constant 8
             112:      8(ptr) Variable Private
             114:     22(int) Constant 9
             119:     22(int) Constant 10
             124:     22(int) Constant 11
             129:     22(int) Constant 12
             134:      8(ptr) Variable Private
             136:     22(int) Constant 13
             148:     20(ptr) Variable Private
             154:     18(int) Constant 4
             155:             TypeArray 7(fvec4) 154
             156:             TypeArray 7(fvec4) 154
             157:             TypeStruct 7(fvec4) 155 156 7(fvec4) 6(float) 7(fvec4)
             158:             TypePointer Uniform 157(struct)
             159:    158(ptr) Variable Uniform
             160:             TypePointer Uniform 7(fvec4)
             165:             TypePointer Uniform 6(float)
             232:             TypePointer Output 7(fvec4)
233(vs_TEXCOORD3):    232(ptr) Variable Output
             237:             TypePointer Output 6(float)
             243:             TypeArray 6(float) 89
             244:             TypeStruct 7(fvec4) 6(float) 243
             245:             TypePointer Output 244(struct)
             246:    245(ptr) Variable Output
             249:     10(ptr) Variable Input
             251:    6(float) Constant 3212836864
             252:    7(fvec4) ConstantComposite 251 251 251 251
             259:    7(fvec4) ConstantComposite 17 17 17 17
             261:             TypePointer Private 18(int)
             262:    261(ptr) Variable Private
             266:     18(int) Constant 255
             271:             TypeVector 18(int) 2
             272:             TypePointer Private 271(ivec2)
             273:    272(ptr) Variable Private
             282:     22(int) Constant 16
             288:     18(int) Constant 24
             294:             TypeVector 6(float) 2
             301:    232(ptr) Variable Output
             303:    6(float) Constant 998277249
             304:    7(fvec4) ConstantComposite 303 303 303 303
             306:     20(ptr) Variable Private
             345:             TypePointer Input 294(fvec2)
             346:    345(ptr) Variable Input
             357:             TypeBool
             358:             TypePointer Private 357(bool)
             359:    358(ptr) Variable Private
             362:    6(float) Constant 0
             365:             TypePointer Function 294(fvec2)
             376:             TypePointer Output 294(fvec2)
377(vs_TEXCOORD1):    376(ptr) Variable Output
             396:    6(float) Constant 1056964608
             397:   12(fvec3) ConstantComposite 396 396 396
               4:           2 Function None 3
               5:             Label
             366:    365(ptr) Variable Function
              13:    7(fvec4) Load 11
              14:   12(fvec3) VectorShuffle 13 13 0 1 2
              15:    7(fvec4) Load 9
              16:    7(fvec4) VectorShuffle 15 14 4 5 6 3
                              Store 9 16
              21:     20(ptr) AccessChain 9 19
                              Store 21 17
              27:     22(int) Load 26
              33:     32(ptr) AccessChain 30 31
              34:     22(int) Load 33
              35:     22(int) IAdd 27 34
                              Store 24 35
              44:     22(int) Load 24
              47:     46(ptr) AccessChain 43 31 44 31 45
              48:     18(int) Load 47
              49:    6(float) Bitcast 48
              50:     22(int) Load 24
              51:     46(ptr) AccessChain 43 31 50 31 31
              52:     18(int) Load 51
              53:    6(float) Bitcast 52
              54:     22(int) Load 24
              56:     46(ptr) AccessChain 43 31 54 31 55
              57:     18(int) Load 56
              58:    6(float) Bitcast 57
              59:   12(fvec3) CompositeConstruct 49 53 58
              60:    7(fvec4) Load 36
              61:    7(fvec4) VectorShuffle 60 59 4 5 6 3
                              Store 36 61
              64:     20(ptr) AccessChain 36 63
              65:    6(float) Load 64
              67:     20(ptr) AccessChain 62 66
                              Store 67 65
              69:     22(int) Load 24
              71:     46(ptr) AccessChain 43 31 69 31 70
              72:     18(int) Load 71
              73:    6(float) Bitcast 72
              74:     22(int) Load 24
              76:     46(ptr) AccessChain 43 31 74 31 75
              77:     18(int) Load 76
              78:    6(float) Bitcast 77
              79:     22(int) Load 24
              81:     46(ptr) AccessChain 43 31 79 31 80
              82:     18(int) Load 81
              83:    6(float) Bitcast 82
              84:   12(fvec3) CompositeConstruct 73 78 83
              85:    7(fvec4) Load 68
              86:    7(fvec4) VectorShuffle 85 84 4 5 6 3
                              Store 68 86
              87:     20(ptr) AccessChain 68 66
              88:    6(float) Load 87
              90:     20(ptr) AccessChain 62 89
                              Store 90 88
              93:     22(int) Load 24
              95:     46(ptr) AccessChain 43 31 93 31 94
              96:     18(int) Load 95
              97:    6(float) Bitcast 96
              98:     22(int) Load 24
             100:     46(ptr) AccessChain 43 31 98 31 99
             101:     18(int) Load 100
             102:    6(float) Bitcast 101
             103:     22(int) Load 24
             105:     46(ptr) AccessChain 43 31 103 31 104
             106:     18(int) Load 105
             107:    6(float) Bitcast 106
             108:   12(fvec3) CompositeConstruct 97 102 107
                              Store 92 108
             109:     20(ptr) AccessChain 92 89
             110:    6(float) Load 109
             111:     20(ptr) AccessChain 62 63
                              Store 111 110
             113:     22(int) Load 24
             115:     46(ptr) AccessChain 43 31 113 31 114
             116:     18(int) Load 115
             117:    6(float) Bitcast 116
             118:     22(int) Load 24
             120:     46(ptr) AccessChain 43 31 118 31 119
             121:     18(int) Load 120
             122:    6(float) Bitcast 121
             123:     22(int) Load 24
             125:     46(ptr) AccessChain 43 31 123 31 124
             126:     18(int) Load 125
             127:    6(float) Bitcast 126
             128:     22(int) Load 24
             130:     46(ptr) AccessChain 43 31 128 31 129
             131:     18(int) Load 130
             132:    6(float) Bitcast 131
             133:    7(fvec4) CompositeConstruct 117 122 127 132
                              Store 112 133
             135:     22(int) Load 24
             137:     46(ptr) AccessChain 43 31 135 31 136
             138:     18(int) Load 137
             139:    6(float) Bitcast 138
             140:     20(ptr) AccessChain 134 66
                              Store 140 139
             141:     20(ptr) AccessChain 134 66
             142:    6(float) Load 141
             143:    6(float) ExtInst 1(GLSL.std.450) 8(Floor) 142
             144:     20(ptr) AccessChain 134 66
                              Store 144 143
             145:     20(ptr) AccessChain 112 89
             146:    6(float) Load 145
             147:     20(ptr) AccessChain 62 19
                              Store 147 146
             149:    7(fvec4) Load 62
             150:    7(fvec4) Load 9
             151:    6(float) Dot 149 150
                              Store 148 151
             152:    6(float) Load 148
             153:    7(fvec4) CompositeConstruct 152 152 152 152
             161:    160(ptr) AccessChain 159 45 55
             162:    7(fvec4) Load 161
             163:    7(fvec4) FMul 153 162
                              Store 62 163
             164:    6(float) Load 148
             166:    165(ptr) AccessChain 159 55 55 63
             167:    6(float) Load 166
             168:    6(float) FMul 164 167
                              Store 148 168
             169:     20(ptr) AccessChain 36 89
             170:    6(float) Load 169
             171:     20(ptr) AccessChain 68 66
                              Store 171 170
             172:     20(ptr) AccessChain 68 63
             173:    6(float) Load 172
             174:     20(ptr) AccessChain 36 89
                              Store 174 173
             175:     20(ptr) AccessChain 92 66
             176:    6(float) Load 175
             177:     20(ptr) AccessChain 68 63
                              Store 177 176
             178:     20(ptr) AccessChain 92 63
             179:    6(float) Load 178
             180:     20(ptr) AccessChain 36 63
                              Store 180 179
             181:     20(ptr) AccessChain 112 66
             182:    6(float) Load 181
             183:     20(ptr) AccessChain 68 19
                              Store 183 182
             184:    7(fvec4) Load 68
             185:    7(fvec4) Load 9
             186:    6(float) Dot 184 185
             187:     20(ptr) AccessChain 92 66
                              Store 187 186
             188:    160(ptr) AccessChain 159 45 31
             189:    7(fvec4) Load 188
             190:   12(fvec3) Load 92
             191:    7(fvec4) VectorShuffle 190 190 0 0 0 0
             192:    7(fvec4) FMul 189 191
             193:    7(fvec4) Load 62
             194:    7(fvec4) FAdd 192 193
                              Store 62 194
             195:    165(ptr) AccessChain 159 55 31 63
             196:    6(float) Load 195
             197:     20(ptr) AccessChain 92 66
             198:    6(float) Load 197
             199:    6(float) FMul 196 198
             200:    6(float) Load 148
             201:    6(float) FAdd 199 200
             202:     20(ptr) AccessChain 92 66
                              Store 202 201
             203:     20(ptr) AccessChain 112 63
             204:    6(float) Load 203
             205:     20(ptr) AccessChain 36 19
                              Store 205 204
             206:    7(fvec4) Load 36
             207:    7(fvec4) Load 9
             208:    6(float) Dot 206 207
             209:     20(ptr) AccessChain 9 66
                              Store 209 208
             210:    160(ptr) AccessChain 159 45 45
             211:    7(fvec4) Load 210
             212:    7(fvec4) Load 9
             213:    7(fvec4) VectorShuffle 212 212 0 0 0 0
             214:    7(fvec4) FMul 211 213
             215:    7(fvec4) Load 62
             216:    7(fvec4) FAdd 214 215
                              Store 36 216
             217:    165(ptr) AccessChain 159 55 45 63
             218:    6(float) Load 217
             219:     20(ptr) AccessChain 9 66
             220:    6(float) Load 219
             221:    6(float) FMul 218 220
             222:     20(ptr) AccessChain 92 66
             223:    6(float) Load 222
             224:    6(float) FAdd 221 223
             225:     20(ptr) AccessChain 9 66
                              Store 225 224
             226:     20(ptr) AccessChain 9 66
             227:    6(float) Load 226
             228:    165(ptr) AccessChain 159 55 75 63
             229:    6(float) Load 228
             230:    6(float) FAdd 227 229
             231:     20(ptr) AccessChain 9 66
                              Store 231 230
             234:     20(ptr) AccessChain 9 66
             235:    6(float) Load 234
             236:    6(float) FNegate 235
             238:    237(ptr) AccessChain 233(vs_TEXCOORD3) 63
                              Store 238 236
             239:    7(fvec4) Load 36
             240:    160(ptr) AccessChain 159 45 75
             241:    7(fvec4) Load 240
             242:    7(fvec4) FAdd 239 241
                              Store 9 242
             247:    7(fvec4) Load 9
             248:    232(ptr) AccessChain 246 31
                              Store 248 247
             250:    7(fvec4) Load 249
             253:    7(fvec4) FAdd 250 252
                              Store 36 253
             254:    165(ptr) AccessChain 159 70
             255:    6(float) Load 254
             256:    7(fvec4) CompositeConstruct 255 255 255 255
             257:    7(fvec4) Load 36
             258:    7(fvec4) FMul 256 257
             260:    7(fvec4) FAdd 258 259
                              Store 36 260
             263:     20(ptr) AccessChain 112 19
             264:    6(float) Load 263
             265:     18(int) Bitcast 264
             267:     18(int) BitwiseAnd 265 266
                              Store 262 267
             268:     18(int) Load 262
             269:    6(float) ConvertUToF 268
             270:     20(ptr) AccessChain 62 66
                              Store 270 269
             274:     20(ptr) AccessChain 112 19
             275:    6(float) Load 274
             276:     18(int) Bitcast 275
             277:     18(int) BitFieldUExtract 276 104 104
             278:    261(ptr) AccessChain 273 66
                              Store 278 277
             279:     20(ptr) AccessChain 112 19
             280:    6(float) Load 279
             281:     18(int) Bitcast 280
             283:     18(int) BitFieldUExtract 281 282 104
             284:    261(ptr) AccessChain 273 89
                              Store 284 283
             285:     20(ptr) AccessChain 112 19
             286:    6(float) Load 285
             287:     18(int) Bitcast 286
             289:     18(int) ShiftRightLogical 287 288
                              Store 262 289
             290:     18(int) Load 262
             291:    6(float) ConvertUToF 290
             292:     20(ptr) AccessChain 62 19
                              Store 292 291
             293:  271(ivec2) Load 273
             295:  294(fvec2) ConvertUToF 293
             296:    7(fvec4) Load 62
             297:    7(fvec4) VectorShuffle 296 295 0 4 5 3
                              Store 62 297
             298:    7(fvec4) Load 36
             299:    7(fvec4) Load 62
             300:    7(fvec4) FMul 298 299
                              Store 36 300
             302:    7(fvec4) Load 36
             305:    7(fvec4) FMul 302 304
                              Store 301 305
             307:     20(ptr) AccessChain 134 66
             308:    6(float) Load 307
             309:    165(ptr) AccessChain 159 75 89
             310:    6(float) Load 309
             311:    6(float) FDiv 308 310
                              Store 306 311
             312:    6(float) Load 306
             313:    6(float) ExtInst 1(GLSL.std.450) 8(Floor) 312
                              Store 306 313
             314:    6(float) Load 306
             315:    6(float) FNegate 314
             316:    165(ptr) AccessChain 159 75 89
             317:    6(float) Load 316
             318:    6(float) FMul 315 317
             319:     20(ptr) AccessChain 134 66
             320:    6(float) Load 319
             321:    6(float) FAdd 318 320
             322:     20(ptr) AccessChain 134 66
                              Store 322 321
             323:     20(ptr) AccessChain 134 66
             324:    6(float) Load 323
             325:    6(float) ExtInst 1(GLSL.std.450) 8(Floor) 324
             326:     20(ptr) AccessChain 134 66
                              Store 326 325
             327:     20(ptr) AccessChain 134 66
             328:    6(float) Load 327
             329:    165(ptr) AccessChain 159 75 63
             330:    6(float) Load 329
             331:    6(float) FMul 328 330
             332:     20(ptr) AccessChain 134 66
                              Store 332 331
             333:    165(ptr) AccessChain 159 75 19
             334:    6(float) Load 333
             335:    6(float) FNegate 334
             336:    6(float) FAdd 335 17
                              Store 148 336
             337:    6(float) Load 306
             338:    6(float) FNegate 337
             339:    165(ptr) AccessChain 159 75 19
             340:    6(float) Load 339
             341:    6(float) FMul 338 340
             342:    6(float) Load 148
             343:    6(float) FAdd 341 342
             344:     20(ptr) AccessChain 134 89
                              Store 344 343
             347:  294(fvec2) Load 346
             348:    160(ptr) AccessChain 159 75
             349:    7(fvec4) Load 348
             350:  294(fvec2) VectorShuffle 349 349 2 3
             351:  294(fvec2) FMul 347 350
             352:    7(fvec4) Load 134
             353:  294(fvec2) VectorShuffle 352 352 0 1
             354:  294(fvec2) FAdd 351 353
             355:    7(fvec4) Load 134
             356:    7(fvec4) VectorShuffle 355 354 4 5 2 3
                              Store 134 356
             360:    165(ptr) AccessChain 159 75 66
             361:    6(float) Load 360
             363:   357(bool) FOrdNotEqual 361 362
                              Store 359 363
             364:   357(bool) Load 359
                              SelectionMerge 368 None
                              BranchConditional 364 367 371
             367:               Label
             369:    7(fvec4)   Load 134
             370:  294(fvec2)   VectorShuffle 369 369 0 1
                                Store 366 370
                                Branch 368
             371:               Label
             372:  294(fvec2)   Load 346
                                Store 366 372
                                Branch 368
             368:             Label
             373:  294(fvec2) Load 366
             374:    7(fvec4) Load 134
             375:    7(fvec4) VectorShuffle 374 373 4 5 2 3
                              Store 134 375
             378:    7(fvec4) Load 134
             379:  294(fvec2) VectorShuffle 378 378 0 1
             380:    160(ptr) AccessChain 159 80
             381:    7(fvec4) Load 380
             382:  294(fvec2) VectorShuffle 381 381 0 1
             383:  294(fvec2) FMul 379 382
             384:    160(ptr) AccessChain 159 80
             385:    7(fvec4) Load 384
             386:  294(fvec2) VectorShuffle 385 385 2 3
             387:  294(fvec2) FAdd 383 386
                              Store 377(vs_TEXCOORD1) 387
             388:     20(ptr) AccessChain 9 89
             389:    6(float) Load 388
             390:    165(ptr) AccessChain 159 31 66
             391:    6(float) Load 390
             392:    6(float) FMul 389 391
             393:     20(ptr) AccessChain 9 89
                              Store 393 392
             394:    7(fvec4) Load 9
             395:   12(fvec3) VectorShuffle 394 394 0 3 1
             398:   12(fvec3) FMul 395 397
             399:    7(fvec4) Load 134
             400:    7(fvec4) VectorShuffle 399 398 4 1 5 6
                              Store 134 400
             401:     20(ptr) AccessChain 9 19
             402:    6(float) Load 401
             403:    237(ptr) AccessChain 233(vs_TEXCOORD3) 19
                              Store 403 402
             404:    7(fvec4) Load 134
             405:  294(fvec2) VectorShuffle 404 404 2 2
             406:    7(fvec4) Load 134
             407:  294(fvec2) VectorShuffle 406 406 0 3
             408:  294(fvec2) FAdd 405 407
             409:    7(fvec4) Load 233(vs_TEXCOORD3)
             410:    7(fvec4) VectorShuffle 409 408 4 5 2 3
                              Store 233(vs_TEXCOORD3) 410
             411:    237(ptr) AccessChain 246 31 89
             412:    6(float) Load 411
             413:    6(float) FNegate 412
             414:    237(ptr) AccessChain 246 31 89
                              Store 414 413
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 46

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 22 39 43
                              ExecutionMode 4 OriginUpperLeft
                              Name 22  "vs_TEXCOORD1"
                              Decorate 9 RelaxedPrecision
                              Decorate 12 RelaxedPrecision
                              Decorate 12 DescriptorSet 0
                              Decorate 12 Binding 1
                              Decorate 13 RelaxedPrecision
                              Decorate 16 RelaxedPrecision
                              Decorate 16 DescriptorSet 0
                              Decorate 16 Binding 0
                              Decorate 17 RelaxedPrecision
                              Decorate 22(vs_TEXCOORD1) Location 1
                              Decorate 25 RelaxedPrecision
                              Decorate 26 RelaxedPrecision
                              MemberDecorate 27 0 RelaxedPrecision
                              MemberDecorate 27 0 Offset 0
                              Decorate 27 Block
                              Decorate 29 DescriptorSet 1
                              Decorate 29 Binding 0
                              Decorate 34 RelaxedPrecision
                              Decorate 35 RelaxedPrecision
                              Decorate 37 RelaxedPrecision
                              Decorate 39 Location 0
                              Decorate 43 RelaxedPrecision
                              Decorate 43 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypeImage 6(float) 2D sampled format:Unknown
              11:             TypePointer UniformConstant 10
              12:     11(ptr) Variable UniformConstant
              14:             TypeSampler
              15:             TypePointer UniformConstant 14
              16:     15(ptr) Variable UniformConstant
              18:             TypeSampledImage 10
              20:             TypeVector 6(float) 2
              21:             TypePointer Input 20(fvec2)
22(vs_TEXCOORD1):     21(ptr) Variable Input
              25:      8(ptr) Variable Private
              27:             TypeStruct 7(fvec4)
              28:             TypePointer Uniform 27(struct)
              29:     28(ptr) Variable Uniform
              30:             TypeInt 32 1
              31:     30(int) Constant 0
              32:             TypePointer Uniform 7(fvec4)
              36:      8(ptr) Variable Private
              38:             TypePointer Input 7(fvec4)
              39:     38(ptr) Variable Input
              42:             TypePointer Output 7(fvec4)
              43:     42(ptr) Variable Output
               4:           2 Function None 3
               5:             Label
              13:          10 Load 12
              17:          14 Load 16
              19:          18 SampledImage 13 17
              23:   20(fvec2) Load 22(vs_TEXCOORD1)
              24:    7(fvec4) ImageSampleImplicitLod 19 23
                              Store 9 24
              26:    7(fvec4) Load 9
              33:     32(ptr) AccessChain 29 31
              34:    7(fvec4) Load 33
              35:    7(fvec4) FMul 26 34
                              Store 25 35
              37:    7(fvec4) Load 25
              40:    7(fvec4) Load 39
              41:    7(fvec4) FMul 37 40
                              Store 36 41
              44:    7(fvec4) Load 36
                              Store 43 44
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 33 math, 6 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "$Globals" (224 bytes) on slot 0 {
  Vector4 unity_ParticleUVShiftData at 64
  Float unity_ParticleUseMeshColors at 80
  Vector4 _MainTex_ST at 96
}
Constant Buffer "UnityPerCamera" (144 bytes) on slot 1 {
  Vector4 _ProjectionParams at 80
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 2 {
  Matrix4x4 unity_MatrixV at 144
  Matrix4x4 unity_MatrixVP at 272
}
Constant Buffer "UnityDrawCallInfo" (16 bytes) on slot 3 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float       
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
// SV_InstanceID            0   x           4   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xy          2     NONE   float   xy  
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
//
      vs_5_0
      dcl_globalFlags refactoringAllowed
      dcl_constantbuffer CB0[7], immediateIndexed
      dcl_constantbuffer CB1[6], immediateIndexed
      dcl_constantbuffer CB2[21], immediateIndexed
      dcl_constantbuffer CB3[1], immediateIndexed
      dcl_resource_structured t0, 56
      dcl_input v0.xyz
      dcl_input v2.xyzw
      dcl_input v3.xy
      dcl_input_sgv v4.x, instance_id
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyzw
      dcl_output o2.xy
      dcl_output o3.xyzw
      dcl_temps 6
   0: mov r0.xyz, v0.xyzx
   1: mov r0.w, l(1.000000)
   2: iadd r1.x, v4.x, cb3[0].x
   3: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r2.xyz, r1.x, l(0), t0.zxyx
   4: mov r3.x, r2.z
   5: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r4.xyz, r1.x, l(12), t0.yxzx
   6: mov r3.y, r4.x
   7: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r1.yzw, r1.x, l(24), t0.xxyz
   8: mov r3.z, r1.z
   9: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r5.xyzw, r1.x, l(36), t0.xyzw
  10: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r1.x, r1.x, l(52), t0.xxxx
  11: round_ni r1.x, r1.x
  12: mov r3.w, r5.y
  13: dp4 r1.z, r3.xyzw, r0.xyzw
  14: mul r3.xyzw, r1.zzzz, cb2[18].xyzw
  15: mul r1.z, r1.z, cb2[10].z
  16: mov r4.x, r2.y
  17: mov r2.y, r4.z
  18: mov r4.z, r1.y
  19: mov r2.z, r1.w
  20: mov r4.w, r5.x
  21: dp4 r1.y, r4.xyzw, r0.xyzw
  22: mad r3.xyzw, cb2[17].xyzw, r1.yyyy, r3.xyzw
  23: mad r1.y, cb2[9].z, r1.y, r1.z
  24: mov r2.w, r5.z
  25: dp4 r0.x, r2.xyzw, r0.xyzw
  26: mad r2.xyzw, cb2[19].xyzw, r0.xxxx, r3.xyzw
  27: mad r0.x, cb2[11].z, r0.x, r1.y
  28: add r0.x, r0.x, cb2[12].z
  29: mov o3.z, -r0.x
  30: add r0.xyzw, r2.xyzw, cb2[20].xyzw
  31: mov o0.xyzw, r0.xyzw
  32: and r0.z, r5.w, l(255)
  33: utof r2.x, r0.z
  34: ubfe r1.yz, l(0, 8, 8, 0), l(0, 8, 16, 0), r5.wwww
  35: ushr r0.z, r5.w, l(24)
  36: utof r2.w, r0.z
  37: utof r2.yz, r1.yyzy
  38: mul r2.xyzw, r2.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
  39: add r3.xyzw, v2.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
  40: mad r3.xyzw, cb0[5].xxxx, r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  41: mul o1.xyzw, r2.xyzw, r3.xyzw
  42: div r0.z, r1.x, cb0[4].y
  43: round_ni r0.z, r0.z
  44: mad r1.x, -r0.z, cb0[4].y, r1.x
  45: round_ni r1.x, r1.x
  46: mul r1.x, r1.x, cb0[4].z
  47: add r1.z, -cb0[4].w, l(1.000000)
  48: mad r1.y, -r0.z, cb0[4].w, r1.z
  49: mad r1.xy, v3.xyxx, cb0[4].zwzz, r1.xyxx
  50: ne r0.z, cb0[4].x, l(0.000000)
  51: movc r1.xy, r0.zzzz, r1.xyxx, v3.xyxx
  52: mad o2.xy, r1.xyxx, cb0[6].xyxx, cb0[6].zwzz
  53: mul r0.y, r0.y, cb1[5].x
  54: mul r1.xzw, r0.xxwy, l(0.500000, 0.000000, 0.500000, 0.500000)
  55: mov o3.w, r0.w
  56: add o3.xy, r1.zzzz, r1.xwxx
  57: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 5 math, 2 temp registers, 1 textures
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (224 bytes) on slot 0 {
  Vector4 _Color at 112
  Vector4 _ColorAddSubDiff at 208
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xy          2     NONE   float   xy  
// TEXCOORD                 3   xyzw        3     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_5_0
      dcl_globalFlags refactoringAllowed
      dcl_constantbuffer CB0[14], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v1.xyzw
      dcl_input_ps linear v2.xy
      dcl_output o0.xyzw
      dcl_temps 2
   0: sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s0
   1: mul r0.xyzw, r0.xyzw, cb0[7].xyzw
   2: mad r0.xyz, v1.xyzx, cb0[13].xxxx, r0.xyzx
   3: mul o0.w, r0.w, v1.w
   4: add r1.xyz, -r0.xyzx, |r0.xyzx|
   5: mad o0.xyz, cb0[13].yyyy, r1.xyzx, r0.xyzx
   6: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (32 bytes) {
  Vector4 _Color at 0
  Vector4 _ColorAddSubDiff at 16
}
Constant Buffer "$Globals" (208 bytes) {
  Matrix4x4 unity_MatrixV at 16
  Matrix4x4 unity_MatrixVP at 80
  Vector4 _ProjectionParams at 0
  ScalarInt unity_BaseInstanceID at 144
  Vector4 unity_ParticleUVShiftData at 160
  Float unity_ParticleUseMeshColors at 176
  Vector4 _MainTex_ST at 192
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
uniform 	vec4 _MainTex_ST;
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
layout(location = 0) out highp vec4 vs_COLOR0;
layout(location = 1) out highp vec2 vs_TEXCOORD1;
layout(location = 2) out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat7;
uvec2 u_xlatu7;
float u_xlat12;
uint u_xlatu12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat3.x = u_xlat2.z;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat4.x;
    u_xlat7.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]));
    u_xlat3.z = u_xlat7.y;
    u_xlat5 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.w = u_xlat5.y;
    u_xlat13 = dot(u_xlat3, u_xlat0);
    u_xlat3 = vec4(u_xlat13) * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat13 = u_xlat13 * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = u_xlat2.y;
    u_xlat2.y = u_xlat4.z;
    u_xlat4.z = u_xlat7.x;
    u_xlat2.z = u_xlat7.z;
    u_xlat4.w = u_xlat5.x;
    u_xlat7.x = dot(u_xlat4, u_xlat0);
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat7.xxxx + u_xlat3;
    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat7.x + u_xlat13;
    u_xlat2.w = u_xlat5.z;
    u_xlat0.x = dot(u_xlat2, u_xlat0);
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.xxxx + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.x + u_xlat7.x;
    u_xlat0.x = u_xlat0.x + hlslcc_mtx4x4unity_MatrixV[3].z;
    vs_TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat0;
    u_xlat2 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat2 = vec4(unity_ParticleUseMeshColors) * u_xlat2 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu12 = floatBitsToUint(u_xlat5.w) & 255u;
    u_xlat3.x = float(u_xlatu12);
    u_xlatu7.x = bitfieldExtract(floatBitsToUint(u_xlat5.w), int(8), int(8));
    u_xlatu7.y = bitfieldExtract(floatBitsToUint(u_xlat5.w), int(16), int(8));
    u_xlatu12 = floatBitsToUint(u_xlat5.w) >> 24u;
    u_xlat3.w = float(u_xlatu12);
    u_xlat3.yz = vec2(u_xlatu7.xy);
    u_xlat2 = u_xlat2 * u_xlat3;
    vs_COLOR0 = u_xlat2 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat12 = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat12 = floor(u_xlat12);
    u_xlat1.x = (-u_xlat12) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_ParticleUVShiftData.z;
    u_xlat13 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat12) * unity_ParticleUVShiftData.w + u_xlat13;
    u_xlat1.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb12 = unity_ParticleUVShiftData.x!=0.0;
    u_xlat1.xy = (bool(u_xlatb12)) ? u_xlat1.xy : in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.w = u_xlat0.w;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _ColorAddSubDiff;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
layout(location = 0) in highp vec4 vs_COLOR0;
layout(location = 1) in highp vec2 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat10;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat16_0 = u_xlat16_0 * _Color;
    u_xlat1.xyz = vs_COLOR0.xyz * _ColorAddSubDiff.xxx + u_xlat16_0.xyz;
    u_xlat10 = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.w = u_xlat10;
    u_xlat16_2.xyz = (-u_xlat1.xyz) + abs(u_xlat1.xyz);
    SV_Target0.xyz = _ColorAddSubDiff.yyy * u_xlat16_2.xyz + u_xlat1.xyz;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (192 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 16
  Matrix4x4 unity_MatrixVP at 80
  Vector4 _ProjectionParams at 0
  Vector4 unity_ParticleUVShiftData at 144
  Float unity_ParticleUseMeshColors at 160
  Vector4 _MainTex_ST at 176
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float unity_ParticleUseMeshColors;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 COLOR0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
};

template <int N> vec<uint, N> bitFieldExtractU(const vec<uint, N> width, const vec<uint, N> offset, const vec<uint, N> src)
{
	vec<bool, N> isWidthZero = (width == 0);
	vec<bool, N> needsClamp = ((width + offset) < 32);
	vec<uint, N> clampVersion = src << (32-(width+offset));
	clampVersion = clampVersion >> (32 - width);
	vec<uint, N> simpleVersion = src >> offset;
	vec<uint, N> res = select(simpleVersion, clampVersion, needsClamp);
	return select(res, vec<uint, N>(0), isWidthZero);
}; 
vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    int u_xlati1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat7;
    uint2 u_xlatu7;
    float u_xlat12;
    uint u_xlatu12;
    bool u_xlatb12;
    float u_xlat13;
    u_xlat0.xyz = input.POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat2.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 1]));
    u_xlat3.x = u_xlat2.z;
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 2]));
    u_xlat3.y = u_xlat4.x;
    u_xlat7.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 2]));
    u_xlat3.z = u_xlat7.y;
    u_xlat5 = float4(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 3]));
    u_xlat1.x = as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x34 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.w = u_xlat5.y;
    u_xlat13 = dot(u_xlat3, u_xlat0);
    u_xlat3 = float4(u_xlat13) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat13 = u_xlat13 * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = u_xlat2.y;
    u_xlat2.y = u_xlat4.z;
    u_xlat4.z = u_xlat7.x;
    u_xlat2.z = u_xlat7.z;
    u_xlat4.w = u_xlat5.x;
    u_xlat7.x = dot(u_xlat4, u_xlat0);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat7.xxxx, u_xlat3);
    u_xlat7.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat7.x, u_xlat13);
    u_xlat2.w = u_xlat5.z;
    u_xlat0.x = dot(u_xlat2, u_xlat0);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.xxxx, u_xlat3);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat0.x, u_xlat7.x);
    u_xlat0.x = u_xlat0.x + VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z;
    output.TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0 = u_xlat2 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    output.mtl_Position = u_xlat0;
    u_xlat2 = input.COLOR0 + float4(-1.0, -1.0, -1.0, -1.0);
    u_xlat2 = fma(float4(VGlobals.unity_ParticleUseMeshColors), u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlatu12 = as_type<uint>(u_xlat5.w) & 0xffu;
    u_xlat3.x = float(u_xlatu12);
    u_xlatu7.xy = bitFieldExtractU(uint2(0x8u, 0x8u), uint2(0x8u, 0x10u), as_type<uint2>(u_xlat5.ww));
    u_xlatu12 = as_type<uint>(u_xlat5.w) >> 0x18u;
    u_xlat3.w = float(u_xlatu12);
    u_xlat3.yz = float2(u_xlatu7.xy);
    u_xlat2 = u_xlat2 * u_xlat3;
    output.COLOR0 = u_xlat2 * float4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat12 = u_xlat1.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat12 = floor(u_xlat12);
    u_xlat1.x = fma((-u_xlat12), VGlobals.unity_ParticleUVShiftData.y, u_xlat1.x);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat13 = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = fma((-u_xlat12), VGlobals.unity_ParticleUVShiftData.w, u_xlat13);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat1.xy);
    u_xlatb12 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat1.xy = (bool(u_xlatb12)) ? u_xlat1.xy : input.TEXCOORD0.xy;
    output.TEXCOORD1.xy = fma(u_xlat1.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat0.y = u_xlat0.y * VGlobals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD3.w = u_xlat0.w;
    output.TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "FGlobals" (32 bytes) on slot 0 {
  Vector4 _Color at 0
  Vector4 _ColorAddSubDiff at 16
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Color;
    float4 _ColorAddSubDiff;
};

struct Mtl_FragmentIn
{
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float3 u_xlat1;
    u_xlat0 = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy);
    u_xlat0 = u_xlat0 * FGlobals._Color;
    u_xlat0.xyz = fma(input.COLOR0.xyz, FGlobals._ColorAddSubDiff.xxx, u_xlat0.xyz);
    output.SV_Target0.w = u_xlat0.w * input.COLOR0.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + abs(u_xlat0.xyz);
    output.SV_Target0.xyz = fma(FGlobals._ColorAddSubDiff.yyy, u_xlat1.xyz, u_xlat0.xyz);
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (32 bytes) {
  Vector4 _Color at 0
  Vector4 _ColorAddSubDiff at 16
}
Constant Buffer "$Globals" (208 bytes) {
  Matrix4x4 unity_MatrixV at 16
  Matrix4x4 unity_MatrixVP at 80
  Vector4 _ProjectionParams at 0
  ScalarInt unity_BaseInstanceID at 144
  Vector4 unity_ParticleUVShiftData at 160
  Float unity_ParticleUseMeshColors at 176
  Vector4 _MainTex_ST at 192
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require
#ifdef GL_ARB_shader_storage_buffer_object
#extension GL_ARB_shader_storage_buffer_object : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
uniform 	vec4 _MainTex_ST;
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in  vec4 in_POSITION0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
layout(location = 0) out vec4 vs_COLOR0;
layout(location = 1) out vec2 vs_TEXCOORD1;
layout(location = 2) out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat7;
uvec2 u_xlatu7;
float u_xlat12;
uint u_xlatu12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat3.x = u_xlat2.z;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat4.x;
    u_xlat7.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]));
    u_xlat3.z = u_xlat7.y;
    u_xlat5 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.w = u_xlat5.y;
    u_xlat13 = dot(u_xlat3, u_xlat0);
    u_xlat3 = vec4(u_xlat13) * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat13 = u_xlat13 * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = u_xlat2.y;
    u_xlat2.y = u_xlat4.z;
    u_xlat4.z = u_xlat7.x;
    u_xlat2.z = u_xlat7.z;
    u_xlat4.w = u_xlat5.x;
    u_xlat7.x = dot(u_xlat4, u_xlat0);
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat7.xxxx + u_xlat3;
    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat7.x + u_xlat13;
    u_xlat2.w = u_xlat5.z;
    u_xlat0.x = dot(u_xlat2, u_xlat0);
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.xxxx + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.x + u_xlat7.x;
    u_xlat0.x = u_xlat0.x + hlslcc_mtx4x4unity_MatrixV[3].z;
    vs_TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat0;
    u_xlatu12 = floatBitsToUint(u_xlat5.w) & 255u;
    u_xlat2.x = float(u_xlatu12);
    u_xlatu7.x = bitfieldExtract(floatBitsToUint(u_xlat5.w), int(8), int(8));
    u_xlatu7.y = bitfieldExtract(floatBitsToUint(u_xlat5.w), int(16), int(8));
    u_xlatu12 = floatBitsToUint(u_xlat5.w) >> 24u;
    u_xlat2.w = float(u_xlatu12);
    u_xlat2.yz = vec2(u_xlatu7.xy);
    u_xlat2 = u_xlat2 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat3 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat3 = vec4(unity_ParticleUseMeshColors) * u_xlat3 + vec4(1.0, 1.0, 1.0, 1.0);
    vs_COLOR0 = u_xlat2 * u_xlat3;
    u_xlat12 = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat12 = floor(u_xlat12);
    u_xlat1.x = (-u_xlat12) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_ParticleUVShiftData.z;
    u_xlat13 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat12) * unity_ParticleUVShiftData.w + u_xlat13;
    u_xlat1.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb12 = unity_ParticleUVShiftData.x!=0.0;
    u_xlat1.xy = (bool(u_xlatb12)) ? u_xlat1.xy : in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.w = u_xlat0.w;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Color;
uniform 	vec4 _ColorAddSubDiff;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
layout(location = 0) in  vec4 vs_COLOR0;
layout(location = 1) in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat0 = u_xlat10_0 * _Color;
    u_xlat0.xyz = vs_COLOR0.xyz * _ColorAddSubDiff.xxx + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w * vs_COLOR0.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + abs(u_xlat0.xyz);
    SV_Target0.xyz = _ColorAddSubDiff.yyy * u_xlat1.xyz + u_xlat0.xyz;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Set 2D Texture "_MainTex" to set: 0, binding: 1, used in: Fragment  using sampler in set: 0, binding: 0, used in: Fragment 

Constant Buffer "PGlobals2002869169" (32 bytes) on set: 1, binding: 0, used in: Fragment  {
  Vector4 _Color at 0
  Vector4 _ColorAddSubDiff at 16
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on set: 1, binding: 2, used in: Vertex  {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "VGlobals2002869169" (192 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixV at 16
  Matrix4x4 unity_MatrixVP at 80
  Vector4 _MainTex_ST at 176
  Vector4 _ProjectionParams at 0
  Vector4 unity_ParticleUVShiftData at 144
  Float unity_ParticleUseMeshColors at 160
}

Set Buffer  "unity_ParticleInstanceData" to set: 0, binding: 2, used in: Vertex 
Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 416

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 26 233 246 249 301 346 377
                              Name 233  "vs_TEXCOORD3"
                              Name 377  "vs_TEXCOORD1"
                              Decorate 11 Location 0
                              Decorate 26 BuiltIn InstanceIndex
                              MemberDecorate 28 0 Offset 0
                              MemberDecorate 28 1 Offset 4
                              Decorate 28 Block
                              Decorate 30 DescriptorSet 1
                              Decorate 30 Binding 2
                              Decorate 38 ArrayStride 4
                              MemberDecorate 39 0 Offset 0
                              Decorate 40 ArrayStride 56
                              MemberDecorate 41 0 NonWritable
                              MemberDecorate 41 0 Offset 0
                              Decorate 41 BufferBlock
                              Decorate 43 DescriptorSet 0
                              Decorate 43 Binding 2
                              Decorate 155 ArrayStride 16
                              Decorate 156 ArrayStride 16
                              MemberDecorate 157 0 Offset 0
                              MemberDecorate 157 1 Offset 16
                              MemberDecorate 157 2 Offset 80
                              MemberDecorate 157 3 Offset 144
                              MemberDecorate 157 4 Offset 160
                              MemberDecorate 157 5 Offset 176
                              Decorate 157 Block
                              Decorate 159 DescriptorSet 1
                              Decorate 159 Binding 1
                              Decorate 233(vs_TEXCOORD3) Location 2
                              MemberDecorate 244 0 BuiltIn Position
                              MemberDecorate 244 1 BuiltIn PointSize
                              MemberDecorate 244 2 BuiltIn ClipDistance
                              Decorate 244 Block
                              Decorate 249 RelaxedPrecision
                              Decorate 249 Location 1
                              Decorate 250 RelaxedPrecision
                              Decorate 253 RelaxedPrecision
                              Decorate 301 Location 0
                              Decorate 346 Location 2
                              Decorate 377(vs_TEXCOORD1) Location 1
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              12:             TypeVector 6(float) 3
              17:    6(float) Constant 1065353216
              18:             TypeInt 32 0
              19:     18(int) Constant 3
              20:             TypePointer Private 6(float)
              22:             TypeInt 32 1
              23:             TypePointer Private 22(int)
              24:     23(ptr) Variable Private
              25:             TypePointer Input 22(int)
              26:     25(ptr) Variable Input
              28:             TypeStruct 22(int) 22(int)
              29:             TypePointer Uniform 28(struct)
              30:     29(ptr) Variable Uniform
              31:     22(int) Constant 0
              32:             TypePointer Uniform 22(int)
              36:      8(ptr) Variable Private
              37:     18(int) Constant 14
              38:             TypeArray 18(int) 37
              39:             TypeStruct 38
              40:             TypeRuntimeArray 39(struct)
              41:             TypeStruct 40
              42:             TypePointer Uniform 41(struct)
              43:     42(ptr) Variable Uniform
              45:     22(int) Constant 2
              46:             TypePointer Uniform 18(int)
              55:     22(int) Constant 1
              62:      8(ptr) Variable Private
              63:     18(int) Constant 2
              66:     18(int) Constant 0
              68:      8(ptr) Variable Private
              70:     22(int) Constant 4
              75:     22(int) Constant 3
              80:     22(int) Constant 5
              89:     18(int) Constant 1
              91:             TypePointer Private 12(fvec3)
              92:     91(ptr) Variable Private
              94:     22(int) Constant 6
              99:     22(int) Constant 7
             104:     22(int) Constant 8
             112:      8(ptr) Variable Private
             114:     22(int) Constant 9
             119:     22(int) Constant 10
             124:     22(int) Constant 11
             129:     22(int) Constant 12
             134:      8(ptr) Variable Private
             136:     22(int) Constant 13
             148:     20(ptr) Variable Private
             154:     18(int) Constant 4
             155:             TypeArray 7(fvec4) 154
             156:             TypeArray 7(fvec4) 154
             157:             TypeStruct 7(fvec4) 155 156 7(fvec4) 6(float) 7(fvec4)
             158:             TypePointer Uniform 157(struct)
             159:    158(ptr) Variable Uniform
             160:             TypePointer Uniform 7(fvec4)
             165:             TypePointer Uniform 6(float)
             232:             TypePointer Output 7(fvec4)
233(vs_TEXCOORD3):    232(ptr) Variable Output
             237:             TypePointer Output 6(float)
             243:             TypeArray 6(float) 89
             244:             TypeStruct 7(fvec4) 6(float) 243
             245:             TypePointer Output 244(struct)
             246:    245(ptr) Variable Output
             249:     10(ptr) Variable Input
             251:    6(float) Constant 3212836864
             252:    7(fvec4) ConstantComposite 251 251 251 251
             259:    7(fvec4) ConstantComposite 17 17 17 17
             261:             TypePointer Private 18(int)
             262:    261(ptr) Variable Private
             266:     18(int) Constant 255
             271:             TypeVector 18(int) 2
             272:             TypePointer Private 271(ivec2)
             273:    272(ptr) Variable Private
             282:     22(int) Constant 16
             288:     18(int) Constant 24
             294:             TypeVector 6(float) 2
             301:    232(ptr) Variable Output
             303:    6(float) Constant 998277249
             304:    7(fvec4) ConstantComposite 303 303 303 303
             306:     20(ptr) Variable Private
             345:             TypePointer Input 294(fvec2)
             346:    345(ptr) Variable Input
             357:             TypeBool
             358:             TypePointer Private 357(bool)
             359:    358(ptr) Variable Private
             362:    6(float) Constant 0
             365:             TypePointer Function 294(fvec2)
             376:             TypePointer Output 294(fvec2)
377(vs_TEXCOORD1):    376(ptr) Variable Output
             396:    6(float) Constant 1056964608
             397:   12(fvec3) ConstantComposite 396 396 396
               4:           2 Function None 3
               5:             Label
             366:    365(ptr) Variable Function
              13:    7(fvec4) Load 11
              14:   12(fvec3) VectorShuffle 13 13 0 1 2
              15:    7(fvec4) Load 9
              16:    7(fvec4) VectorShuffle 15 14 4 5 6 3
                              Store 9 16
              21:     20(ptr) AccessChain 9 19
                              Store 21 17
              27:     22(int) Load 26
              33:     32(ptr) AccessChain 30 31
              34:     22(int) Load 33
              35:     22(int) IAdd 27 34
                              Store 24 35
              44:     22(int) Load 24
              47:     46(ptr) AccessChain 43 31 44 31 45
              48:     18(int) Load 47
              49:    6(float) Bitcast 48
              50:     22(int) Load 24
              51:     46(ptr) AccessChain 43 31 50 31 31
              52:     18(int) Load 51
              53:    6(float) Bitcast 52
              54:     22(int) Load 24
              56:     46(ptr) AccessChain 43 31 54 31 55
              57:     18(int) Load 56
              58:    6(float) Bitcast 57
              59:   12(fvec3) CompositeConstruct 49 53 58
              60:    7(fvec4) Load 36
              61:    7(fvec4) VectorShuffle 60 59 4 5 6 3
                              Store 36 61
              64:     20(ptr) AccessChain 36 63
              65:    6(float) Load 64
              67:     20(ptr) AccessChain 62 66
                              Store 67 65
              69:     22(int) Load 24
              71:     46(ptr) AccessChain 43 31 69 31 70
              72:     18(int) Load 71
              73:    6(float) Bitcast 72
              74:     22(int) Load 24
              76:     46(ptr) AccessChain 43 31 74 31 75
              77:     18(int) Load 76
              78:    6(float) Bitcast 77
              79:     22(int) Load 24
              81:     46(ptr) AccessChain 43 31 79 31 80
              82:     18(int) Load 81
              83:    6(float) Bitcast 82
              84:   12(fvec3) CompositeConstruct 73 78 83
              85:    7(fvec4) Load 68
              86:    7(fvec4) VectorShuffle 85 84 4 5 6 3
                              Store 68 86
              87:     20(ptr) AccessChain 68 66
              88:    6(float) Load 87
              90:     20(ptr) AccessChain 62 89
                              Store 90 88
              93:     22(int) Load 24
              95:     46(ptr) AccessChain 43 31 93 31 94
              96:     18(int) Load 95
              97:    6(float) Bitcast 96
              98:     22(int) Load 24
             100:     46(ptr) AccessChain 43 31 98 31 99
             101:     18(int) Load 100
             102:    6(float) Bitcast 101
             103:     22(int) Load 24
             105:     46(ptr) AccessChain 43 31 103 31 104
             106:     18(int) Load 105
             107:    6(float) Bitcast 106
             108:   12(fvec3) CompositeConstruct 97 102 107
                              Store 92 108
             109:     20(ptr) AccessChain 92 89
             110:    6(float) Load 109
             111:     20(ptr) AccessChain 62 63
                              Store 111 110
             113:     22(int) Load 24
             115:     46(ptr) AccessChain 43 31 113 31 114
             116:     18(int) Load 115
             117:    6(float) Bitcast 116
             118:     22(int) Load 24
             120:     46(ptr) AccessChain 43 31 118 31 119
             121:     18(int) Load 120
             122:    6(float) Bitcast 121
             123:     22(int) Load 24
             125:     46(ptr) AccessChain 43 31 123 31 124
             126:     18(int) Load 125
             127:    6(float) Bitcast 126
             128:     22(int) Load 24
             130:     46(ptr) AccessChain 43 31 128 31 129
             131:     18(int) Load 130
             132:    6(float) Bitcast 131
             133:    7(fvec4) CompositeConstruct 117 122 127 132
                              Store 112 133
             135:     22(int) Load 24
             137:     46(ptr) AccessChain 43 31 135 31 136
             138:     18(int) Load 137
             139:    6(float) Bitcast 138
             140:     20(ptr) AccessChain 134 66
                              Store 140 139
             141:     20(ptr) AccessChain 134 66
             142:    6(float) Load 141
             143:    6(float) ExtInst 1(GLSL.std.450) 8(Floor) 142
             144:     20(ptr) AccessChain 134 66
                              Store 144 143
             145:     20(ptr) AccessChain 112 89
             146:    6(float) Load 145
             147:     20(ptr) AccessChain 62 19
                              Store 147 146
             149:    7(fvec4) Load 62
             150:    7(fvec4) Load 9
             151:    6(float) Dot 149 150
                              Store 148 151
             152:    6(float) Load 148
             153:    7(fvec4) CompositeConstruct 152 152 152 152
             161:    160(ptr) AccessChain 159 45 55
             162:    7(fvec4) Load 161
             163:    7(fvec4) FMul 153 162
                              Store 62 163
             164:    6(float) Load 148
             166:    165(ptr) AccessChain 159 55 55 63
             167:    6(float) Load 166
             168:    6(float) FMul 164 167
                              Store 148 168
             169:     20(ptr) AccessChain 36 89
             170:    6(float) Load 169
             171:     20(ptr) AccessChain 68 66
                              Store 171 170
             172:     20(ptr) AccessChain 68 63
             173:    6(float) Load 172
             174:     20(ptr) AccessChain 36 89
                              Store 174 173
             175:     20(ptr) AccessChain 92 66
             176:    6(float) Load 175
             177:     20(ptr) AccessChain 68 63
                              Store 177 176
             178:     20(ptr) AccessChain 92 63
             179:    6(float) Load 178
             180:     20(ptr) AccessChain 36 63
                              Store 180 179
             181:     20(ptr) AccessChain 112 66
             182:    6(float) Load 181
             183:     20(ptr) AccessChain 68 19
                              Store 183 182
             184:    7(fvec4) Load 68
             185:    7(fvec4) Load 9
             186:    6(float) Dot 184 185
             187:     20(ptr) AccessChain 92 66
                              Store 187 186
             188:    160(ptr) AccessChain 159 45 31
             189:    7(fvec4) Load 188
             190:   12(fvec3) Load 92
             191:    7(fvec4) VectorShuffle 190 190 0 0 0 0
             192:    7(fvec4) FMul 189 191
             193:    7(fvec4) Load 62
             194:    7(fvec4) FAdd 192 193
                              Store 62 194
             195:    165(ptr) AccessChain 159 55 31 63
             196:    6(float) Load 195
             197:     20(ptr) AccessChain 92 66
             198:    6(float) Load 197
             199:    6(float) FMul 196 198
             200:    6(float) Load 148
             201:    6(float) FAdd 199 200
             202:     20(ptr) AccessChain 92 66
                              Store 202 201
             203:     20(ptr) AccessChain 112 63
             204:    6(float) Load 203
             205:     20(ptr) AccessChain 36 19
                              Store 205 204
             206:    7(fvec4) Load 36
             207:    7(fvec4) Load 9
             208:    6(float) Dot 206 207
             209:     20(ptr) AccessChain 9 66
                              Store 209 208
             210:    160(ptr) AccessChain 159 45 45
             211:    7(fvec4) Load 210
             212:    7(fvec4) Load 9
             213:    7(fvec4) VectorShuffle 212 212 0 0 0 0
             214:    7(fvec4) FMul 211 213
             215:    7(fvec4) Load 62
             216:    7(fvec4) FAdd 214 215
                              Store 36 216
             217:    165(ptr) AccessChain 159 55 45 63
             218:    6(float) Load 217
             219:     20(ptr) AccessChain 9 66
             220:    6(float) Load 219
             221:    6(float) FMul 218 220
             222:     20(ptr) AccessChain 92 66
             223:    6(float) Load 222
             224:    6(float) FAdd 221 223
             225:     20(ptr) AccessChain 9 66
                              Store 225 224
             226:     20(ptr) AccessChain 9 66
             227:    6(float) Load 226
             228:    165(ptr) AccessChain 159 55 75 63
             229:    6(float) Load 228
             230:    6(float) FAdd 227 229
             231:     20(ptr) AccessChain 9 66
                              Store 231 230
             234:     20(ptr) AccessChain 9 66
             235:    6(float) Load 234
             236:    6(float) FNegate 235
             238:    237(ptr) AccessChain 233(vs_TEXCOORD3) 63
                              Store 238 236
             239:    7(fvec4) Load 36
             240:    160(ptr) AccessChain 159 45 75
             241:    7(fvec4) Load 240
             242:    7(fvec4) FAdd 239 241
                              Store 9 242
             247:    7(fvec4) Load 9
             248:    232(ptr) AccessChain 246 31
                              Store 248 247
             250:    7(fvec4) Load 249
             253:    7(fvec4) FAdd 250 252
                              Store 36 253
             254:    165(ptr) AccessChain 159 70
             255:    6(float) Load 254
             256:    7(fvec4) CompositeConstruct 255 255 255 255
             257:    7(fvec4) Load 36
             258:    7(fvec4) FMul 256 257
             260:    7(fvec4) FAdd 258 259
                              Store 36 260
             263:     20(ptr) AccessChain 112 19
             264:    6(float) Load 263
             265:     18(int) Bitcast 264
             267:     18(int) BitwiseAnd 265 266
                              Store 262 267
             268:     18(int) Load 262
             269:    6(float) ConvertUToF 268
             270:     20(ptr) AccessChain 62 66
                              Store 270 269
             274:     20(ptr) AccessChain 112 19
             275:    6(float) Load 274
             276:     18(int) Bitcast 275
             277:     18(int) BitFieldUExtract 276 104 104
             278:    261(ptr) AccessChain 273 66
                              Store 278 277
             279:     20(ptr) AccessChain 112 19
             280:    6(float) Load 279
             281:     18(int) Bitcast 280
             283:     18(int) BitFieldUExtract 281 282 104
             284:    261(ptr) AccessChain 273 89
                              Store 284 283
             285:     20(ptr) AccessChain 112 19
             286:    6(float) Load 285
             287:     18(int) Bitcast 286
             289:     18(int) ShiftRightLogical 287 288
                              Store 262 289
             290:     18(int) Load 262
             291:    6(float) ConvertUToF 290
             292:     20(ptr) AccessChain 62 19
                              Store 292 291
             293:  271(ivec2) Load 273
             295:  294(fvec2) ConvertUToF 293
             296:    7(fvec4) Load 62
             297:    7(fvec4) VectorShuffle 296 295 0 4 5 3
                              Store 62 297
             298:    7(fvec4) Load 36
             299:    7(fvec4) Load 62
             300:    7(fvec4) FMul 298 299
                              Store 36 300
             302:    7(fvec4) Load 36
             305:    7(fvec4) FMul 302 304
                              Store 301 305
             307:     20(ptr) AccessChain 134 66
             308:    6(float) Load 307
             309:    165(ptr) AccessChain 159 75 89
             310:    6(float) Load 309
             311:    6(float) FDiv 308 310
                              Store 306 311
             312:    6(float) Load 306
             313:    6(float) ExtInst 1(GLSL.std.450) 8(Floor) 312
                              Store 306 313
             314:    6(float) Load 306
             315:    6(float) FNegate 314
             316:    165(ptr) AccessChain 159 75 89
             317:    6(float) Load 316
             318:    6(float) FMul 315 317
             319:     20(ptr) AccessChain 134 66
             320:    6(float) Load 319
             321:    6(float) FAdd 318 320
             322:     20(ptr) AccessChain 134 66
                              Store 322 321
             323:     20(ptr) AccessChain 134 66
             324:    6(float) Load 323
             325:    6(float) ExtInst 1(GLSL.std.450) 8(Floor) 324
             326:     20(ptr) AccessChain 134 66
                              Store 326 325
             327:     20(ptr) AccessChain 134 66
             328:    6(float) Load 327
             329:    165(ptr) AccessChain 159 75 63
             330:    6(float) Load 329
             331:    6(float) FMul 328 330
             332:     20(ptr) AccessChain 134 66
                              Store 332 331
             333:    165(ptr) AccessChain 159 75 19
             334:    6(float) Load 333
             335:    6(float) FNegate 334
             336:    6(float) FAdd 335 17
                              Store 148 336
             337:    6(float) Load 306
             338:    6(float) FNegate 337
             339:    165(ptr) AccessChain 159 75 19
             340:    6(float) Load 339
             341:    6(float) FMul 338 340
             342:    6(float) Load 148
             343:    6(float) FAdd 341 342
             344:     20(ptr) AccessChain 134 89
                              Store 344 343
             347:  294(fvec2) Load 346
             348:    160(ptr) AccessChain 159 75
             349:    7(fvec4) Load 348
             350:  294(fvec2) VectorShuffle 349 349 2 3
             351:  294(fvec2) FMul 347 350
             352:    7(fvec4) Load 134
             353:  294(fvec2) VectorShuffle 352 352 0 1
             354:  294(fvec2) FAdd 351 353
             355:    7(fvec4) Load 134
             356:    7(fvec4) VectorShuffle 355 354 4 5 2 3
                              Store 134 356
             360:    165(ptr) AccessChain 159 75 66
             361:    6(float) Load 360
             363:   357(bool) FOrdNotEqual 361 362
                              Store 359 363
             364:   357(bool) Load 359
                              SelectionMerge 368 None
                              BranchConditional 364 367 371
             367:               Label
             369:    7(fvec4)   Load 134
             370:  294(fvec2)   VectorShuffle 369 369 0 1
                                Store 366 370
                                Branch 368
             371:               Label
             372:  294(fvec2)   Load 346
                                Store 366 372
                                Branch 368
             368:             Label
             373:  294(fvec2) Load 366
             374:    7(fvec4) Load 134
             375:    7(fvec4) VectorShuffle 374 373 4 5 2 3
                              Store 134 375
             378:    7(fvec4) Load 134
             379:  294(fvec2) VectorShuffle 378 378 0 1
             380:    160(ptr) AccessChain 159 80
             381:    7(fvec4) Load 380
             382:  294(fvec2) VectorShuffle 381 381 0 1
             383:  294(fvec2) FMul 379 382
             384:    160(ptr) AccessChain 159 80
             385:    7(fvec4) Load 384
             386:  294(fvec2) VectorShuffle 385 385 2 3
             387:  294(fvec2) FAdd 383 386
                              Store 377(vs_TEXCOORD1) 387
             388:     20(ptr) AccessChain 9 89
             389:    6(float) Load 388
             390:    165(ptr) AccessChain 159 31 66
             391:    6(float) Load 390
             392:    6(float) FMul 389 391
             393:     20(ptr) AccessChain 9 89
                              Store 393 392
             394:    7(fvec4) Load 9
             395:   12(fvec3) VectorShuffle 394 394 0 3 1
             398:   12(fvec3) FMul 395 397
             399:    7(fvec4) Load 134
             400:    7(fvec4) VectorShuffle 399 398 4 1 5 6
                              Store 134 400
             401:     20(ptr) AccessChain 9 19
             402:    6(float) Load 401
             403:    237(ptr) AccessChain 233(vs_TEXCOORD3) 19
                              Store 403 402
             404:    7(fvec4) Load 134
             405:  294(fvec2) VectorShuffle 404 404 2 2
             406:    7(fvec4) Load 134
             407:  294(fvec2) VectorShuffle 406 406 0 3
             408:  294(fvec2) FAdd 405 407
             409:    7(fvec4) Load 233(vs_TEXCOORD3)
             410:    7(fvec4) VectorShuffle 409 408 4 5 2 3
                              Store 233(vs_TEXCOORD3) 410
             411:    237(ptr) AccessChain 246 31 89
             412:    6(float) Load 411
             413:    6(float) FNegate 412
             414:    237(ptr) AccessChain 246 31 89
                              Store 414 413
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 82

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 22 40 62
                              ExecutionMode 4 OriginUpperLeft
                              Name 22  "vs_TEXCOORD1"
                              Decorate 9 RelaxedPrecision
                              Decorate 12 RelaxedPrecision
                              Decorate 12 DescriptorSet 0
                              Decorate 12 Binding 1
                              Decorate 13 RelaxedPrecision
                              Decorate 16 RelaxedPrecision
                              Decorate 16 DescriptorSet 0
                              Decorate 16 Binding 0
                              Decorate 17 RelaxedPrecision
                              Decorate 22(vs_TEXCOORD1) Location 1
                              Decorate 25 RelaxedPrecision
                              Decorate 26 RelaxedPrecision
                              MemberDecorate 27 0 RelaxedPrecision
                              MemberDecorate 27 0 Offset 0
                              MemberDecorate 27 1 RelaxedPrecision
                              MemberDecorate 27 1 Offset 16
                              Decorate 27 Block
                              Decorate 29 DescriptorSet 1
                              Decorate 29 Binding 0
                              Decorate 34 RelaxedPrecision
                              Decorate 35 RelaxedPrecision
                              Decorate 40 Location 0
                              Decorate 45 RelaxedPrecision
                              Decorate 46 RelaxedPrecision
                              Decorate 48 RelaxedPrecision
                              Decorate 49 RelaxedPrecision
                              Decorate 56 RelaxedPrecision
                              Decorate 62 RelaxedPrecision
                              Decorate 62 Location 0
                              Decorate 66 RelaxedPrecision
                              Decorate 73 RelaxedPrecision
                              Decorate 74 RelaxedPrecision
                              Decorate 75 RelaxedPrecision
                              Decorate 76 RelaxedPrecision
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypeImage 6(float) 2D sampled format:Unknown
              11:             TypePointer UniformConstant 10
              12:     11(ptr) Variable UniformConstant
              14:             TypeSampler
              15:             TypePointer UniformConstant 14
              16:     15(ptr) Variable UniformConstant
              18:             TypeSampledImage 10
              20:             TypeVector 6(float) 2
              21:             TypePointer Input 20(fvec2)
22(vs_TEXCOORD1):     21(ptr) Variable Input
              25:      8(ptr) Variable Private
              27:             TypeStruct 7(fvec4) 7(fvec4)
              28:             TypePointer Uniform 27(struct)
              29:     28(ptr) Variable Uniform
              30:             TypeInt 32 1
              31:     30(int) Constant 0
              32:             TypePointer Uniform 7(fvec4)
              36:             TypeVector 6(float) 3
              37:             TypePointer Private 36(fvec3)
              38:     37(ptr) Variable Private
              39:             TypePointer Input 7(fvec4)
              40:     39(ptr) Variable Input
              43:     30(int) Constant 1
              51:             TypePointer Private 6(float)
              52:     51(ptr) Variable Private
              53:             TypeInt 32 0
              54:     53(int) Constant 3
              57:             TypePointer Input 6(float)
              61:             TypePointer Output 7(fvec4)
              62:     61(ptr) Variable Output
              64:             TypePointer Output 6(float)
              66:     37(ptr) Variable Private
               4:           2 Function None 3
               5:             Label
              13:          10 Load 12
              17:          14 Load 16
              19:          18 SampledImage 13 17
              23:   20(fvec2) Load 22(vs_TEXCOORD1)
              24:    7(fvec4) ImageSampleImplicitLod 19 23
                              Store 9 24
              26:    7(fvec4) Load 9
              33:     32(ptr) AccessChain 29 31
              34:    7(fvec4) Load 33
              35:    7(fvec4) FMul 26 34
                              Store 25 35
              41:    7(fvec4) Load 40
              42:   36(fvec3) VectorShuffle 41 41 0 1 2
              44:     32(ptr) AccessChain 29 43
              45:    7(fvec4) Load 44
              46:   36(fvec3) VectorShuffle 45 45 0 0 0
              47:   36(fvec3) FMul 42 46
              48:    7(fvec4) Load 25
              49:   36(fvec3) VectorShuffle 48 48 0 1 2
              50:   36(fvec3) FAdd 47 49
                              Store 38 50
              55:     51(ptr) AccessChain 25 54
              56:    6(float) Load 55
              58:     57(ptr) AccessChain 40 54
              59:    6(float) Load 58
              60:    6(float) FMul 56 59
                              Store 52 60
              63:    6(float) Load 52
              65:     64(ptr) AccessChain 62 54
                              Store 65 63
              67:   36(fvec3) Load 38
              68:   36(fvec3) FNegate 67
              69:   36(fvec3) Load 38
              70:   36(fvec3) ExtInst 1(GLSL.std.450) 4(FAbs) 69
              71:   36(fvec3) FAdd 68 70
                              Store 66 71
              72:     32(ptr) AccessChain 29 43
              73:    7(fvec4) Load 72
              74:   36(fvec3) VectorShuffle 73 73 1 1 1
              75:   36(fvec3) Load 66
              76:   36(fvec3) FMul 74 75
              77:   36(fvec3) Load 38
              78:   36(fvec3) FAdd 76 77
              79:    7(fvec4) Load 62
              80:    7(fvec4) VectorShuffle 79 78 4 5 6 3
                              Store 62 80
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON _EMISSION 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON _FADING_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 33 math, 6 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "$Globals" (224 bytes) on slot 0 {
  Vector4 unity_ParticleUVShiftData at 64
  Float unity_ParticleUseMeshColors at 80
  Vector4 _MainTex_ST at 96
}
Constant Buffer "UnityPerCamera" (144 bytes) on slot 1 {
  Vector4 _ProjectionParams at 80
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 2 {
  Matrix4x4 unity_MatrixV at 144
  Matrix4x4 unity_MatrixVP at 272
}
Constant Buffer "UnityDrawCallInfo" (16 bytes) on slot 3 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float       
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
// SV_InstanceID            0   x           4   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xy          2     NONE   float   xy  
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
//
      vs_5_0
      dcl_globalFlags refactoringAllowed
      dcl_constantbuffer CB0[7], immediateIndexed
      dcl_constantbuffer CB1[6], immediateIndexed
      dcl_constantbuffer CB2[21], immediateIndexed
      dcl_constantbuffer CB3[1], immediateIndexed
      dcl_resource_structured t0, 56
      dcl_input v0.xyz
      dcl_input v2.xyzw
      dcl_input v3.xy
      dcl_input_sgv v4.x, instance_id
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyzw
      dcl_output o2.xy
      dcl_output o3.xyzw
      dcl_temps 6
   0: mov r0.xyz, v0.xyzx
   1: mov r0.w, l(1.000000)
   2: iadd r1.x, v4.x, cb3[0].x
   3: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r2.xyz, r1.x, l(0), t0.zxyx
   4: mov r3.x, r2.z
   5: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r4.xyz, r1.x, l(12), t0.yxzx
   6: mov r3.y, r4.x
   7: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r1.yzw, r1.x, l(24), t0.xxyz
   8: mov r3.z, r1.z
   9: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r5.xyzw, r1.x, l(36), t0.xyzw
  10: ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r1.x, r1.x, l(52), t0.xxxx
  11: round_ni r1.x, r1.x
  12: mov r3.w, r5.y
  13: dp4 r1.z, r3.xyzw, r0.xyzw
  14: mul r3.xyzw, r1.zzzz, cb2[18].xyzw
  15: mul r1.z, r1.z, cb2[10].z
  16: mov r4.x, r2.y
  17: mov r2.y, r4.z
  18: mov r4.z, r1.y
  19: mov r2.z, r1.w
  20: mov r4.w, r5.x
  21: dp4 r1.y, r4.xyzw, r0.xyzw
  22: mad r3.xyzw, cb2[17].xyzw, r1.yyyy, r3.xyzw
  23: mad r1.y, cb2[9].z, r1.y, r1.z
  24: mov r2.w, r5.z
  25: dp4 r0.x, r2.xyzw, r0.xyzw
  26: mad r2.xyzw, cb2[19].xyzw, r0.xxxx, r3.xyzw
  27: mad r0.x, cb2[11].z, r0.x, r1.y
  28: add r0.x, r0.x, cb2[12].z
  29: mov o3.z, -r0.x
  30: add r0.xyzw, r2.xyzw, cb2[20].xyzw
  31: mov o0.xyzw, r0.xyzw
  32: and r0.z, r5.w, l(255)
  33: utof r2.x, r0.z
  34: ubfe r1.yz, l(0, 8, 8, 0), l(0, 8, 16, 0), r5.wwww
  35: ushr r0.z, r5.w, l(24)
  36: utof r2.w, r0.z
  37: utof r2.yz, r1.yyzy
  38: mul r2.xyzw, r2.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
  39: add r3.xyzw, v2.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
  40: mad r3.xyzw, cb0[5].xxxx, r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  41: mul o1.xyzw, r2.xyzw, r3.xyzw
  42: div r0.z, r1.x, cb0[4].y
  43: round_ni r0.z, r0.z
  44: mad r1.x, -r0.z, cb0[4].y, r1.x
  45: round_ni r1.x, r1.x
  46: mul r1.x, r1.x, cb0[4].z
  47: add r1.z, -cb0[4].w, l(1.000000)
  48: mad r1.y, -r0.z, cb0[4].w, r1.z
  49: mad r1.xy, v3.xyxx, cb0[4].zwzz, r1.xyxx
  50: ne r0.z, cb0[4].x, l(0.000000)
  51: movc r1.xy, r0.zzzz, r1.xyxx, v3.xyxx
  52: mad o2.xy, r1.xyxx, cb0[6].xyxx, cb0[6].zwzz
  53: mul r0.y, r0.y, cb1[5].x
  54: mul r1.xzw, r0.xxwy, l(0.500000, 0.000000, 0.500000, 0.500000)
  55: mov o3.w, r0.w
  56: add o3.xy, r1.zzzz, r1.xwxx
  57: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 20 math, 3 temp registers, 3 textures, 2 branches
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_CameraDepthTexture" to slot 1 sampler slot 2
Set 2D Texture "_EmissionMap" to slot 2 sampler slot 1

Constant Buffer "$Globals" (224 bytes) on slot 0 {
  Vector4 _Color at 112
  Vector3 _EmissionColor at 132
  Vector4 _SoftParticleFadeParams at 160
  Vector4 _CameraFadeParams at 176
  Vector4 _ColorAddSubDiff at 208
}
Constant Buffer "UnityPerCamera" (144 bytes) on slot 1 {
  Vector4 _ZBufferParams at 112
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xy          2     NONE   float   xy  
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_5_0
      dcl_globalFlags refactoringAllowed
      dcl_constantbuffer CB0[14], immediateIndexed
      dcl_constantbuffer CB1[8], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_sampler s2, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_resource_texture2d (float,float,float,float) t2
      dcl_input_ps linear v1.xyzw
      dcl_input_ps linear v2.xy
      dcl_input_ps linear v3.xyzw
      dcl_output o0.xyzw
      dcl_temps 3
   0: sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s0
   1: mul r0.xyzw, r0.xyzw, cb0[7].xyzw
   2: mad r0.xyz, v1.xyzx, cb0[13].xxxx, r0.xyzx
   3: add r1.xyz, -r0.xyzx, |r0.xyzx|
   4: mad r0.xyz, cb0[13].yyyy, r1.xyzx, r0.xyzx
   5: mul r0.w, r0.w, v1.w
   6: lt r1.xy, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[10].xyxx
   7: or r1.x, r1.y, r1.x
   8: if_nz r1.x
   9:   div r1.xy, v3.xyxx, v3.wwww
  10:   sample_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t1.xyzw, s2
  11:   mad r1.x, cb1[7].z, r1.x, cb1[7].w
  12:   div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
  13:   add r1.x, r1.x, -cb0[10].x
  14:   add r1.x, r1.x, -v3.z
  15:   mul_sat r1.x, r1.x, cb0[10].y
  16:   mul r0.w, r0.w, r1.x
  17: else 
  18:   mov r1.x, l(1.000000)
  19: endif 
  20: add r1.y, v3.z, -cb0[11].x
  21: mul_sat r1.y, r1.y, cb0[11].y
  22: mul o0.w, r0.w, r1.y
  23: sample_indexable(texture2d)(float,float,float,float) r2.xyz, v2.xyxx, t2.xyzw, s1
  24: mul r2.xyz, r2.xyzx, cb0[8].yzwy
  25: mul r1.yzw, r1.yyyy, r2.xxyz
  26: mad o0.xyz, r1.yzwy, r1.xxxx, r0.xyzx
  27: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON _EMISSION 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON _FADING_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_CameraDepthTexture" to slot 1
Set 2D Texture "_EmissionMap" to slot 2

Constant Buffer "$Globals" (96 bytes) {
  Vector4 _ZBufferParams at 0
  Vector4 _Color at 16
  Vector3 _EmissionColor at 32
  Vector4 _SoftParticleFadeParams at 48
  Vector4 _CameraFadeParams at 64
  Vector4 _ColorAddSubDiff at 80
}
Constant Buffer "$Globals" (208 bytes) {
  Matrix4x4 unity_MatrixV at 16
  Matrix4x4 unity_MatrixVP at 80
  Vector4 _ProjectionParams at 0
  ScalarInt unity_BaseInstanceID at 144
  Vector4 unity_ParticleUVShiftData at 160
  Float unity_ParticleUseMeshColors at 176
  Vector4 _MainTex_ST at 192
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
uniform 	vec4 _MainTex_ST;
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
layout(location = 0) out highp vec4 vs_COLOR0;
layout(location = 1) out highp vec2 vs_TEXCOORD1;
layout(location = 2) out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat7;
uvec2 u_xlatu7;
float u_xlat12;
uint u_xlatu12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat3.x = u_xlat2.z;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat4.x;
    u_xlat7.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]));
    u_xlat3.z = u_xlat7.y;
    u_xlat5 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.w = u_xlat5.y;
    u_xlat13 = dot(u_xlat3, u_xlat0);
    u_xlat3 = vec4(u_xlat13) * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat13 = u_xlat13 * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = u_xlat2.y;
    u_xlat2.y = u_xlat4.z;
    u_xlat4.z = u_xlat7.x;
    u_xlat2.z = u_xlat7.z;
    u_xlat4.w = u_xlat5.x;
    u_xlat7.x = dot(u_xlat4, u_xlat0);
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat7.xxxx + u_xlat3;
    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat7.x + u_xlat13;
    u_xlat2.w = u_xlat5.z;
    u_xlat0.x = dot(u_xlat2, u_xlat0);
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.xxxx + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.x + u_xlat7.x;
    u_xlat0.x = u_xlat0.x + hlslcc_mtx4x4unity_MatrixV[3].z;
    vs_TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat0;
    u_xlat2 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat2 = vec4(unity_ParticleUseMeshColors) * u_xlat2 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu12 = floatBitsToUint(u_xlat5.w) & 255u;
    u_xlat3.x = float(u_xlatu12);
    u_xlatu7.x = bitfieldExtract(floatBitsToUint(u_xlat5.w), int(8), int(8));
    u_xlatu7.y = bitfieldExtract(floatBitsToUint(u_xlat5.w), int(16), int(8));
    u_xlatu12 = floatBitsToUint(u_xlat5.w) >> 24u;
    u_xlat3.w = float(u_xlatu12);
    u_xlat3.yz = vec2(u_xlatu7.xy);
    u_xlat2 = u_xlat2 * u_xlat3;
    vs_COLOR0 = u_xlat2 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat12 = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat12 = floor(u_xlat12);
    u_xlat1.x = (-u_xlat12) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_ParticleUVShiftData.z;
    u_xlat13 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat12) * unity_ParticleUVShiftData.w + u_xlat13;
    u_xlat1.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb12 = unity_ParticleUVShiftData.x!=0.0;
    u_xlat1.xy = (bool(u_xlatb12)) ? u_xlat1.xy : in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.w = u_xlat0.w;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _Color;
uniform 	mediump vec3 _EmissionColor;
uniform 	vec4 _SoftParticleFadeParams;
uniform 	vec4 _CameraFadeParams;
uniform 	mediump vec4 _ColorAddSubDiff;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;
layout(location = 0) in highp vec4 vs_COLOR0;
layout(location = 1) in highp vec2 vs_TEXCOORD1;
layout(location = 2) in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
vec2 u_xlat6;
bvec2 u_xlatb6;
mediump vec3 u_xlat16_8;
float u_xlat11;
mediump float u_xlat16_11;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat16_0 = u_xlat16_0 * _Color;
    u_xlat1.xyz = vs_COLOR0.xyz * _ColorAddSubDiff.xxx + u_xlat16_0.xyz;
    u_xlat16_2.xyz = (-u_xlat1.xyz) + abs(u_xlat1.xyz);
    u_xlat16_2.xyz = _ColorAddSubDiff.yyy * u_xlat16_2.xyz + u_xlat1.xyz;
    u_xlat1.x = u_xlat16_0.w * vs_COLOR0.w;
    u_xlatb6.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb6.x = u_xlatb6.y || u_xlatb6.x;
    if(u_xlatb6.x){
        u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
        u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat6.x = u_xlat6.x + (-_SoftParticleFadeParams.x);
        u_xlat6.x = u_xlat6.x + (-vs_TEXCOORD3.z);
        u_xlat6.x = u_xlat6.x * _SoftParticleFadeParams.y;
        u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
        u_xlat11 = u_xlat6.x * u_xlat1.x;
        u_xlat16_11 = u_xlat11;
    } else {
        u_xlat16_11 = u_xlat1.x;
        u_xlat6.x = 1.0;
    }
    u_xlat3.x = vs_TEXCOORD3.z + (-_CameraFadeParams.x);
    u_xlat3.x = u_xlat3.x * _CameraFadeParams.y;
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat0.w = u_xlat16_11 * u_xlat3.x;
    u_xlat16_8.xyz = texture(_EmissionMap, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_8.xyz * vec3(_EmissionColor.x, _EmissionColor.y, _EmissionColor.z);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat16_4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat6.xxx + u_xlat16_2.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON _EMISSION 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON _FADING_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (192 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 16
  Matrix4x4 unity_MatrixVP at 80
  Vector4 _ProjectionParams at 0
  Vector4 unity_ParticleUVShiftData at 144
  Float unity_ParticleUseMeshColors at 160
  Vector4 _MainTex_ST at 176
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float unity_ParticleUseMeshColors;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 COLOR0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
};

template <int N> vec<uint, N> bitFieldExtractU(const vec<uint, N> width, const vec<uint, N> offset, const vec<uint, N> src)
{
	vec<bool, N> isWidthZero = (width == 0);
	vec<bool, N> needsClamp = ((width + offset) < 32);
	vec<uint, N> clampVersion = src << (32-(width+offset));
	clampVersion = clampVersion >> (32 - width);
	vec<uint, N> simpleVersion = src >> offset;
	vec<uint, N> res = select(simpleVersion, clampVersion, needsClamp);
	return select(res, vec<uint, N>(0), isWidthZero);
}; 
vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    int u_xlati1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat7;
    uint2 u_xlatu7;
    float u_xlat12;
    uint u_xlatu12;
    bool u_xlatb12;
    float u_xlat13;
    u_xlat0.xyz = input.POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat2.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 1]));
    u_xlat3.x = u_xlat2.z;
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 2]));
    u_xlat3.y = u_xlat4.x;
    u_xlat7.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 2]));
    u_xlat3.z = u_xlat7.y;
    u_xlat5 = float4(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 3]));
    u_xlat1.x = as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x34 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.w = u_xlat5.y;
    u_xlat13 = dot(u_xlat3, u_xlat0);
    u_xlat3 = float4(u_xlat13) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat13 = u_xlat13 * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = u_xlat2.y;
    u_xlat2.y = u_xlat4.z;
    u_xlat4.z = u_xlat7.x;
    u_xlat2.z = u_xlat7.z;
    u_xlat4.w = u_xlat5.x;
    u_xlat7.x = dot(u_xlat4, u_xlat0);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat7.xxxx, u_xlat3);
    u_xlat7.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat7.x, u_xlat13);
    u_xlat2.w = u_xlat5.z;
    u_xlat0.x = dot(u_xlat2, u_xlat0);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.xxxx, u_xlat3);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat0.x, u_xlat7.x);
    u_xlat0.x = u_xlat0.x + VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z;
    output.TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0 = u_xlat2 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    output.mtl_Position = u_xlat0;
    u_xlat2 = input.COLOR0 + float4(-1.0, -1.0, -1.0, -1.0);
    u_xlat2 = fma(float4(VGlobals.unity_ParticleUseMeshColors), u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlatu12 = as_type<uint>(u_xlat5.w) & 0xffu;
    u_xlat3.x = float(u_xlatu12);
    u_xlatu7.xy = bitFieldExtractU(uint2(0x8u, 0x8u), uint2(0x8u, 0x10u), as_type<uint2>(u_xlat5.ww));
    u_xlatu12 = as_type<uint>(u_xlat5.w) >> 0x18u;
    u_xlat3.w = float(u_xlatu12);
    u_xlat3.yz = float2(u_xlatu7.xy);
    u_xlat2 = u_xlat2 * u_xlat3;
    output.COLOR0 = u_xlat2 * float4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat12 = u_xlat1.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat12 = floor(u_xlat12);
    u_xlat1.x = fma((-u_xlat12), VGlobals.unity_ParticleUVShiftData.y, u_xlat1.x);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat13 = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = fma((-u_xlat12), VGlobals.unity_ParticleUVShiftData.w, u_xlat13);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat1.xy);
    u_xlatb12 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat1.xy = (bool(u_xlatb12)) ? u_xlat1.xy : input.TEXCOORD0.xy;
    output.TEXCOORD1.xy = fma(u_xlat1.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat0.y = u_xlat0.y * VGlobals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD3.w = u_xlat0.w;
    output.TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_CameraDepthTexture" to slot 1 sampler slot 2
Set 2D Texture "_EmissionMap" to slot 2 sampler slot 1

Constant Buffer "FGlobals" (96 bytes) on slot 0 {
  Vector4 _ZBufferParams at 0
  Vector4 _Color at 16
  Vector3 _EmissionColor at 32
  Vector4 _SoftParticleFadeParams at 48
  Vector4 _CameraFadeParams at 64
  Vector4 _ColorAddSubDiff at 80
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ZBufferParams;
    float4 _Color;
    float3 _EmissionColor;
    float4 _SoftParticleFadeParams;
    float4 _CameraFadeParams;
    float4 _ColorAddSubDiff;
};

struct Mtl_FragmentIn
{
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_EmissionMap [[ sampler (1) ]],
    sampler sampler_CameraDepthTexture [[ sampler (2) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _CameraDepthTexture [[ texture(1) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float3 u_xlat1;
    bool2 u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat4;
    float u_xlat9;
    u_xlat0 = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy);
    u_xlat0 = u_xlat0 * FGlobals._Color;
    u_xlat0.xyz = fma(input.COLOR0.xyz, FGlobals._ColorAddSubDiff.xxx, u_xlat0.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) + abs(u_xlat0.xyz);
    u_xlat0.xyz = fma(FGlobals._ColorAddSubDiff.yyy, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat9 = u_xlat0.w * input.COLOR0.w;
    u_xlatb1.xy = (float2(0.0, 0.0)<FGlobals._SoftParticleFadeParams.xy);
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = input.TEXCOORD3.xy / input.TEXCOORD3.ww;
        u_xlat1.x = _CameraDepthTexture.sample(sampler_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = fma(FGlobals._ZBufferParams.z, u_xlat1.x, FGlobals._ZBufferParams.w);
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat1.x = u_xlat1.x + (-FGlobals._SoftParticleFadeParams.x);
        u_xlat1.x = u_xlat1.x + (-input.TEXCOORD3.z);
        u_xlat1.x = u_xlat1.x * FGlobals._SoftParticleFadeParams.y;
        u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
        u_xlat9 = u_xlat9 * u_xlat1.x;
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat4.x = input.TEXCOORD3.z + (-FGlobals._CameraFadeParams.x);
    u_xlat4.x = u_xlat4.x * FGlobals._CameraFadeParams.y;
    u_xlat4.x = clamp(u_xlat4.x, 0.0f, 1.0f);
    output.SV_Target0.w = u_xlat9 * u_xlat4.x;
    u_xlat2.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD1.xy).xyz;
    u_xlat2.xyz = u_xlat2.xyz * FGlobals._EmissionColor.xxyz.yzw;
    u_xlat4.xyz = u_xlat4.xxx * u_xlat2.xyz;
    output.SV_Target0.xyz = fma(u_xlat4.xyz, u_xlat1.xxx, u_xlat0.xyz);
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON _EMISSION 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON _FADING_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_CameraDepthTexture" to slot 1
Set 2D Texture "_EmissionMap" to slot 2

Constant Buffer "$Globals" (96 bytes) {
  Vector4 _ZBufferParams at 0
  Vector4 _Color at 16
  Vector3 _EmissionColor at 32
  Vector4 _SoftParticleFadeParams at 48
  Vector4 _CameraFadeParams at 64
  Vector4 _ColorAddSubDiff at 80
}
Constant Buffer "$Globals" (208 bytes) {
  Matrix4x4 unity_MatrixV at 16
  Matrix4x4 unity_MatrixVP at 80
  Vector4 _ProjectionParams at 0
  ScalarInt unity_BaseInstanceID at 144
  Vector4 unity_ParticleUVShiftData at 160
  Float unity_ParticleUseMeshColors at 176
  Vector4 _MainTex_ST at 192
}

Set Buffer  "unity_ParticleInstanceData" to  slot 0

Shader Disassembly:
#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require
#ifdef GL_ARB_shader_storage_buffer_object
#extension GL_ARB_shader_storage_buffer_object : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
uniform 	vec4 _MainTex_ST;
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in  vec4 in_POSITION0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
layout(location = 0) out vec4 vs_COLOR0;
layout(location = 1) out vec2 vs_TEXCOORD1;
layout(location = 2) out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat7;
uvec2 u_xlatu7;
float u_xlat12;
uint u_xlatu12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat3.x = u_xlat2.z;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat4.x;
    u_xlat7.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]));
    u_xlat3.z = u_xlat7.y;
    u_xlat5 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.w = u_xlat5.y;
    u_xlat13 = dot(u_xlat3, u_xlat0);
    u_xlat3 = vec4(u_xlat13) * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat13 = u_xlat13 * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = u_xlat2.y;
    u_xlat2.y = u_xlat4.z;
    u_xlat4.z = u_xlat7.x;
    u_xlat2.z = u_xlat7.z;
    u_xlat4.w = u_xlat5.x;
    u_xlat7.x = dot(u_xlat4, u_xlat0);
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat7.xxxx + u_xlat3;
    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat7.x + u_xlat13;
    u_xlat2.w = u_xlat5.z;
    u_xlat0.x = dot(u_xlat2, u_xlat0);
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.xxxx + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.x + u_xlat7.x;
    u_xlat0.x = u_xlat0.x + hlslcc_mtx4x4unity_MatrixV[3].z;
    vs_TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat0;
    u_xlatu12 = floatBitsToUint(u_xlat5.w) & 255u;
    u_xlat2.x = float(u_xlatu12);
    u_xlatu7.x = bitfieldExtract(floatBitsToUint(u_xlat5.w), int(8), int(8));
    u_xlatu7.y = bitfieldExtract(floatBitsToUint(u_xlat5.w), int(16), int(8));
    u_xlatu12 = floatBitsToUint(u_xlat5.w) >> 24u;
    u_xlat2.w = float(u_xlatu12);
    u_xlat2.yz = vec2(u_xlatu7.xy);
    u_xlat2 = u_xlat2 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat3 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat3 = vec4(unity_ParticleUseMeshColors) * u_xlat3 + vec4(1.0, 1.0, 1.0, 1.0);
    vs_COLOR0 = u_xlat2 * u_xlat3;
    u_xlat12 = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat12 = floor(u_xlat12);
    u_xlat1.x = (-u_xlat12) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_ParticleUVShiftData.z;
    u_xlat13 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat12) * unity_ParticleUVShiftData.w + u_xlat13;
    u_xlat1.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb12 = unity_ParticleUVShiftData.x!=0.0;
    u_xlat1.xy = (bool(u_xlatb12)) ? u_xlat1.xy : in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.w = u_xlat0.w;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _Color;
uniform 	vec3 _EmissionColor;
uniform 	vec4 _SoftParticleFadeParams;
uniform 	vec4 _CameraFadeParams;
uniform 	vec4 _ColorAddSubDiff;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(2) uniform  sampler2D _EmissionMap;
layout(location = 0) in  vec4 vs_COLOR0;
layout(location = 1) in  vec2 vs_TEXCOORD1;
layout(location = 2) in  vec4 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
float u_xlat10_1;
bvec2 u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat10_2;
vec3 u_xlat4;
float u_xlat9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat0 = u_xlat10_0 * _Color;
    u_xlat0.xyz = vs_COLOR0.xyz * _ColorAddSubDiff.xxx + u_xlat0.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) + abs(u_xlat0.xyz);
    u_xlat0.xyz = _ColorAddSubDiff.yyy * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat9 = u_xlat0.w * vs_COLOR0.w;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_1 = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat10_1 + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD3.z);
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
        u_xlat9 = u_xlat9 * u_xlat1.x;
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat4.x = vs_TEXCOORD3.z + (-_CameraFadeParams.x);
    u_xlat4.x = u_xlat4.x * _CameraFadeParams.y;
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
    SV_Target0.w = u_xlat9 * u_xlat4.x;
    u_xlat10_2.xyz = texture(_EmissionMap, vs_TEXCOORD1.xy).xyz;
    u_xlat2.xyz = u_xlat10_2.xyz * vec3(_EmissionColor.x, _EmissionColor.y, _EmissionColor.z);
    u_xlat4.xyz = u_xlat4.xxx * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat0.xyz;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON _EMISSION 
Local Keywords: _ALPHABLEND_ON _COLORADDSUBDIFF_ON _FADING_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Set 2D Texture "_CameraDepthTexture" to set: 0, binding: 4, used in: Fragment  using sampler in set: 0, binding: 2, used in: Fragment 
Set 2D Texture "_EmissionMap" to set: 0, binding: 5, used in: Fragment  using sampler in set: 0, binding: 1, used in: Fragment 
Set 2D Texture "_MainTex" to set: 0, binding: 3, used in: Fragment  using sampler in set: 0, binding: 0, used in: Fragment 

Constant Buffer "PGlobals2432512890" (96 bytes) on set: 1, binding: 0, used in: Fragment  {
  Vector4 _CameraFadeParams at 64
  Vector4 _Color at 16
  Vector4 _ColorAddSubDiff at 80
  Vector3 _EmissionColor at 32
  Vector4 _SoftParticleFadeParams at 48
  Vector4 _ZBufferParams at 0
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on set: 1, binding: 2, used in: Vertex  {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "VGlobals2432512890" (192 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixV at 16
  Matrix4x4 unity_MatrixVP at 80
  Vector4 _MainTex_ST at 176
  Vector4 _ProjectionParams at 0
  Vector4 unity_ParticleUVShiftData at 144
  Float unity_ParticleUseMeshColors at 160
}

Set Buffer  "unity_ParticleInstanceData" to set: 0, binding: 6, used in: Vertex 
Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 416

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 26 233 246 249 301 346 377
                              Name 233  "vs_TEXCOORD3"
                              Name 377  "vs_TEXCOORD1"
                              Decorate 11 Location 0
                              Decorate 26 BuiltIn InstanceIndex
                              MemberDecorate 28 0 Offset 0
                              MemberDecorate 28 1 Offset 4
                              Decorate 28 Block
                              Decorate 30 DescriptorSet 1
                              Decorate 30 Binding 2
                              Decorate 38 ArrayStride 4
                              MemberDecorate 39 0 Offset 0
                              Decorate 40 ArrayStride 56
                              MemberDecorate 41 0 NonWritable
                              MemberDecorate 41 0 Offset 0
                              Decorate 41 BufferBlock
                              Decorate 43 DescriptorSet 0
                              Decorate 43 Binding 6
                              Decorate 155 ArrayStride 16
                              Decorate 156 ArrayStride 16
                              MemberDecorate 157 0 Offset 0
                              MemberDecorate 157 1 Offset 16
                              MemberDecorate 157 2 Offset 80
                              MemberDecorate 157 3 Offset 144
                              MemberDecorate 157 4 Offset 160
                              MemberDecorate 157 5 Offset 176
                              Decorate 157 Block
                              Decorate 159 DescriptorSet 1
                              Decorate 159 Binding 1
                              Decorate 233(vs_TEXCOORD3) Location 2
                              MemberDecorate 244 0 BuiltIn Position
                              MemberDecorate 244 1 BuiltIn PointSize
                              MemberDecorate 244 2 BuiltIn ClipDistance
                              Decorate 244 Block
                              Decorate 249 RelaxedPrecision
                              Decorate 249 Location 1
                              Decorate 250 RelaxedPrecision
                              Decorate 253 RelaxedPrecision
                              Decorate 301 Location 0
                              Decorate 346 Location 2
                              Decorate 377(vs_TEXCOORD1) Location 1
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              12:             TypeVector 6(float) 3
              17:    6(float) Constant 1065353216
              18:             TypeInt 32 0
              19:     18(int) Constant 3
              20:             TypePointer Private 6(float)
              22:             TypeInt 32 1
              23:             TypePointer Private 22(int)
              24:     23(ptr) Variable Private
              25:             TypePointer Input 22(int)
              26:     25(ptr) Variable Input
              28:             TypeStruct 22(int) 22(int)
              29:             TypePointer Uniform 28(struct)
              30:     29(ptr) Variable Uniform
              31:     22(int) Constant 0
              32:             TypePointer Uniform 22(int)
              36:      8(ptr) Variable Private
              37:     18(int) Constant 14
              38:             TypeArray 18(int) 37
              39:             TypeStruct 38
              40:             TypeRuntimeArray 39(struct)
              41:             TypeStruct 40
              42:             TypePointer Uniform 41(struct)
              43:     42(ptr) Variable Uniform
              45:     22(int) Constant 2
              46:             TypePointer Uniform 18(int)
              55:     22(int) Constant 1
              62:      8(ptr) Variable Private
              63:     18(int) Constant 2
              66:     18(int) Constant 0
              68:      8(ptr) Variable Private
              70:     22(int) Constant 4
              75:     22(int) Constant 3
              80:     22(int) Constant 5
              89:     18(int) Constant 1
              91:             TypePointer Private 12(fvec3)
              92:     91(ptr) Variable Private
              94:     22(int) Constant 6
              99:     22(int) Constant 7
             104:     22(int) Constant 8
             112:      8(ptr) Variable Private
             114:     22(int) Constant 9
             119:     22(int) Constant 10
             124:     22(int) Constant 11
             129:     22(int) Constant 12
             134:      8(ptr) Variable Private
             136:     22(int) Constant 13
             148:     20(ptr) Variable Private
             154:     18(int) Constant 4
             155:             TypeArray 7(fvec4) 154
             156:             TypeArray 7(fvec4) 154
             157:             TypeStruct 7(fvec4) 155 156 7(fvec4) 6(float) 7(fvec4)
             158:             TypePointer Uniform 157(struct)
             159:    158(ptr) Variable Uniform
             160:             TypePointer Uniform 7(fvec4)
             165:             TypePointer Uniform 6(float)
             232:             TypePointer Output 7(fvec4)
233(vs_TEXCOORD3):    232(ptr) Variable Output
             237:             TypePointer Output 6(float)
             243:             TypeArray 6(float) 89
             244:             TypeStruct 7(fvec4) 6(float) 243
             245:             TypePointer Output 244(struct)
             246:    245(ptr) Variable Output
             249:     10(ptr) Variable Input
             251:    6(float) Constant 3212836864
             252:    7(fvec4) ConstantComposite 251 251 251 251
             259:    7(fvec4) ConstantComposite 17 17 17 17
             261:             TypePointer Private 18(int)
             262:    261(ptr) Variable Private
             266:     18(int) Constant 255
             271:             TypeVector 18(int) 2
             272:             TypePointer Private 271(ivec2)
             273:    272(ptr) Variable Private
             282:     22(int) Constant 16
             288:     18(int) Constant 24
             294:             TypeVector 6(float) 2
             301:    232(ptr) Variable Output
             303:    6(float) Constant 998277249
             304:    7(fvec4) ConstantComposite 303 303 303 303
             306:     20(ptr) Variable Private
             345:             TypePointer Input 294(fvec2)
             346:    345(ptr) Variable Input
             357:             TypeBool
             358:             TypePointer Private 357(bool)
             359:    358(ptr) Variable Private
             362:    6(float) Constant 0
             365:             TypePointer Function 294(fvec2)
             376:             TypePointer Output 294(fvec2)
377(vs_TEXCOORD1):    376(ptr) Variable Output
             396:    6(float) Constant 1056964608
             397:   12(fvec3) ConstantComposite 396 396 396
               4:           2 Function None 3
               5:             Label
             366:    365(ptr) Variable Function
              13:    7(fvec4) Load 11
              14:   12(fvec3) VectorShuffle 13 13 0 1 2
              15:    7(fvec4) Load 9
              16:    7(fvec4) VectorShuffle 15 14 4 5 6 3
                              Store 9 16
              21:     20(ptr) AccessChain 9 19
                              Store 21 17
              27:     22(int) Load 26
              33:     32(ptr) AccessChain 30 31
              34:     22(int) Load 33
              35:     22(int) IAdd 27 34
                              Store 24 35
              44:     22(int) Load 24
              47:     46(ptr) AccessChain 43 31 44 31 45
              48:     18(int) Load 47
              49:    6(float) Bitcast 48
              50:     22(int) Load 24
              51:     46(ptr) AccessChain 43 31 50 31 31
              52:     18(int) Load 51
              53:    6(float) Bitcast 52
              54:     22(int) Load 24
              56:     46(ptr) AccessChain 43 31 54 31 55
              57:     18(int) Load 56
              58:    6(float) Bitcast 57
              59:   12(fvec3) CompositeConstruct 49 53 58
              60:    7(fvec4) Load 36
              61:    7(fvec4) VectorShuffle 60 59 4 5 6 3
                              Store 36 61
              64:     20(ptr) AccessChain 36 63
              65:    6(float) Load 64
              67:     20(ptr) AccessChain 62 66
                              Store 67 65
              69:     22(int) Load 24
              71:     46(ptr) AccessChain 43 31 69 31 70
              72:     18(int) Load 71
              73:    6(float) Bitcast 72
              74:     22(int) Load 24
              76:     46(ptr) AccessChain 43 31 74 31 75
              77:     18(int) Load 76
              78:    6(float) Bitcast 77
              79:     22(int) Load 24
              81:     46(ptr) AccessChain 43 31 79 31 80
              82:     18(int) Load 81
              83:    6(float) Bitcast 82
              84:   12(fvec3) CompositeConstruct 73 78 83
              85:    7(fvec4) Load 68
              86:    7(fvec4) VectorShuffle 85 84 4 5 6 3
                              Store 68 86
              87:     20(ptr) AccessChain 68 66
              88:    6(float) Load 87
              90:     20(ptr) AccessChain 62 89
                              Store 90 88
              93:     22(int) Load 24
              95:     46(ptr) AccessChain 43 31 93 31 94
              96:     18(int) Load 95
              97:    6(float) Bitcast 96
              98:     22(int) Load 24
             100:     46(ptr) AccessChain 43 31 98 31 99
             101:     18(int) Load 100
             102:    6(float) Bitcast 101
             103:     22(int) Load 24
             105:     46(ptr) AccessChain 43 31 103 31 104
             106:     18(int) Load 105
             107:    6(float) Bitcast 106
             108:   12(fvec3) CompositeConstruct 97 102 107
                              Store 92 108
             109:     20(ptr) AccessChain 92 89
             110:    6(float) Load 109
             111:     20(ptr) AccessChain 62 63
                              Store 111 110
             113:     22(int) Load 24
             115:     46(ptr) AccessChain 43 31 113 31 114
             116:     18(int) Load 115
             117:    6(float) Bitcast 116
             118:     22(int) Load 24
             120:     46(ptr) AccessChain 43 31 118 31 119
             121:     18(int) Load 120
             122:    6(float) Bitcast 121
             123:     22(int) Load 24
             125:     46(ptr) AccessChain 43 31 123 31 124
             126:     18(int) Load 125
             127:    6(float) Bitcast 126
             128:     22(int) Load 24
             130:     46(ptr) AccessChain 43 31 128 31 129
             131:     18(int) Load 130
             132:    6(float) Bitcast 131
             133:    7(fvec4) CompositeConstruct 117 122 127 132
                              Store 112 133
             135:     22(int) Load 24
             137:     46(ptr) AccessChain 43 31 135 31 136
             138:     18(int) Load 137
             139:    6(float) Bitcast 138
             140:     20(ptr) AccessChain 134 66
                              Store 140 139
             141:     20(ptr) AccessChain 134 66
             142:    6(float) Load 141
             143:    6(float) ExtInst 1(GLSL.std.450) 8(Floor) 142
             144:     20(ptr) AccessChain 134 66
                              Store 144 143
             145:     20(ptr) AccessChain 112 89
             146:    6(float) Load 145
             147:     20(ptr) AccessChain 62 19
                              Store 147 146
             149:    7(fvec4) Load 62
             150:    7(fvec4) Load 9
             151:    6(float) Dot 149 150
                              Store 148 151
             152:    6(float) Load 148
             153:    7(fvec4) CompositeConstruct 152 152 152 152
             161:    160(ptr) AccessChain 159 45 55
             162:    7(fvec4) Load 161
             163:    7(fvec4) FMul 153 162
                              Store 62 163
             164:    6(float) Load 148
             166:    165(ptr) AccessChain 159 55 55 63
             167:    6(float) Load 166
             168:    6(float) FMul 164 167
                              Store 148 168
             169:     20(ptr) AccessChain 36 89
             170:    6(float) Load 169
             171:     20(ptr) AccessChain 68 66
                              Store 171 170
             172:     20(ptr) AccessChain 68 63
             173:    6(float) Load 172
             174:     20(ptr) AccessChain 36 89
                              Store 174 173
             175:     20(ptr) AccessChain 92 66
             176:    6(float) Load 175
             177:     20(ptr) AccessChain 68 63
                              Store 177 176
             178:     20(ptr) AccessChain 92 63
             179:    6(float) Load 178
             180:     20(ptr) AccessChain 36 63
                              Store 180 179
             181:     20(ptr) AccessChain 112 66
             182:    6(float) Load 181
             183:     20(ptr) AccessChain 68 19
                              Store 183 182
             184:    7(fvec4) Load 68
             185:    7(fvec4) Load 9
             186:    6(float) Dot 184 185
             187:     20(ptr) AccessChain 92 66
                              Store 187 186
             188:    160(ptr) AccessChain 159 45 31
             189:    7(fvec4) Load 188
             190:   12(fvec3) Load 92
             191:    7(fvec4) VectorShuffle 190 190 0 0 0 0
             192:    7(fvec4) FMul 189 191
             193:    7(fvec4) Load 62
             194:    7(fvec4) FAdd 192 193
                              Store 62 194
             195:    165(ptr) AccessChain 159 55 31 63
             196:    6(float) Load 195
             197:     20(ptr) AccessChain 92 66
             198:    6(float) Load 197
             199:    6(float) FMul 196 198
             200:    6(float) Load 148
             201:    6(float) FAdd 199 200
             202:     20(ptr) AccessChain 92 66
                              Store 202 201
             203:     20(ptr) AccessChain 112 63
             204:    6(float) Load 203
             205:     20(ptr) AccessChain 36 19
                              Store 205 204
             206:    7(fvec4) Load 36
             207:    7(fvec4) Load 9
             208:    6(float) Dot 206 207
             209:     20(ptr) AccessChain 9 66
                              Store 209 208
             210:    160(ptr) AccessChain 159 45 45
             211:    7(fvec4) Load 210
             212:    7(fvec4) Load 9
             213:    7(fvec4) VectorShuffle 212 212 0 0 0 0
             214:    7(fvec4) FMul 211 213
             215:    7(fvec4) Load 62
             216:    7(fvec4) FAdd 214 215
                              Store 36 216
             217:    165(ptr) AccessChain 159 55 45 63
             218:    6(float) Load 217
             219:     20(ptr) AccessChain 9 66
             220:    6(float) Load 219
             221:    6(float) FMul 218 220
             222:     20(ptr) AccessChain 92 66
             223:    6(float) Load 222
             224:    6(float) FAdd 221 223
             225:     20(ptr) AccessChain 9 66
                              Store 225 224
             226:     20(ptr) AccessChain 9 66
             227:    6(float) Load 226
             228:    165(ptr) AccessChain 159 55 75 63
             229:    6(float) Load 228
             230:    6(float) FAdd 227 229
             231:     20(ptr) AccessChain 9 66
                              Store 231 230
             234:     20(ptr) AccessChain 9 66
             235:    6(float) Load 234
             236:    6(float) FNegate 235
             238:    237(ptr) AccessChain 233(vs_TEXCOORD3) 63
                              Store 238 236
             239:    7(fvec4) Load 36
             240:    160(ptr) AccessChain 159 45 75
             241:    7(fvec4) Load 240
             242:    7(fvec4) FAdd 239 241
                              Store 9 242
             247:    7(fvec4) Load 9
             248:    232(ptr) AccessChain 246 31
                              Store 248 247
             250:    7(fvec4) Load 249
             253:    7(fvec4) FAdd 250 252
                              Store 36 253
             254:    165(ptr) AccessChain 159 70
             255:    6(float) Load 254
             256:    7(fvec4) CompositeConstruct 255 255 255 255
             257:    7(fvec4) Load 36
             258:    7(fvec4) FMul 256 257
             260:    7(fvec4) FAdd 258 259
                              Store 36 260
             263:     20(ptr) AccessChain 112 19
             264:    6(float) Load 263
             265:     18(int) Bitcast 264
             267:     18(int) BitwiseAnd 265 266
                              Store 262 267
             268:     18(int) Load 262
             269:    6(float) ConvertUToF 268
             270:     20(ptr) AccessChain 62 66
                              Store 270 269
             274:     20(ptr) AccessChain 112 19
             275:    6(float) Load 274
             276:     18(int) Bitcast 275
             277:     18(int) BitFieldUExtract 276 104 104
             278:    261(ptr) AccessChain 273 66
                              Store 278 277
             279:     20(ptr) AccessChain 112 19
             280:    6(float) Load 279
             281:     18(int) Bitcast 280
             283:     18(int) BitFieldUExtract 281 282 104
             284:    261(ptr) AccessChain 273 89
                              Store 284 283
             285:     20(ptr) AccessChain 112 19
             286:    6(float) Load 285
             287:     18(int) Bitcast 286
             289:     18(int) ShiftRightLogical 287 288
                              Store 262 289
             290:     18(int) Load 262
             291:    6(float) ConvertUToF 290
             292:     20(ptr) AccessChain 62 19
                              Store 292 291
             293:  271(ivec2) Load 273
             295:  294(fvec2) ConvertUToF 293
             296:    7(fvec4) Load 62
             297:    7(fvec4) VectorShuffle 296 295 0 4 5 3
                              Store 62 297
             298:    7(fvec4) Load 36
             299:    7(fvec4) Load 62
             300:    7(fvec4) FMul 298 299
                              Store 36 300
             302:    7(fvec4) Load 36
             305:    7(fvec4) FMul 302 304
                              Store 301 305
             307:     20(ptr) AccessChain 134 66
             308:    6(float) Load 307
             309:    165(ptr) AccessChain 159 75 89
             310:    6(float) Load 309
             311:    6(float) FDiv 308 310
                              Store 306 311
             312:    6(float) Load 306
             313:    6(float) ExtInst 1(GLSL.std.450) 8(Floor) 312
                              Store 306 313
             314:    6(float) Load 306
             315:    6(float) FNegate 314
             316:    165(ptr) AccessChain 159 75 89
             317:    6(float) Load 316
             318:    6(float) FMul 315 317
             319:     20(ptr) AccessChain 134 66
             320:    6(float) Load 319
             321:    6(float) FAdd 318 320
             322:     20(ptr) AccessChain 134 66
                              Store 322 321
             323:     20(ptr) AccessChain 134 66
             324:    6(float) Load 323
             325:    6(float) ExtInst 1(GLSL.std.450) 8(Floor) 324
             326:     20(ptr) AccessChain 134 66
                              Store 326 325
             327:     20(ptr) AccessChain 134 66
             328:    6(float) Load 327
             329:    165(ptr) AccessChain 159 75 63
             330:    6(float) Load 329
             331:    6(float) FMul 328 330
             332:     20(ptr) AccessChain 134 66
                              Store 332 331
             333:    165(ptr) AccessChain 159 75 19
             334:    6(float) Load 333
             335:    6(float) FNegate 334
             336:    6(float) FAdd 335 17
                              Store 148 336
             337:    6(float) Load 306
             338:    6(float) FNegate 337
             339:    165(ptr) AccessChain 159 75 19
             340:    6(float) Load 339
             341:    6(float) FMul 338 340
             342:    6(float) Load 148
             343:    6(float) FAdd 341 342
             344:     20(ptr) AccessChain 134 89
                              Store 344 343
             347:  294(fvec2) Load 346
             348:    160(ptr) AccessChain 159 75
             349:    7(fvec4) Load 348
             350:  294(fvec2) VectorShuffle 349 349 2 3
             351:  294(fvec2) FMul 347 350
             352:    7(fvec4) Load 134
             353:  294(fvec2) VectorShuffle 352 352 0 1
             354:  294(fvec2) FAdd 351 353
             355:    7(fvec4) Load 134
             356:    7(fvec4) VectorShuffle 355 354 4 5 2 3
                              Store 134 356
             360:    165(ptr) AccessChain 159 75 66
             361:    6(float) Load 360
             363:   357(bool) FOrdNotEqual 361 362
                              Store 359 363
             364:   357(bool) Load 359
                              SelectionMerge 368 None
                              BranchConditional 364 367 371
             367:               Label
             369:    7(fvec4)   Load 134
             370:  294(fvec2)   VectorShuffle 369 369 0 1
                                Store 366 370
                                Branch 368
             371:               Label
             372:  294(fvec2)   Load 346
                                Store 366 372
                                Branch 368
             368:             Label
             373:  294(fvec2) Load 366
             374:    7(fvec4) Load 134
             375:    7(fvec4) VectorShuffle 374 373 4 5 2 3
                              Store 134 375
             378:    7(fvec4) Load 134
             379:  294(fvec2) VectorShuffle 378 378 0 1
             380:    160(ptr) AccessChain 159 80
             381:    7(fvec4) Load 380
             382:  294(fvec2) VectorShuffle 381 381 0 1
             383:  294(fvec2) FMul 379 382
             384:    160(ptr) AccessChain 159 80
             385:    7(fvec4) Load 384
             386:  294(fvec2) VectorShuffle 385 385 2 3
             387:  294(fvec2) FAdd 383 386
                              Store 377(vs_TEXCOORD1) 387
             388:     20(ptr) AccessChain 9 89
             389:    6(float) Load 388
             390:    165(ptr) AccessChain 159 31 66
             391:    6(float) Load 390
             392:    6(float) FMul 389 391
             393:     20(ptr) AccessChain 9 89
                              Store 393 392
             394:    7(fvec4) Load 9
             395:   12(fvec3) VectorShuffle 394 394 0 3 1
             398:   12(fvec3) FMul 395 397
             399:    7(fvec4) Load 134
             400:    7(fvec4) VectorShuffle 399 398 4 1 5 6
                              Store 134 400
             401:     20(ptr) AccessChain 9 19
             402:    6(float) Load 401
             403:    237(ptr) AccessChain 233(vs_TEXCOORD3) 19
                              Store 403 402
             404:    7(fvec4) Load 134
             405:  294(fvec2) VectorShuffle 404 404 2 2
             406:    7(fvec4) Load 134
             407:  294(fvec2) VectorShuffle 406 406 0 3
             408:  294(fvec2) FAdd 405 407
             409:    7(fvec4) Load 233(vs_TEXCOORD3)
             410:    7(fvec4) VectorShuffle 409 408 4 5 2 3
                              Store 233(vs_TEXCOORD3) 410
             411:    237(ptr) AccessChain 246 31 89
             412:    6(float) Load 411
             413:    6(float) FNegate 412
             414:    237(ptr) AccessChain 246 31 89
                              Store 414 413
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 231

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 22 40 102 228
                              ExecutionMode 4 OriginUpperLeft
                              Name 22  "vs_TEXCOORD1"
                              Name 102  "vs_TEXCOORD3"
                              Decorate 9 RelaxedPrecision
                              Decorate 12 RelaxedPrecision
                              Decorate 12 DescriptorSet 0
                              Decorate 12 Binding 3
                              Decorate 13 RelaxedPrecision
                              Decorate 16 RelaxedPrecision
                              Decorate 16 DescriptorSet 0
                              Decorate 16 Binding 0
                              Decorate 17 RelaxedPrecision
                              Decorate 22(vs_TEXCOORD1) Location 1
                              Decorate 25 RelaxedPrecision
                              Decorate 26 RelaxedPrecision
                              MemberDecorate 28 0 Offset 0
                              MemberDecorate 28 1 RelaxedPrecision
                              MemberDecorate 28 1 Offset 16
                              MemberDecorate 28 2 RelaxedPrecision
                              MemberDecorate 28 2 Offset 32
                              MemberDecorate 28 3 Offset 48
                              MemberDecorate 28 4 Offset 64
                              MemberDecorate 28 5 RelaxedPrecision
                              MemberDecorate 28 5 Offset 80
                              Decorate 28 Block
                              Decorate 30 DescriptorSet 1
                              Decorate 30 Binding 0
                              Decorate 35 RelaxedPrecision
                              Decorate 36 RelaxedPrecision
                              Decorate 40 Location 0
                              Decorate 45 RelaxedPrecision
                              Decorate 46 RelaxedPrecision
                              Decorate 48 RelaxedPrecision
                              Decorate 49 RelaxedPrecision
                              Decorate 51 RelaxedPrecision
                              Decorate 58 RelaxedPrecision
                              Decorate 59 RelaxedPrecision
                              Decorate 60 RelaxedPrecision
                              Decorate 61 RelaxedPrecision
                              Decorate 68 RelaxedPrecision
                              Decorate 102(vs_TEXCOORD3) Location 2
                              Decorate 108 DescriptorSet 0
                              Decorate 108 Binding 4
                              Decorate 110 DescriptorSet 0
                              Decorate 110 Binding 2
                              Decorate 164 RelaxedPrecision
                              Decorate 190 RelaxedPrecision
                              Decorate 195 RelaxedPrecision
                              Decorate 196 RelaxedPrecision
                              Decorate 196 DescriptorSet 0
                              Decorate 196 Binding 5
                              Decorate 197 RelaxedPrecision
                              Decorate 198 RelaxedPrecision
                              Decorate 198 DescriptorSet 0
                              Decorate 198 Binding 1
                              Decorate 199 RelaxedPrecision
                              Decorate 203 RelaxedPrecision
                              Decorate 204 RelaxedPrecision
                              Decorate 205 RelaxedPrecision
                              Decorate 208 RelaxedPrecision
                              Decorate 210 RelaxedPrecision
                              Decorate 212 RelaxedPrecision
                              Decorate 213 RelaxedPrecision
                              Decorate 214 RelaxedPrecision
                              Decorate 217 RelaxedPrecision
                              Decorate 223 RelaxedPrecision
                              Decorate 228 RelaxedPrecision
                              Decorate 228 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypeImage 6(float) 2D sampled format:Unknown
              11:             TypePointer UniformConstant 10
              12:     11(ptr) Variable UniformConstant
              14:             TypeSampler
              15:             TypePointer UniformConstant 14
              16:     15(ptr) Variable UniformConstant
              18:             TypeSampledImage 10
              20:             TypeVector 6(float) 2
              21:             TypePointer Input 20(fvec2)
22(vs_TEXCOORD1):     21(ptr) Variable Input
              25:      8(ptr) Variable Private
              27:             TypeVector 6(float) 3
              28:             TypeStruct 7(fvec4) 7(fvec4) 27(fvec3) 7(fvec4) 7(fvec4) 7(fvec4)
              29:             TypePointer Uniform 28(struct)
              30:     29(ptr) Variable Uniform
              31:             TypeInt 32 1
              32:     31(int) Constant 1
              33:             TypePointer Uniform 7(fvec4)
              37:             TypePointer Private 27(fvec3)
              38:     37(ptr) Variable Private
              39:             TypePointer Input 7(fvec4)
              40:     39(ptr) Variable Input
              43:     31(int) Constant 5
              51:     37(ptr) Variable Private
              64:             TypeInt 32 0
              65:     64(int) Constant 3
              66:             TypePointer Private 6(float)
              69:             TypePointer Input 6(float)
              73:     64(int) Constant 0
              75:             TypeBool
              76:             TypeVector 75(bool) 2
              77:             TypePointer Private 76(bvec2)
              78:     77(ptr) Variable Private
              79:    6(float) Constant 0
              80:    7(fvec4) ConstantComposite 79 79 79 79
              81:     31(int) Constant 3
              85:             TypeVector 75(bool) 4
              88:     64(int) Constant 1
              89:             TypePointer Private 75(bool)
             100:             TypePointer Private 20(fvec2)
             101:    100(ptr) Variable Private
102(vs_TEXCOORD3):     39(ptr) Variable Input
             108:     11(ptr) Variable UniformConstant
             110:     15(ptr) Variable UniformConstant
             117:     31(int) Constant 0
             118:     64(int) Constant 2
             119:             TypePointer Uniform 6(float)
             129:    6(float) Constant 1065353216
             158:     66(ptr) Variable Private
             164:     66(ptr) Variable Private
             170:     37(ptr) Variable Private
             173:     31(int) Constant 4
             189:      8(ptr) Variable Private
             195:     37(ptr) Variable Private
             196:     11(ptr) Variable UniformConstant
             198:     15(ptr) Variable UniformConstant
             204:     37(ptr) Variable Private
             206:     31(int) Constant 2
             227:             TypePointer Output 7(fvec4)
             228:    227(ptr) Variable Output
               4:           2 Function None 3
               5:             Label
              13:          10 Load 12
              17:          14 Load 16
              19:          18 SampledImage 13 17
              23:   20(fvec2) Load 22(vs_TEXCOORD1)
              24:    7(fvec4) ImageSampleImplicitLod 19 23
                              Store 9 24
              26:    7(fvec4) Load 9
              34:     33(ptr) AccessChain 30 32
              35:    7(fvec4) Load 34
              36:    7(fvec4) FMul 26 35
                              Store 25 36
              41:    7(fvec4) Load 40
              42:   27(fvec3) VectorShuffle 41 41 0 1 2
              44:     33(ptr) AccessChain 30 43
              45:    7(fvec4) Load 44
              46:   27(fvec3) VectorShuffle 45 45 0 0 0
              47:   27(fvec3) FMul 42 46
              48:    7(fvec4) Load 25
              49:   27(fvec3) VectorShuffle 48 48 0 1 2
              50:   27(fvec3) FAdd 47 49
                              Store 38 50
              52:   27(fvec3) Load 38
              53:   27(fvec3) FNegate 52
              54:   27(fvec3) Load 38
              55:   27(fvec3) ExtInst 1(GLSL.std.450) 4(FAbs) 54
              56:   27(fvec3) FAdd 53 55
                              Store 51 56
              57:     33(ptr) AccessChain 30 43
              58:    7(fvec4) Load 57
              59:   27(fvec3) VectorShuffle 58 58 1 1 1
              60:   27(fvec3) Load 51
              61:   27(fvec3) FMul 59 60
              62:   27(fvec3) Load 38
              63:   27(fvec3) FAdd 61 62
                              Store 51 63
              67:     66(ptr) AccessChain 25 65
              68:    6(float) Load 67
              70:     69(ptr) AccessChain 40 65
              71:    6(float) Load 70
              72:    6(float) FMul 68 71
              74:     66(ptr) AccessChain 38 73
                              Store 74 72
              82:     33(ptr) AccessChain 30 81
              83:    7(fvec4) Load 82
              84:    7(fvec4) VectorShuffle 83 83 0 1 0 0
              86:   85(bvec4) FOrdLessThan 80 84
              87:   76(bvec2) VectorShuffle 86 86 0 1
                              Store 78 87
              90:     89(ptr) AccessChain 78 88
              91:    75(bool) Load 90
              92:     89(ptr) AccessChain 78 73
              93:    75(bool) Load 92
              94:    75(bool) LogicalOr 91 93
              95:     89(ptr) AccessChain 78 73
                              Store 95 94
              96:     89(ptr) AccessChain 78 73
              97:    75(bool) Load 96
                              SelectionMerge 99 None
                              BranchConditional 97 98 166
              98:               Label
             103:    7(fvec4)   Load 102(vs_TEXCOORD3)
             104:   20(fvec2)   VectorShuffle 103 103 0 1
             105:    7(fvec4)   Load 102(vs_TEXCOORD3)
             106:   20(fvec2)   VectorShuffle 105 105 3 3
             107:   20(fvec2)   FDiv 104 106
                                Store 101 107
             109:          10   Load 108
             111:          14   Load 110
             112:          18   SampledImage 109 111
             113:   20(fvec2)   Load 101
             114:    7(fvec4)   ImageSampleImplicitLod 112 113
             115:    6(float)   CompositeExtract 114 0
             116:     66(ptr)   AccessChain 101 73
                                Store 116 115
             120:    119(ptr)   AccessChain 30 117 118
             121:    6(float)   Load 120
             122:     66(ptr)   AccessChain 101 73
             123:    6(float)   Load 122
             124:    6(float)   FMul 121 123
             125:    119(ptr)   AccessChain 30 117 65
             126:    6(float)   Load 125
             127:    6(float)   FAdd 124 126
             128:     66(ptr)   AccessChain 101 73
                                Store 128 127
             130:     66(ptr)   AccessChain 101 73
             131:    6(float)   Load 130
             132:    6(float)   FDiv 129 131
             133:     66(ptr)   AccessChain 101 73
                                Store 133 132
             134:     66(ptr)   AccessChain 101 73
             135:    6(float)   Load 134
             136:    119(ptr)   AccessChain 30 81 73
             137:    6(float)   Load 136
             138:    6(float)   FNegate 137
             139:    6(float)   FAdd 135 138
             140:     66(ptr)   AccessChain 101 73
                                Store 140 139
             141:     66(ptr)   AccessChain 101 73
             142:    6(float)   Load 141
             143:     69(ptr)   AccessChain 102(vs_TEXCOORD3) 118
             144:    6(float)   Load 143
             145:    6(float)   FNegate 144
             146:    6(float)   FAdd 142 145
             147:     66(ptr)   AccessChain 101 73
                                Store 147 146
             148:     66(ptr)   AccessChain 101 73
             149:    6(float)   Load 148
             150:    119(ptr)   AccessChain 30 81 88
             151:    6(float)   Load 150
             152:    6(float)   FMul 149 151
             153:     66(ptr)   AccessChain 101 73
                                Store 153 152
             154:     66(ptr)   AccessChain 101 73
             155:    6(float)   Load 154
             156:    6(float)   ExtInst 1(GLSL.std.450) 43(FClamp) 155 79 129
             157:     66(ptr)   AccessChain 101 73
                                Store 157 156
             159:     66(ptr)   AccessChain 101 73
             160:    6(float)   Load 159
             161:     66(ptr)   AccessChain 38 73
             162:    6(float)   Load 161
             163:    6(float)   FMul 160 162
                                Store 158 163
             165:    6(float)   Load 158
                                Store 164 165
                                Branch 99
             166:               Label
             167:     66(ptr)   AccessChain 38 73
             168:    6(float)   Load 167
                                Store 164 168
             169:     66(ptr)   AccessChain 101 73
                                Store 169 129
                                Branch 99
              99:             Label
             171:     69(ptr) AccessChain 102(vs_TEXCOORD3) 118
             172:    6(float) Load 171
             174:    119(ptr) AccessChain 30 173 73
             175:    6(float) Load 174
             176:    6(float) FNegate 175
             177:    6(float) FAdd 172 176
             178:     66(ptr) AccessChain 170 73
                              Store 178 177
             179:     66(ptr) AccessChain 170 73
             180:    6(float) Load 179
             181:    119(ptr) AccessChain 30 173 88
             182:    6(float) Load 181
             183:    6(float) FMul 180 182
             184:     66(ptr) AccessChain 170 73
                              Store 184 183
             185:     66(ptr) AccessChain 170 73
             186:    6(float) Load 185
             187:    6(float) ExtInst 1(GLSL.std.450) 43(FClamp) 186 79 129
             188:     66(ptr) AccessChain 170 73
                              Store 188 187
             190:    6(float) Load 164
             191:     66(ptr) AccessChain 170 73
             192:    6(float) Load 191
             193:    6(float) FMul 190 192
             194:     66(ptr) AccessChain 189 65
                              Store 194 193
             197:          10 Load 196
             199:          14 Load 198
             200:          18 SampledImage 197 199
             201:   20(fvec2) Load 22(vs_TEXCOORD1)
             202:    7(fvec4) ImageSampleImplicitLod 200 201
             203:   27(fvec3) VectorShuffle 202 202 0 1 2
                              Store 195 203
             205:   27(fvec3) Load 195
             207:    119(ptr) AccessChain 30 206 73
             208:    6(float) Load 207
             209:    119(ptr) AccessChain 30 206 88
             210:    6(float) Load 209
             211:    119(ptr) AccessChain 30 206 118
             212:    6(float) Load 211
             213:   27(fvec3) CompositeConstruct 208 210 212
             214:   27(fvec3) FMul 205 213
                              Store 204 214
             215:   27(fvec3) Load 170
             216:   27(fvec3) VectorShuffle 215 215 0 0 0
             217:   27(fvec3) Load 204
             218:   27(fvec3) FMul 216 217
                              Store 170 218
             219:   27(fvec3) Load 170
             220:   20(fvec2) Load 101
             221:   27(fvec3) VectorShuffle 220 220 0 0 0
             222:   27(fvec3) FMul 219 221
             223:   27(fvec3) Load 51
             224:   27(fvec3) FAdd 222 223
             225:    7(fvec4) Load 189
             226:    7(fvec4) VectorShuffle 225 224 4 5 6 3
                              Store 189 226
             229:    7(fvec4) Load 189
                              Store 228 229
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

 }
}
CustomEditor "StandardParticlesShaderGUI"
Fallback "VertexLit"
}